ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"Volt_Regulator.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.Volt_Regulator_Init,"ax",%progbits
  20              		.align	2
  21              		.global	Volt_Regulator_Init
  22              		.code	16
  23              		.thumb_func
  24              		.type	Volt_Regulator_Init, %function
  25              	Volt_Regulator_Init:
  26              	.LFB3:
  27              		.file 1 "Generated_Source\\PSoC4\\Volt_Regulator.c"
   1:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/Volt_Regulator.c **** * File Name: Volt_Regulator.c
   3:Generated_Source\PSoC4/Volt_Regulator.c **** * Version 2.50
   4:Generated_Source\PSoC4/Volt_Regulator.c **** *
   5:Generated_Source\PSoC4/Volt_Regulator.c **** * Description:
   6:Generated_Source\PSoC4/Volt_Regulator.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:Generated_Source\PSoC4/Volt_Regulator.c **** *  Approximation ADC Component Component.
   8:Generated_Source\PSoC4/Volt_Regulator.c **** *
   9:Generated_Source\PSoC4/Volt_Regulator.c **** * Note:
  10:Generated_Source\PSoC4/Volt_Regulator.c **** *
  11:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
  12:Generated_Source\PSoC4/Volt_Regulator.c **** * Copyright 2008-2017, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/Volt_Regulator.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/Volt_Regulator.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/Volt_Regulator.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
  17:Generated_Source\PSoC4/Volt_Regulator.c **** 
  18:Generated_Source\PSoC4/Volt_Regulator.c **** #include "Volt_Regulator.h"
  19:Generated_Source\PSoC4/Volt_Regulator.c **** 
  20:Generated_Source\PSoC4/Volt_Regulator.c **** 
  21:Generated_Source\PSoC4/Volt_Regulator.c **** /***************************************
  22:Generated_Source\PSoC4/Volt_Regulator.c **** * Global data allocation
  23:Generated_Source\PSoC4/Volt_Regulator.c **** ***************************************/
  24:Generated_Source\PSoC4/Volt_Regulator.c **** uint8 Volt_Regulator_initVar = 0u;
  25:Generated_Source\PSoC4/Volt_Regulator.c **** volatile int16 Volt_Regulator_offset[Volt_Regulator_TOTAL_CHANNELS_NUM];
  26:Generated_Source\PSoC4/Volt_Regulator.c **** volatile int32 Volt_Regulator_countsPer10Volt[Volt_Regulator_TOTAL_CHANNELS_NUM];   /* Gain compens
  27:Generated_Source\PSoC4/Volt_Regulator.c **** 
  28:Generated_Source\PSoC4/Volt_Regulator.c **** 
  29:Generated_Source\PSoC4/Volt_Regulator.c **** /***************************************
  30:Generated_Source\PSoC4/Volt_Regulator.c **** * Local data allocation
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 2


  31:Generated_Source\PSoC4/Volt_Regulator.c **** ***************************************/
  32:Generated_Source\PSoC4/Volt_Regulator.c **** /* Channels configuration generated by customiser */
  33:Generated_Source\PSoC4/Volt_Regulator.c **** static const uint32 CYCODE Volt_Regulator_channelsConfig[] = { 0x00000402u };
  34:Generated_Source\PSoC4/Volt_Regulator.c **** 
  35:Generated_Source\PSoC4/Volt_Regulator.c **** 
  36:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
  37:Generated_Source\PSoC4/Volt_Regulator.c **** * Function Name: Volt_Regulator_Start
  38:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
  39:Generated_Source\PSoC4/Volt_Regulator.c **** *
  40:Generated_Source\PSoC4/Volt_Regulator.c **** * Summary:
  41:Generated_Source\PSoC4/Volt_Regulator.c **** *  Performs all required initialization for this component
  42:Generated_Source\PSoC4/Volt_Regulator.c **** *  and enables the power. The power will be set to the appropriate
  43:Generated_Source\PSoC4/Volt_Regulator.c **** *  power based on the clock frequency.
  44:Generated_Source\PSoC4/Volt_Regulator.c **** *
  45:Generated_Source\PSoC4/Volt_Regulator.c **** * Parameters:
  46:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
  47:Generated_Source\PSoC4/Volt_Regulator.c **** *
  48:Generated_Source\PSoC4/Volt_Regulator.c **** * Return:
  49:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
  50:Generated_Source\PSoC4/Volt_Regulator.c **** *
  51:Generated_Source\PSoC4/Volt_Regulator.c **** * Global variables:
  52:Generated_Source\PSoC4/Volt_Regulator.c **** *  The Volt_Regulator_initVar variable is used to indicate when/if initial
  53:Generated_Source\PSoC4/Volt_Regulator.c **** *  configuration of this component has happened. The variable is initialized to
  54:Generated_Source\PSoC4/Volt_Regulator.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:Generated_Source\PSoC4/Volt_Regulator.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:Generated_Source\PSoC4/Volt_Regulator.c **** *  Volt_Regulator_Start() routine.
  57:Generated_Source\PSoC4/Volt_Regulator.c **** *  If re-initialization of the component is required the variable should be set
  58:Generated_Source\PSoC4/Volt_Regulator.c **** *  to zero before call of Volt_Regulator_Start() routine, or the user may call
  59:Generated_Source\PSoC4/Volt_Regulator.c **** *  Volt_Regulator_Init() and Volt_Regulator_Enable() as done in the
  60:Generated_Source\PSoC4/Volt_Regulator.c **** *  Volt_Regulator_Start() routine.
  61:Generated_Source\PSoC4/Volt_Regulator.c **** *
  62:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
  63:Generated_Source\PSoC4/Volt_Regulator.c **** void Volt_Regulator_Start(void)
  64:Generated_Source\PSoC4/Volt_Regulator.c **** {
  65:Generated_Source\PSoC4/Volt_Regulator.c ****     /* If not Initialized then initialize all required hardware and software */
  66:Generated_Source\PSoC4/Volt_Regulator.c ****     if(Volt_Regulator_initVar == 0u)
  67:Generated_Source\PSoC4/Volt_Regulator.c ****     {
  68:Generated_Source\PSoC4/Volt_Regulator.c ****         Volt_Regulator_Init();
  69:Generated_Source\PSoC4/Volt_Regulator.c ****         Volt_Regulator_initVar = 1u;
  70:Generated_Source\PSoC4/Volt_Regulator.c ****     }
  71:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_Enable();
  72:Generated_Source\PSoC4/Volt_Regulator.c **** }
  73:Generated_Source\PSoC4/Volt_Regulator.c **** 
  74:Generated_Source\PSoC4/Volt_Regulator.c **** 
  75:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
  76:Generated_Source\PSoC4/Volt_Regulator.c **** * Function Name: Volt_Regulator_Init
  77:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
  78:Generated_Source\PSoC4/Volt_Regulator.c **** *
  79:Generated_Source\PSoC4/Volt_Regulator.c **** * Summary:
  80:Generated_Source\PSoC4/Volt_Regulator.c **** *  Initialize component's parameters to the parameters set by user in the
  81:Generated_Source\PSoC4/Volt_Regulator.c **** *  customizer of the component placed onto schematic. Usually called in
  82:Generated_Source\PSoC4/Volt_Regulator.c **** *  Volt_Regulator_Start().
  83:Generated_Source\PSoC4/Volt_Regulator.c **** *
  84:Generated_Source\PSoC4/Volt_Regulator.c **** * Parameters:
  85:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
  86:Generated_Source\PSoC4/Volt_Regulator.c **** *
  87:Generated_Source\PSoC4/Volt_Regulator.c **** * Return:
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 3


  88:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
  89:Generated_Source\PSoC4/Volt_Regulator.c **** *
  90:Generated_Source\PSoC4/Volt_Regulator.c **** * Global variables:
  91:Generated_Source\PSoC4/Volt_Regulator.c **** *  The Volt_Regulator_offset variable is initialized.
  92:Generated_Source\PSoC4/Volt_Regulator.c **** *
  93:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
  94:Generated_Source\PSoC4/Volt_Regulator.c **** void Volt_Regulator_Init(void)
  95:Generated_Source\PSoC4/Volt_Regulator.c **** {
  28              		.loc 1 95 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
  96:Generated_Source\PSoC4/Volt_Regulator.c ****     uint32 chNum;
  97:Generated_Source\PSoC4/Volt_Regulator.c ****     uint32 tmpRegVal;
  98:Generated_Source\PSoC4/Volt_Regulator.c ****     int32 counts;
  99:Generated_Source\PSoC4/Volt_Regulator.c **** 
 100:Generated_Source\PSoC4/Volt_Regulator.c ****     #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 1u)
 101:Generated_Source\PSoC4/Volt_Regulator.c ****         static const uint8 CYCODE Volt_Regulator_InputsPlacement[] =
 102:Generated_Source\PSoC4/Volt_Regulator.c ****         {
 103:Generated_Source\PSoC4/Volt_Regulator.c ****             (uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:Generated_Source\PSoC4/Volt_Regulator.c ****             (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_0_PIN
 105:Generated_Source\PSoC4/Volt_Regulator.c ****             ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:Generated_Source\PSoC4/Volt_Regulator.c ****              (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_1_PIN
 107:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 2u)
 108:Generated_Source\PSoC4/Volt_Regulator.c ****                 ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:Generated_Source\PSoC4/Volt_Regulator.c ****                  (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_2_PIN
 110:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 2u */
 111:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 3u)
 112:Generated_Source\PSoC4/Volt_Regulator.c ****                 ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:Generated_Source\PSoC4/Volt_Regulator.c ****                  (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_3_PIN
 114:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 3u */
 115:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 4u)
 116:Generated_Source\PSoC4/Volt_Regulator.c ****                 ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:Generated_Source\PSoC4/Volt_Regulator.c ****                  (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_4_PIN
 118:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 4u */
 119:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 5u)
 120:Generated_Source\PSoC4/Volt_Regulator.c ****                 ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:Generated_Source\PSoC4/Volt_Regulator.c ****                  (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_5_PIN
 122:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 5u */
 123:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 6u)
 124:Generated_Source\PSoC4/Volt_Regulator.c ****                 ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:Generated_Source\PSoC4/Volt_Regulator.c ****                  (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_6_PIN
 126:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 6u */
 127:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 7u)
 128:Generated_Source\PSoC4/Volt_Regulator.c ****                 ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:Generated_Source\PSoC4/Volt_Regulator.c ****                  (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_7_PIN
 130:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 7u */
 131:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 8u)
 132:Generated_Source\PSoC4/Volt_Regulator.c ****                 ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:Generated_Source\PSoC4/Volt_Regulator.c ****                  (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_8_PIN
 134:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 8u */
 135:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 9u)
 136:Generated_Source\PSoC4/Volt_Regulator.c ****                 ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 4


 137:Generated_Source\PSoC4/Volt_Regulator.c ****                  (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_9_PIN
 138:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 9u */
 139:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 10u)
 140:Generated_Source\PSoC4/Volt_Regulator.c ****                 ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 141:Generated_Source\PSoC4/Volt_Regulator.c ****                  (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_10_PIN
 142:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 10u */
 143:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 11u)
 144:Generated_Source\PSoC4/Volt_Regulator.c ****                 ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 145:Generated_Source\PSoC4/Volt_Regulator.c ****                  (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_11_PIN
 146:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 11u */
 147:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 12u)
 148:Generated_Source\PSoC4/Volt_Regulator.c ****                 ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 149:Generated_Source\PSoC4/Volt_Regulator.c ****                  (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_12_PIN
 150:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 12u */
 151:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 13u)
 152:Generated_Source\PSoC4/Volt_Regulator.c ****                 ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 153:Generated_Source\PSoC4/Volt_Regulator.c ****                  (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_13_PIN
 154:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 13u */
 155:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 14u)
 156:Generated_Source\PSoC4/Volt_Regulator.c ****                 ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 157:Generated_Source\PSoC4/Volt_Regulator.c ****                  (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_14_PIN
 158:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 14u */
 159:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 15u)
 160:Generated_Source\PSoC4/Volt_Regulator.c ****                 ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 161:Generated_Source\PSoC4/Volt_Regulator.c ****                  (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_15_PIN
 162:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 15u */
 163:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 16u)
 164:Generated_Source\PSoC4/Volt_Regulator.c ****                 ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 165:Generated_Source\PSoC4/Volt_Regulator.c ****                  (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_16_PIN
 166:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 16u */
 167:Generated_Source\PSoC4/Volt_Regulator.c ****         };
 168:Generated_Source\PSoC4/Volt_Regulator.c ****     #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 1u */
 169:Generated_Source\PSoC4/Volt_Regulator.c **** 
 170:Generated_Source\PSoC4/Volt_Regulator.c ****     #if(Volt_Regulator_IRQ_REMOVE == 0u)
 171:Generated_Source\PSoC4/Volt_Regulator.c ****         /* Start and set interrupt vector */
 172:Generated_Source\PSoC4/Volt_Regulator.c ****         CyIntSetPriority(Volt_Regulator_INTC_NUMBER, Volt_Regulator_INTC_PRIOR_NUMBER);
  36              		.loc 1 172 0
  37 0002 0321     		movs	r1, #3
  38 0004 0F20     		movs	r0, #15
  39 0006 FFF7FEFF 		bl	CyIntSetPriority
  40              	.LVL0:
 173:Generated_Source\PSoC4/Volt_Regulator.c ****         (void)CyIntSetVector(Volt_Regulator_INTC_NUMBER, &Volt_Regulator_ISR);
  41              		.loc 1 173 0
  42 000a 2749     		ldr	r1, .L6
  43 000c 0F20     		movs	r0, #15
  44 000e FFF7FEFF 		bl	CyIntSetVector
  45              	.LVL1:
 174:Generated_Source\PSoC4/Volt_Regulator.c ****     #endif   /* End Volt_Regulator_IRQ_REMOVE */
 175:Generated_Source\PSoC4/Volt_Regulator.c **** 
 176:Generated_Source\PSoC4/Volt_Regulator.c ****     /* Init SAR and MUX registers */
 177:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_CHAN_EN_REG = Volt_Regulator_DEFAULT_EN_CHANNELS;
  46              		.loc 1 177 0
  47 0012 0122     		movs	r2, #1
  48 0014 254B     		ldr	r3, .L6+4
  49 0016 1A60     		str	r2, [r3]
 178:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_CTRL_REG |= Volt_Regulator_DEFAULT_CTRL_REG_CFG | 
 179:Generated_Source\PSoC4/Volt_Regulator.c ****         /* Enable the SAR internal pump when global pump is enabled */
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 5


 180:Generated_Source\PSoC4/Volt_Regulator.c ****         (((Volt_Regulator_PUMP_CTRL_REG & Volt_Regulator_PUMP_CTRL_ENABLED) != 0u) ? 
  50              		.loc 1 180 0
  51 0018 254B     		ldr	r3, .L6+8
  52 001a 1B68     		ldr	r3, [r3]
 178:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_CTRL_REG |= Volt_Regulator_DEFAULT_CTRL_REG_CFG | 
  53              		.loc 1 178 0
  54 001c 002B     		cmp	r3, #0
  55 001e 01DA     		bge	.L5
  56 0020 2449     		ldr	r1, .L6+12
  57 0022 00E0     		b	.L2
  58              	.L5:
  59 0024 2449     		ldr	r1, .L6+16
  60              	.L2:
 178:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_CTRL_REG |= Volt_Regulator_DEFAULT_CTRL_REG_CFG | 
  61              		.loc 1 178 0 is_stmt 0 discriminator 4
  62 0026 254A     		ldr	r2, .L6+20
  63 0028 1368     		ldr	r3, [r2]
  64 002a 0B43     		orrs	r3, r1
  65 002c 1360     		str	r3, [r2]
 181:Generated_Source\PSoC4/Volt_Regulator.c ****         Volt_Regulator_BOOSTPUMP_EN : 0u);
 182:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_SAMPLE_CTRL_REG = Volt_Regulator_DEFAULT_SAMPLE_CTRL_REG_CFG;
  66              		.loc 1 182 0 is_stmt 1 discriminator 4
  67 002e 244A     		ldr	r2, .L6+24
  68 0030 244B     		ldr	r3, .L6+28
  69 0032 1A60     		str	r2, [r3]
 183:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_RANGE_THRES_REG = Volt_Regulator_DEFAULT_RANGE_THRES_REG_CFG;
  70              		.loc 1 183 0 discriminator 4
  71 0034 244A     		ldr	r2, .L6+32
  72 0036 254B     		ldr	r3, .L6+36
  73 0038 1A60     		str	r2, [r3]
 184:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_RANGE_COND_REG  = Volt_Regulator_COMPARE_MODE;
  74              		.loc 1 184 0 discriminator 4
  75 003a 0023     		movs	r3, #0
  76 003c 244A     		ldr	r2, .L6+40
  77 003e 1360     		str	r3, [r2]
 185:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_SAMPLE_TIME01_REG = Volt_Regulator_DEFAULT_SAMPLE_TIME01_REG_CFG;
  78              		.loc 1 185 0 discriminator 4
  79 0040 2449     		ldr	r1, .L6+44
  80 0042 254A     		ldr	r2, .L6+48
  81 0044 1160     		str	r1, [r2]
 186:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_SAMPLE_TIME23_REG = Volt_Regulator_DEFAULT_SAMPLE_TIME23_REG_CFG;
  82              		.loc 1 186 0 discriminator 4
  83 0046 2549     		ldr	r1, .L6+52
  84 0048 254A     		ldr	r2, .L6+56
  85 004a 1160     		str	r1, [r2]
 187:Generated_Source\PSoC4/Volt_Regulator.c ****     
 188:Generated_Source\PSoC4/Volt_Regulator.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 189:Generated_Source\PSoC4/Volt_Regulator.c ****     #if(Volt_Regulator_DEFAULT_MUX_SWITCH0 != 0u)
 190:Generated_Source\PSoC4/Volt_Regulator.c ****         Volt_Regulator_MUX_SWITCH0_REG |= Volt_Regulator_DEFAULT_MUX_SWITCH0;
  86              		.loc 1 190 0 discriminator 4
  87 004c 2549     		ldr	r1, .L6+60
  88 004e 0A68     		ldr	r2, [r1]
  89 0050 8020     		movs	r0, #128
  90 0052 4002     		lsls	r0, r0, #9
  91 0054 0243     		orrs	r2, r0
  92 0056 0A60     		str	r2, [r1]
 191:Generated_Source\PSoC4/Volt_Regulator.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 6


 192:Generated_Source\PSoC4/Volt_Regulator.c ****         #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 1u)
 193:Generated_Source\PSoC4/Volt_Regulator.c ****             Volt_Regulator_MUX_SWITCH_HW_CTRL_REG |= Volt_Regulator_DEFAULT_MUX_SWITCH0;
 194:Generated_Source\PSoC4/Volt_Regulator.c ****         #endif /* Volt_Regulator_TOTAL_CHANNELS_NUM > 1u */
 195:Generated_Source\PSoC4/Volt_Regulator.c ****     #endif /*Volt_Regulator_CHANNELS_MODE !=0 */
 196:Generated_Source\PSoC4/Volt_Regulator.c **** 
 197:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_SATURATE_INTR_MASK_REG = 0u;
  93              		.loc 1 197 0 discriminator 4
  94 0058 234A     		ldr	r2, .L6+64
  95 005a 1360     		str	r3, [r2]
 198:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_RANGE_INTR_MASK_REG = 0u;
  96              		.loc 1 198 0 discriminator 4
  97 005c 234A     		ldr	r2, .L6+68
  98 005e 1360     		str	r3, [r2]
 199:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_INTR_MASK_REG = Volt_Regulator_SAR_INTR_MASK;
  99              		.loc 1 199 0 discriminator 4
 100 0060 0133     		adds	r3, r3, #1
 101 0062 234A     		ldr	r2, .L6+72
 102 0064 1360     		str	r3, [r2]
 200:Generated_Source\PSoC4/Volt_Regulator.c **** 
 201:Generated_Source\PSoC4/Volt_Regulator.c ****     #if(Volt_Regulator_CY_SAR_IP_VER == Volt_Regulator_CY_SAR_IP_VER0)
 202:Generated_Source\PSoC4/Volt_Regulator.c ****         Volt_Regulator_ANA_TRIM_REG = Volt_Regulator_TRIM_COEF;
 203:Generated_Source\PSoC4/Volt_Regulator.c ****     #endif /* (Volt_Regulator_CY_SAR_IP_VER == Volt_Regulator_CY_SAR_IP_VER0) */
 204:Generated_Source\PSoC4/Volt_Regulator.c **** 
 205:Generated_Source\PSoC4/Volt_Regulator.c ****     /* Read and modify default configuration based on characterization */
 206:Generated_Source\PSoC4/Volt_Regulator.c ****     tmpRegVal = Volt_Regulator_SAR_DFT_CTRL_REG;
 103              		.loc 1 206 0 discriminator 4
 104 0066 2349     		ldr	r1, .L6+76
 105 0068 0868     		ldr	r0, [r1]
 106              	.LVL2:
 207:Generated_Source\PSoC4/Volt_Regulator.c ****     tmpRegVal &= (uint32)~Volt_Regulator_DCEN;
 107              		.loc 1 207 0 discriminator 4
 108 006a 234A     		ldr	r2, .L6+80
 109 006c 0240     		ands	r2, r0
 110              	.LVL3:
 208:Generated_Source\PSoC4/Volt_Regulator.c ****     
 209:Generated_Source\PSoC4/Volt_Regulator.c ****     #if(Volt_Regulator_CY_SAR_IP_VER == Volt_Regulator_CY_SAR_IP_VER0)
 210:Generated_Source\PSoC4/Volt_Regulator.c ****         #if(Volt_Regulator_NOMINAL_CLOCK_FREQ > (Volt_Regulator_MAX_FREQUENCY / 2))
 211:Generated_Source\PSoC4/Volt_Regulator.c ****             tmpRegVal |= Volt_Regulator_SEL_CSEL_DFT_CHAR;
 212:Generated_Source\PSoC4/Volt_Regulator.c ****         #else  /* clock speed < 9 Mhz */
 213:Generated_Source\PSoC4/Volt_Regulator.c ****             tmpRegVal |= Volt_Regulator_DLY_INC;
 214:Generated_Source\PSoC4/Volt_Regulator.c ****         #endif /* clock speed > 9 Mhz */
 215:Generated_Source\PSoC4/Volt_Regulator.c ****     #else
 216:Generated_Source\PSoC4/Volt_Regulator.c ****         #if ((Volt_Regulator_DEFAULT_VREF_SEL == Volt_Regulator__INTERNAL1024) || \
 217:Generated_Source\PSoC4/Volt_Regulator.c ****              (Volt_Regulator_DEFAULT_VREF_SEL == Volt_Regulator__INTERNALVREF))
 218:Generated_Source\PSoC4/Volt_Regulator.c ****             tmpRegVal |= Volt_Regulator_DLY_INC;
 111              		.loc 1 218 0 discriminator 4
 112 006e 1343     		orrs	r3, r2
 113              	.LVL4:
 219:Generated_Source\PSoC4/Volt_Regulator.c ****         #else
 220:Generated_Source\PSoC4/Volt_Regulator.c ****             tmpRegVal |= Volt_Regulator_DCEN;
 221:Generated_Source\PSoC4/Volt_Regulator.c ****             tmpRegVal &= (uint32)~Volt_Regulator_DLY_INC;
 222:Generated_Source\PSoC4/Volt_Regulator.c ****         #endif /* ((Volt_Regulator_DEFAULT_VREF_SEL == Volt_Regulator__INTERNAL1024) || \
 223:Generated_Source\PSoC4/Volt_Regulator.c ****                    (Volt_Regulator_DEFAULT_VREF_SEL == Volt_Regulator__INTERNALVREF)) */
 224:Generated_Source\PSoC4/Volt_Regulator.c ****     #endif /* (Volt_Regulator_CY_SAR_IP_VER == Volt_Regulator_CY_SAR_IP_VER0) */
 225:Generated_Source\PSoC4/Volt_Regulator.c ****     
 226:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_DFT_CTRL_REG = tmpRegVal;
 114              		.loc 1 226 0 discriminator 4
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 7


 115 0070 0B60     		str	r3, [r1]
 116              	.LVL5:
 227:Generated_Source\PSoC4/Volt_Regulator.c **** 
 228:Generated_Source\PSoC4/Volt_Regulator.c ****     #if(Volt_Regulator_MAX_RESOLUTION != Volt_Regulator_RESOLUTION_12)
 229:Generated_Source\PSoC4/Volt_Regulator.c ****         Volt_Regulator_WOUNDING_REG = Volt_Regulator_ALT_WOUNDING;
 230:Generated_Source\PSoC4/Volt_Regulator.c ****     #endif /* Volt_Regulator_MAX_RESOLUTION != Volt_Regulator_RESOLUTION_12 */
 231:Generated_Source\PSoC4/Volt_Regulator.c **** 
 232:Generated_Source\PSoC4/Volt_Regulator.c ****     for(chNum = 0u; chNum < Volt_Regulator_TOTAL_CHANNELS_NUM; chNum++)
 117              		.loc 1 232 0 discriminator 4
 118 0072 0023     		movs	r3, #0
 119              	.LVL6:
 120 0074 15E0     		b	.L3
 121              	.LVL7:
 122              	.L4:
 233:Generated_Source\PSoC4/Volt_Regulator.c ****     {
 234:Generated_Source\PSoC4/Volt_Regulator.c ****         tmpRegVal = (Volt_Regulator_channelsConfig[chNum] & Volt_Regulator_CHANNEL_CONFIG_MASK);
 235:Generated_Source\PSoC4/Volt_Regulator.c ****         #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 1u)
 236:Generated_Source\PSoC4/Volt_Regulator.c ****             tmpRegVal |= Volt_Regulator_InputsPlacement[chNum];
 237:Generated_Source\PSoC4/Volt_Regulator.c ****         #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 1u */
 238:Generated_Source\PSoC4/Volt_Regulator.c ****         
 239:Generated_Source\PSoC4/Volt_Regulator.c ****         
 240:Generated_Source\PSoC4/Volt_Regulator.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 241:Generated_Source\PSoC4/Volt_Regulator.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 242:Generated_Source\PSoC4/Volt_Regulator.c ****         *  (0) and 8-bit (1) resolution.
 243:Generated_Source\PSoC4/Volt_Regulator.c ****         */
 244:Generated_Source\PSoC4/Volt_Regulator.c ****         #if((Volt_Regulator_MAX_RESOLUTION != Volt_Regulator_RESOLUTION_12) && \
 245:Generated_Source\PSoC4/Volt_Regulator.c ****             (Volt_Regulator_ALT_WOUNDING == Volt_Regulator_WOUNDING_10BIT))
 246:Generated_Source\PSoC4/Volt_Regulator.c ****             tmpRegVal &= (uint32)(~Volt_Regulator_ALT_RESOLUTION_ON);
 247:Generated_Source\PSoC4/Volt_Regulator.c ****         #endif /* Volt_Regulator_MAX_RESOLUTION != Volt_Regulator_RESOLUTION_12 */
 248:Generated_Source\PSoC4/Volt_Regulator.c **** 
 249:Generated_Source\PSoC4/Volt_Regulator.c ****         #if(Volt_Regulator_INJ_CHANNEL_ENABLED)
 250:Generated_Source\PSoC4/Volt_Regulator.c ****         if(chNum < Volt_Regulator_SEQUENCED_CHANNELS_NUM)
 251:Generated_Source\PSoC4/Volt_Regulator.c ****         #endif /* Volt_Regulator_INJ_CHANNEL_ENABLED */
 252:Generated_Source\PSoC4/Volt_Regulator.c ****         {
 253:Generated_Source\PSoC4/Volt_Regulator.c ****             CY_SET_REG32((reg32 *)(Volt_Regulator_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpR
 123              		.loc 1 253 0
 124 0076 9800     		lsls	r0, r3, #2
 125 0078 204A     		ldr	r2, .L6+84
 126 007a 8218     		adds	r2, r0, r2
 127 007c 8021     		movs	r1, #128
 128 007e C900     		lsls	r1, r1, #3
 129 0080 1160     		str	r1, [r2]
 254:Generated_Source\PSoC4/Volt_Regulator.c **** 
 255:Generated_Source\PSoC4/Volt_Regulator.c ****             if((Volt_Regulator_channelsConfig[chNum] & Volt_Regulator_IS_SATURATE_EN_MASK) != 0u)
 256:Generated_Source\PSoC4/Volt_Regulator.c ****             {
 257:Generated_Source\PSoC4/Volt_Regulator.c ****                 Volt_Regulator_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 258:Generated_Source\PSoC4/Volt_Regulator.c ****             }
 259:Generated_Source\PSoC4/Volt_Regulator.c **** 
 260:Generated_Source\PSoC4/Volt_Regulator.c ****             if((Volt_Regulator_channelsConfig[chNum] & Volt_Regulator_IS_RANGE_CTRL_EN_MASK) != 0u)
 261:Generated_Source\PSoC4/Volt_Regulator.c ****             {
 262:Generated_Source\PSoC4/Volt_Regulator.c ****                 Volt_Regulator_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 130              		.loc 1 262 0
 131 0082 1A4C     		ldr	r4, .L6+68
 132 0084 2168     		ldr	r1, [r4]
 133 0086 0122     		movs	r2, #1
 134 0088 9A40     		lsls	r2, r2, r3
 135 008a 1204     		lsls	r2, r2, #16
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 8


 136 008c 120C     		lsrs	r2, r2, #16
 137 008e 0A43     		orrs	r2, r1
 138 0090 2260     		str	r2, [r4]
 139              	.LVL8:
 263:Generated_Source\PSoC4/Volt_Regulator.c ****             }
 264:Generated_Source\PSoC4/Volt_Regulator.c ****         }
 265:Generated_Source\PSoC4/Volt_Regulator.c ****         #if(Volt_Regulator_INJ_CHANNEL_ENABLED)
 266:Generated_Source\PSoC4/Volt_Regulator.c ****             else
 267:Generated_Source\PSoC4/Volt_Regulator.c ****             {
 268:Generated_Source\PSoC4/Volt_Regulator.c ****                 CY_SET_REG32(Volt_Regulator_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | Volt_Regulator_INJ
 269:Generated_Source\PSoC4/Volt_Regulator.c **** 
 270:Generated_Source\PSoC4/Volt_Regulator.c ****                 if((Volt_Regulator_channelsConfig[chNum] & Volt_Regulator_IS_SATURATE_EN_MASK) != 0
 271:Generated_Source\PSoC4/Volt_Regulator.c ****                 {
 272:Generated_Source\PSoC4/Volt_Regulator.c ****                     Volt_Regulator_SAR_INTR_MASK_REG |= Volt_Regulator_INJ_SATURATE_MASK;
 273:Generated_Source\PSoC4/Volt_Regulator.c ****                 }
 274:Generated_Source\PSoC4/Volt_Regulator.c **** 
 275:Generated_Source\PSoC4/Volt_Regulator.c ****                 if((Volt_Regulator_channelsConfig[chNum] & Volt_Regulator_IS_RANGE_CTRL_EN_MASK) !=
 276:Generated_Source\PSoC4/Volt_Regulator.c ****                 {
 277:Generated_Source\PSoC4/Volt_Regulator.c ****                     Volt_Regulator_SAR_INTR_MASK_REG |= Volt_Regulator_INJ_RANGE_MASK;
 278:Generated_Source\PSoC4/Volt_Regulator.c ****                 }
 279:Generated_Source\PSoC4/Volt_Regulator.c ****             }
 280:Generated_Source\PSoC4/Volt_Regulator.c ****         #endif /* Volt_Regulator_INJ_CHANNEL_ENABLED */
 281:Generated_Source\PSoC4/Volt_Regulator.c **** 
 282:Generated_Source\PSoC4/Volt_Regulator.c ****         if((Volt_Regulator_channelsConfig[chNum] & Volt_Regulator_ALT_RESOLUTION_ON) != 0u)
 283:Generated_Source\PSoC4/Volt_Regulator.c ****         {
 284:Generated_Source\PSoC4/Volt_Regulator.c ****                counts = (int32)Volt_Regulator_DEFAULT_MAX_WRK_ALT;
 285:Generated_Source\PSoC4/Volt_Regulator.c ****         }
 286:Generated_Source\PSoC4/Volt_Regulator.c ****         else
 287:Generated_Source\PSoC4/Volt_Regulator.c ****         {
 288:Generated_Source\PSoC4/Volt_Regulator.c ****                counts = (int32)Volt_Regulator_SAR_WRK_MAX_12BIT;
 289:Generated_Source\PSoC4/Volt_Regulator.c ****         }
 290:Generated_Source\PSoC4/Volt_Regulator.c **** 
 291:Generated_Source\PSoC4/Volt_Regulator.c ****         if((Volt_Regulator_channelsConfig[chNum] & Volt_Regulator_DIFFERENTIAL_EN) == 0u)
 292:Generated_Source\PSoC4/Volt_Regulator.c ****         {
 293:Generated_Source\PSoC4/Volt_Regulator.c ****             #if((Volt_Regulator_DEFAULT_SE_RESULT_FORMAT_SEL == Volt_Regulator__FSIGNED) && \
 294:Generated_Source\PSoC4/Volt_Regulator.c ****                 (Volt_Regulator_DEFAULT_NEG_INPUT_SEL == Volt_Regulator__VREF))
 295:Generated_Source\PSoC4/Volt_Regulator.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 296:Generated_Source\PSoC4/Volt_Regulator.c ****                 Volt_Regulator_offset[chNum] = (int16)(counts / -2);
 297:Generated_Source\PSoC4/Volt_Regulator.c ****             #else
 298:Generated_Source\PSoC4/Volt_Regulator.c ****                 Volt_Regulator_offset[chNum] = 0;
 140              		.loc 1 298 0
 141 0092 5900     		lsls	r1, r3, #1
 142 0094 0024     		movs	r4, #0
 143 0096 1A4A     		ldr	r2, .L6+88
 144 0098 8C52     		strh	r4, [r1, r2]
 299:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == Volt_Regulator__FSIGNED */
 300:Generated_Source\PSoC4/Volt_Regulator.c ****         }
 301:Generated_Source\PSoC4/Volt_Regulator.c ****         else    /* Differential channel */
 302:Generated_Source\PSoC4/Volt_Regulator.c ****         {
 303:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_DEFAULT_DIFF_RESULT_FORMAT_SEL == Volt_Regulator__FUNSIGNED)
 304:Generated_Source\PSoC4/Volt_Regulator.c ****                 /* Set offset to the half scale to convert results to signed format */
 305:Generated_Source\PSoC4/Volt_Regulator.c ****                 Volt_Regulator_offset[chNum] = (int16)(counts / 2);
 306:Generated_Source\PSoC4/Volt_Regulator.c ****             #else
 307:Generated_Source\PSoC4/Volt_Regulator.c ****                 Volt_Regulator_offset[chNum] = 0;
 308:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* end Volt_Regulator_DEFAULT_DIFF_RESULT_FORMAT_SEL == Volt_Regulator__FUNSIGNE
 309:Generated_Source\PSoC4/Volt_Regulator.c ****         }
 310:Generated_Source\PSoC4/Volt_Regulator.c ****         /* Calculate gain in counts per 10 volts with rounding */
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 9


 311:Generated_Source\PSoC4/Volt_Regulator.c ****         Volt_Regulator_countsPer10Volt[chNum] = (int16)(((counts * Volt_Regulator_10MV_COUNTS) +
 145              		.loc 1 311 0
 146 009a 1A49     		ldr	r1, .L6+92
 147 009c 1A4A     		ldr	r2, .L6+96
 148 009e 8150     		str	r1, [r0, r2]
 232:Generated_Source\PSoC4/Volt_Regulator.c ****     {
 149              		.loc 1 232 0
 150 00a0 0133     		adds	r3, r3, #1
 151              	.LVL9:
 152              	.L3:
 232:Generated_Source\PSoC4/Volt_Regulator.c ****     {
 153              		.loc 1 232 0 is_stmt 0 discriminator 1
 154 00a2 002B     		cmp	r3, #0
 155 00a4 E7D0     		beq	.L4
 312:Generated_Source\PSoC4/Volt_Regulator.c ****                             Volt_Regulator_DEFAULT_VREF_MV_VALUE) / (Volt_Regulator_DEFAULT_VREF_MV
 313:Generated_Source\PSoC4/Volt_Regulator.c ****     }
 314:Generated_Source\PSoC4/Volt_Regulator.c **** }
 156              		.loc 1 314 0 is_stmt 1
 157              		@ sp needed
 158 00a6 10BD     		pop	{r4, pc}
 159              	.L7:
 160              		.align	2
 161              	.L6:
 162 00a8 00000000 		.word	Volt_Regulator_ISR
 163 00ac 20003A40 		.word	1077542944
 164 00b0 80033A40 		.word	1077543808
 165 00b4 40021053 		.word	1393558080
 166 00b8 40020053 		.word	1392509504
 167 00bc 00003A40 		.word	1077542912
 168 00c0 F4000080 		.word	-2147483404
 169 00c4 04003A40 		.word	1077542916
 170 00c8 1007F007 		.word	133170960
 171 00cc 18003A40 		.word	1077542936
 172 00d0 1C003A40 		.word	1077542940
 173 00d4 FF030200 		.word	132095
 174 00d8 10003A40 		.word	1077542928
 175 00dc 02000200 		.word	131074
 176 00e0 14003A40 		.word	1077542932
 177 00e4 00033A40 		.word	1077543680
 178 00e8 28023A40 		.word	1077543464
 179 00ec 38023A40 		.word	1077543480
 180 00f0 18023A40 		.word	1077543448
 181 00f4 30003A40 		.word	1077542960
 182 00f8 FFFFFFDF 		.word	-536870913
 183 00fc 80003A40 		.word	1077543040
 184 0100 00000000 		.word	Volt_Regulator_offset
 185 0104 204E0000 		.word	20000
 186 0108 00000000 		.word	Volt_Regulator_countsPer10Volt
 187              		.cfi_endproc
 188              	.LFE3:
 189              		.size	Volt_Regulator_Init, .-Volt_Regulator_Init
 190              		.section	.text.Volt_Regulator_Enable,"ax",%progbits
 191              		.align	2
 192              		.global	Volt_Regulator_Enable
 193              		.code	16
 194              		.thumb_func
 195              		.type	Volt_Regulator_Enable, %function
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 10


 196              	Volt_Regulator_Enable:
 197              	.LFB4:
 315:Generated_Source\PSoC4/Volt_Regulator.c **** 
 316:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
 317:Generated_Source\PSoC4/Volt_Regulator.c **** * Function Name: ADC_SAR_1_Enable
 318:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
 319:Generated_Source\PSoC4/Volt_Regulator.c **** *
 320:Generated_Source\PSoC4/Volt_Regulator.c **** * Summary:
 321:Generated_Source\PSoC4/Volt_Regulator.c **** *  Enables the clock and analog power for SAR ADC.
 322:Generated_Source\PSoC4/Volt_Regulator.c **** *
 323:Generated_Source\PSoC4/Volt_Regulator.c **** * Parameters:
 324:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
 325:Generated_Source\PSoC4/Volt_Regulator.c **** *
 326:Generated_Source\PSoC4/Volt_Regulator.c **** * Return:
 327:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
 328:Generated_Source\PSoC4/Volt_Regulator.c **** *
 329:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
 330:Generated_Source\PSoC4/Volt_Regulator.c **** void Volt_Regulator_Enable(void)
 331:Generated_Source\PSoC4/Volt_Regulator.c **** {
 198              		.loc 1 331 0
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 0
 201              		@ frame_needed = 0, uses_anonymous_args = 0
 202 0000 10B5     		push	{r4, lr}
 203              		.cfi_def_cfa_offset 8
 204              		.cfi_offset 4, -8
 205              		.cfi_offset 14, -4
 332:Generated_Source\PSoC4/Volt_Regulator.c ****     if (0u == (Volt_Regulator_SAR_CTRL_REG & Volt_Regulator_ENABLE))
 206              		.loc 1 332 0
 207 0002 094B     		ldr	r3, .L11
 208 0004 1B68     		ldr	r3, [r3]
 209 0006 002B     		cmp	r3, #0
 210 0008 0CDB     		blt	.L8
 211              	.L10:
 333:Generated_Source\PSoC4/Volt_Regulator.c ****     {
 334:Generated_Source\PSoC4/Volt_Regulator.c ****         #if(Volt_Regulator_CY_SAR_IP_VER != Volt_Regulator_CY_SAR_IP_VER0)
 335:Generated_Source\PSoC4/Volt_Regulator.c **** 
 336:Generated_Source\PSoC4/Volt_Regulator.c ****             while (0u != (Volt_Regulator_SAR_STATUS_REG & Volt_Regulator_STATUS_BUSY))
 212              		.loc 1 336 0 discriminator 1
 213 000a 084B     		ldr	r3, .L11+4
 214 000c 1B68     		ldr	r3, [r3]
 215 000e 002B     		cmp	r3, #0
 216 0010 FBDB     		blt	.L10
 337:Generated_Source\PSoC4/Volt_Regulator.c ****             {
 338:Generated_Source\PSoC4/Volt_Regulator.c ****                 /* wait for SAR to go idle to avoid deadlock */
 339:Generated_Source\PSoC4/Volt_Regulator.c ****             }
 340:Generated_Source\PSoC4/Volt_Regulator.c ****         #endif /* (Volt_Regulator_CY_SAR_IP_VER != Volt_Regulator_CY_SAR_IP_VER0) */
 341:Generated_Source\PSoC4/Volt_Regulator.c ****         
 342:Generated_Source\PSoC4/Volt_Regulator.c ****         Volt_Regulator_SAR_CTRL_REG |= Volt_Regulator_ENABLE;
 217              		.loc 1 342 0
 218 0012 054A     		ldr	r2, .L11
 219 0014 1368     		ldr	r3, [r2]
 220 0016 8021     		movs	r1, #128
 221 0018 0906     		lsls	r1, r1, #24
 222 001a 0B43     		orrs	r3, r1
 223 001c 1360     		str	r3, [r2]
 343:Generated_Source\PSoC4/Volt_Regulator.c ****         
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 11


 344:Generated_Source\PSoC4/Volt_Regulator.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 345:Generated_Source\PSoC4/Volt_Regulator.c ****         CyDelayUs(Volt_Regulator_10US_DELAY);         
 224              		.loc 1 345 0
 225 001e 0A20     		movs	r0, #10
 226 0020 FFF7FEFF 		bl	CyDelayUs
 227              	.LVL10:
 228              	.L8:
 346:Generated_Source\PSoC4/Volt_Regulator.c ****     }
 347:Generated_Source\PSoC4/Volt_Regulator.c **** }
 229              		.loc 1 347 0
 230              		@ sp needed
 231 0024 10BD     		pop	{r4, pc}
 232              	.L12:
 233 0026 C046     		.align	2
 234              	.L11:
 235 0028 00003A40 		.word	1077542912
 236 002c 08023A40 		.word	1077543432
 237              		.cfi_endproc
 238              	.LFE4:
 239              		.size	Volt_Regulator_Enable, .-Volt_Regulator_Enable
 240              		.section	.text.Volt_Regulator_Start,"ax",%progbits
 241              		.align	2
 242              		.global	Volt_Regulator_Start
 243              		.code	16
 244              		.thumb_func
 245              		.type	Volt_Regulator_Start, %function
 246              	Volt_Regulator_Start:
 247              	.LFB2:
  64:Generated_Source\PSoC4/Volt_Regulator.c ****     /* If not Initialized then initialize all required hardware and software */
 248              		.loc 1 64 0
 249              		.cfi_startproc
 250              		@ args = 0, pretend = 0, frame = 0
 251              		@ frame_needed = 0, uses_anonymous_args = 0
 252 0000 10B5     		push	{r4, lr}
 253              		.cfi_def_cfa_offset 8
 254              		.cfi_offset 4, -8
 255              		.cfi_offset 14, -4
  66:Generated_Source\PSoC4/Volt_Regulator.c ****     {
 256              		.loc 1 66 0
 257 0002 064B     		ldr	r3, .L15
 258 0004 1B78     		ldrb	r3, [r3]
 259 0006 002B     		cmp	r3, #0
 260 0008 04D1     		bne	.L14
  68:Generated_Source\PSoC4/Volt_Regulator.c ****         Volt_Regulator_initVar = 1u;
 261              		.loc 1 68 0
 262 000a FFF7FEFF 		bl	Volt_Regulator_Init
 263              	.LVL11:
  69:Generated_Source\PSoC4/Volt_Regulator.c ****     }
 264              		.loc 1 69 0
 265 000e 0122     		movs	r2, #1
 266 0010 024B     		ldr	r3, .L15
 267 0012 1A70     		strb	r2, [r3]
 268              	.L14:
  71:Generated_Source\PSoC4/Volt_Regulator.c **** }
 269              		.loc 1 71 0
 270 0014 FFF7FEFF 		bl	Volt_Regulator_Enable
 271              	.LVL12:
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 12


  72:Generated_Source\PSoC4/Volt_Regulator.c **** 
 272              		.loc 1 72 0
 273              		@ sp needed
 274 0018 10BD     		pop	{r4, pc}
 275              	.L16:
 276 001a C046     		.align	2
 277              	.L15:
 278 001c 00000000 		.word	.LANCHOR0
 279              		.cfi_endproc
 280              	.LFE2:
 281              		.size	Volt_Regulator_Start, .-Volt_Regulator_Start
 282              		.section	.text.Volt_Regulator_Stop,"ax",%progbits
 283              		.align	2
 284              		.global	Volt_Regulator_Stop
 285              		.code	16
 286              		.thumb_func
 287              		.type	Volt_Regulator_Stop, %function
 288              	Volt_Regulator_Stop:
 289              	.LFB5:
 348:Generated_Source\PSoC4/Volt_Regulator.c **** 
 349:Generated_Source\PSoC4/Volt_Regulator.c **** 
 350:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
 351:Generated_Source\PSoC4/Volt_Regulator.c **** * Function Name: Volt_Regulator_Stop
 352:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
 353:Generated_Source\PSoC4/Volt_Regulator.c **** *
 354:Generated_Source\PSoC4/Volt_Regulator.c **** * Summary:
 355:Generated_Source\PSoC4/Volt_Regulator.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 356:Generated_Source\PSoC4/Volt_Regulator.c **** *  mode.
 357:Generated_Source\PSoC4/Volt_Regulator.c **** *
 358:Generated_Source\PSoC4/Volt_Regulator.c **** * Parameters:
 359:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
 360:Generated_Source\PSoC4/Volt_Regulator.c **** *
 361:Generated_Source\PSoC4/Volt_Regulator.c **** * Return:
 362:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
 363:Generated_Source\PSoC4/Volt_Regulator.c **** *
 364:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
 365:Generated_Source\PSoC4/Volt_Regulator.c **** void Volt_Regulator_Stop(void)
 366:Generated_Source\PSoC4/Volt_Regulator.c **** {
 290              		.loc 1 366 0
 291              		.cfi_startproc
 292              		@ args = 0, pretend = 0, frame = 0
 293              		@ frame_needed = 0, uses_anonymous_args = 0
 294              		@ link register save eliminated.
 367:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_CTRL_REG &= (uint32)~Volt_Regulator_ENABLE;
 295              		.loc 1 367 0
 296 0000 024A     		ldr	r2, .L18
 297 0002 1368     		ldr	r3, [r2]
 298 0004 5B00     		lsls	r3, r3, #1
 299 0006 5B08     		lsrs	r3, r3, #1
 300 0008 1360     		str	r3, [r2]
 368:Generated_Source\PSoC4/Volt_Regulator.c **** }
 301              		.loc 1 368 0
 302              		@ sp needed
 303 000a 7047     		bx	lr
 304              	.L19:
 305              		.align	2
 306              	.L18:
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 13


 307 000c 00003A40 		.word	1077542912
 308              		.cfi_endproc
 309              	.LFE5:
 310              		.size	Volt_Regulator_Stop, .-Volt_Regulator_Stop
 311              		.section	.text.Volt_Regulator_StartConvert,"ax",%progbits
 312              		.align	2
 313              		.global	Volt_Regulator_StartConvert
 314              		.code	16
 315              		.thumb_func
 316              		.type	Volt_Regulator_StartConvert, %function
 317              	Volt_Regulator_StartConvert:
 318              	.LFB6:
 369:Generated_Source\PSoC4/Volt_Regulator.c **** 
 370:Generated_Source\PSoC4/Volt_Regulator.c **** 
 371:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
 372:Generated_Source\PSoC4/Volt_Regulator.c **** * Function Name: Volt_Regulator_StartConvert
 373:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
 374:Generated_Source\PSoC4/Volt_Regulator.c **** *
 375:Generated_Source\PSoC4/Volt_Regulator.c **** * Summary:
 376:Generated_Source\PSoC4/Volt_Regulator.c **** *  Description:
 377:Generated_Source\PSoC4/Volt_Regulator.c **** *  For free running mode, this API starts the conversion process and it
 378:Generated_Source\PSoC4/Volt_Regulator.c **** *  runs continuously.
 379:Generated_Source\PSoC4/Volt_Regulator.c **** *
 380:Generated_Source\PSoC4/Volt_Regulator.c **** *  In a triggered mode, this routine triggers every conversion by
 381:Generated_Source\PSoC4/Volt_Regulator.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 382:Generated_Source\PSoC4/Volt_Regulator.c **** *  every conversion has to start by this API.
 383:Generated_Source\PSoC4/Volt_Regulator.c **** *
 384:Generated_Source\PSoC4/Volt_Regulator.c **** * Parameters:
 385:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
 386:Generated_Source\PSoC4/Volt_Regulator.c **** *
 387:Generated_Source\PSoC4/Volt_Regulator.c **** * Return:
 388:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
 389:Generated_Source\PSoC4/Volt_Regulator.c **** *
 390:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
 391:Generated_Source\PSoC4/Volt_Regulator.c **** void Volt_Regulator_StartConvert(void)
 392:Generated_Source\PSoC4/Volt_Regulator.c **** {
 319              		.loc 1 392 0
 320              		.cfi_startproc
 321              		@ args = 0, pretend = 0, frame = 0
 322              		@ frame_needed = 0, uses_anonymous_args = 0
 323              		@ link register save eliminated.
 393:Generated_Source\PSoC4/Volt_Regulator.c ****     #if(Volt_Regulator_DEFAULT_SAMPLE_MODE_SEL == Volt_Regulator__FREERUNNING)
 394:Generated_Source\PSoC4/Volt_Regulator.c ****         Volt_Regulator_SAR_SAMPLE_CTRL_REG |= Volt_Regulator_CONTINUOUS_EN;
 324              		.loc 1 394 0
 325 0000 034A     		ldr	r2, .L21
 326 0002 1368     		ldr	r3, [r2]
 327 0004 8021     		movs	r1, #128
 328 0006 4902     		lsls	r1, r1, #9
 329 0008 0B43     		orrs	r3, r1
 330 000a 1360     		str	r3, [r2]
 395:Generated_Source\PSoC4/Volt_Regulator.c ****     #else /* Firmware trigger */
 396:Generated_Source\PSoC4/Volt_Regulator.c ****         Volt_Regulator_SAR_START_CTRL_REG = Volt_Regulator_FW_TRIGGER;
 397:Generated_Source\PSoC4/Volt_Regulator.c ****     #endif /* End Volt_Regulator_DEFAULT_SAMPLE_MODE == Volt_Regulator__FREERUNNING */
 398:Generated_Source\PSoC4/Volt_Regulator.c **** 
 399:Generated_Source\PSoC4/Volt_Regulator.c **** }
 331              		.loc 1 399 0
 332              		@ sp needed
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 14


 333 000c 7047     		bx	lr
 334              	.L22:
 335 000e C046     		.align	2
 336              	.L21:
 337 0010 04003A40 		.word	1077542916
 338              		.cfi_endproc
 339              	.LFE6:
 340              		.size	Volt_Regulator_StartConvert, .-Volt_Regulator_StartConvert
 341              		.section	.text.Volt_Regulator_StopConvert,"ax",%progbits
 342              		.align	2
 343              		.global	Volt_Regulator_StopConvert
 344              		.code	16
 345              		.thumb_func
 346              		.type	Volt_Regulator_StopConvert, %function
 347              	Volt_Regulator_StopConvert:
 348              	.LFB7:
 400:Generated_Source\PSoC4/Volt_Regulator.c **** 
 401:Generated_Source\PSoC4/Volt_Regulator.c **** 
 402:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
 403:Generated_Source\PSoC4/Volt_Regulator.c **** * Function Name: Volt_Regulator_StopConvert
 404:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
 405:Generated_Source\PSoC4/Volt_Regulator.c **** *
 406:Generated_Source\PSoC4/Volt_Regulator.c **** * Summary:
 407:Generated_Source\PSoC4/Volt_Regulator.c **** *  Forces the ADC to stop all conversions.
 408:Generated_Source\PSoC4/Volt_Regulator.c **** *
 409:Generated_Source\PSoC4/Volt_Regulator.c **** * Parameters:
 410:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
 411:Generated_Source\PSoC4/Volt_Regulator.c **** *
 412:Generated_Source\PSoC4/Volt_Regulator.c **** * Return:
 413:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
 414:Generated_Source\PSoC4/Volt_Regulator.c **** *
 415:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
 416:Generated_Source\PSoC4/Volt_Regulator.c **** void Volt_Regulator_StopConvert(void)
 417:Generated_Source\PSoC4/Volt_Regulator.c **** {
 349              		.loc 1 417 0
 350              		.cfi_startproc
 351              		@ args = 0, pretend = 0, frame = 0
 352              		@ frame_needed = 0, uses_anonymous_args = 0
 353              		@ link register save eliminated.
 418:Generated_Source\PSoC4/Volt_Regulator.c ****     #if(Volt_Regulator_DEFAULT_SAMPLE_MODE_SEL == Volt_Regulator__FREERUNNING)
 419:Generated_Source\PSoC4/Volt_Regulator.c ****         Volt_Regulator_SAR_SAMPLE_CTRL_REG &= (uint32)(~Volt_Regulator_CONTINUOUS_EN);
 354              		.loc 1 419 0
 355 0000 024A     		ldr	r2, .L24
 356 0002 1168     		ldr	r1, [r2]
 357 0004 024B     		ldr	r3, .L24+4
 358 0006 0B40     		ands	r3, r1
 359 0008 1360     		str	r3, [r2]
 420:Generated_Source\PSoC4/Volt_Regulator.c ****     #endif /* Volt_Regulator_DEFAULT_SAMPLE_MODE == Volt_Regulator__FREERUNNING */
 421:Generated_Source\PSoC4/Volt_Regulator.c **** }
 360              		.loc 1 421 0
 361              		@ sp needed
 362 000a 7047     		bx	lr
 363              	.L25:
 364              		.align	2
 365              	.L24:
 366 000c 04003A40 		.word	1077542916
 367 0010 FFFFFEFF 		.word	-65537
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 15


 368              		.cfi_endproc
 369              	.LFE7:
 370              		.size	Volt_Regulator_StopConvert, .-Volt_Regulator_StopConvert
 371              		.section	.text.Volt_Regulator_IsEndConversion,"ax",%progbits
 372              		.align	2
 373              		.global	Volt_Regulator_IsEndConversion
 374              		.code	16
 375              		.thumb_func
 376              		.type	Volt_Regulator_IsEndConversion, %function
 377              	Volt_Regulator_IsEndConversion:
 378              	.LFB8:
 422:Generated_Source\PSoC4/Volt_Regulator.c **** 
 423:Generated_Source\PSoC4/Volt_Regulator.c **** 
 424:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
 425:Generated_Source\PSoC4/Volt_Regulator.c **** * Function Name: Volt_Regulator_IsEndConversion
 426:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
 427:Generated_Source\PSoC4/Volt_Regulator.c **** *
 428:Generated_Source\PSoC4/Volt_Regulator.c **** * Summary:
 429:Generated_Source\PSoC4/Volt_Regulator.c **** *  Description: Checks for ADC end of conversion for the case one
 430:Generated_Source\PSoC4/Volt_Regulator.c **** *  channel and end of scan for the case of multiple channels. It acts
 431:Generated_Source\PSoC4/Volt_Regulator.c **** *  as a software version of the EOC. This function provides the
 432:Generated_Source\PSoC4/Volt_Regulator.c **** *  programmer with two options. In one mode this function
 433:Generated_Source\PSoC4/Volt_Regulator.c **** *  immediately returns with the conversion status. In the other mode,
 434:Generated_Source\PSoC4/Volt_Regulator.c **** *  the function does not return (blocking) until the conversion has
 435:Generated_Source\PSoC4/Volt_Regulator.c **** *  completed.
 436:Generated_Source\PSoC4/Volt_Regulator.c **** *
 437:Generated_Source\PSoC4/Volt_Regulator.c **** * Parameters:
 438:Generated_Source\PSoC4/Volt_Regulator.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 439:Generated_Source\PSoC4/Volt_Regulator.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 440:Generated_Source\PSoC4/Volt_Regulator.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 441:Generated_Source\PSoC4/Volt_Regulator.c **** *                              for injection channel
 442:Generated_Source\PSoC4/Volt_Regulator.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 443:Generated_Source\PSoC4/Volt_Regulator.c **** *                              channel conversion
 444:Generated_Source\PSoC4/Volt_Regulator.c **** *
 445:Generated_Source\PSoC4/Volt_Regulator.c **** * Return:
 446:Generated_Source\PSoC4/Volt_Regulator.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 447:Generated_Source\PSoC4/Volt_Regulator.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 448:Generated_Source\PSoC4/Volt_Regulator.c **** *
 449:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
 450:Generated_Source\PSoC4/Volt_Regulator.c **** uint32 Volt_Regulator_IsEndConversion(uint32 retMode)
 451:Generated_Source\PSoC4/Volt_Regulator.c **** {
 379              		.loc 1 451 0
 380              		.cfi_startproc
 381              		@ args = 0, pretend = 0, frame = 0
 382              		@ frame_needed = 0, uses_anonymous_args = 0
 383              		@ link register save eliminated.
 384              	.LVL13:
 385 0000 0200     		movs	r2, r0
 386              	.LVL14:
 452:Generated_Source\PSoC4/Volt_Regulator.c ****     uint32 status = 0u;
 453:Generated_Source\PSoC4/Volt_Regulator.c **** 
 454:Generated_Source\PSoC4/Volt_Regulator.c ****     if((retMode & (Volt_Regulator_RETURN_STATUS | Volt_Regulator_WAIT_FOR_RESULT)) != 0u)
 387              		.loc 1 454 0
 388 0002 8307     		lsls	r3, r0, #30
 389 0004 0CD0     		beq	.L30
 390              	.LVL15:
 391              	.L29:
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 16


 455:Generated_Source\PSoC4/Volt_Regulator.c ****     {
 456:Generated_Source\PSoC4/Volt_Regulator.c ****         do
 457:Generated_Source\PSoC4/Volt_Regulator.c ****         {
 458:Generated_Source\PSoC4/Volt_Regulator.c ****             status = Volt_Regulator_SAR_INTR_REG & Volt_Regulator_EOS_MASK;
 392              		.loc 1 458 0 discriminator 2
 393 0006 074B     		ldr	r3, .L31
 394 0008 1B68     		ldr	r3, [r3]
 395 000a 0120     		movs	r0, #1
 396 000c 1840     		ands	r0, r3
 397              	.LVL16:
 459:Generated_Source\PSoC4/Volt_Regulator.c ****         }while((status == 0u) && ((retMode & Volt_Regulator_WAIT_FOR_RESULT) != 0u));
 398              		.loc 1 459 0 discriminator 2
 399 000e 01D1     		bne	.L28
 400              		.loc 1 459 0 is_stmt 0 discriminator 1
 401 0010 9307     		lsls	r3, r2, #30
 402 0012 F8D4     		bmi	.L29
 403              	.L28:
 460:Generated_Source\PSoC4/Volt_Regulator.c **** 
 461:Generated_Source\PSoC4/Volt_Regulator.c ****         if(status != 0u)
 404              		.loc 1 461 0 is_stmt 1
 405 0014 0028     		cmp	r0, #0
 406 0016 04D0     		beq	.L27
 462:Generated_Source\PSoC4/Volt_Regulator.c ****         {
 463:Generated_Source\PSoC4/Volt_Regulator.c ****             /* Clear EOS bit */
 464:Generated_Source\PSoC4/Volt_Regulator.c ****             Volt_Regulator_SAR_INTR_REG = Volt_Regulator_EOS_MASK;
 407              		.loc 1 464 0
 408 0018 0122     		movs	r2, #1
 409              	.LVL17:
 410 001a 024B     		ldr	r3, .L31
 411 001c 1A60     		str	r2, [r3]
 412 001e 00E0     		b	.L27
 413              	.LVL18:
 414              	.L30:
 452:Generated_Source\PSoC4/Volt_Regulator.c **** 
 415              		.loc 1 452 0
 416 0020 0020     		movs	r0, #0
 417              	.LVL19:
 418              	.L27:
 465:Generated_Source\PSoC4/Volt_Regulator.c ****         }
 466:Generated_Source\PSoC4/Volt_Regulator.c ****     }
 467:Generated_Source\PSoC4/Volt_Regulator.c **** 
 468:Generated_Source\PSoC4/Volt_Regulator.c ****     #if(Volt_Regulator_INJ_CHANNEL_ENABLED)
 469:Generated_Source\PSoC4/Volt_Regulator.c ****         if((retMode & (Volt_Regulator_RETURN_STATUS_INJ | Volt_Regulator_WAIT_FOR_RESULT_INJ)) != 0
 470:Generated_Source\PSoC4/Volt_Regulator.c ****         {
 471:Generated_Source\PSoC4/Volt_Regulator.c ****             do
 472:Generated_Source\PSoC4/Volt_Regulator.c ****             {
 473:Generated_Source\PSoC4/Volt_Regulator.c ****                 status |= Volt_Regulator_SAR_INTR_REG & Volt_Regulator_INJ_EOC_MASK;
 474:Generated_Source\PSoC4/Volt_Regulator.c ****             }while(((status & Volt_Regulator_INJ_EOC_MASK) == 0u) &&
 475:Generated_Source\PSoC4/Volt_Regulator.c ****                    ((retMode & Volt_Regulator_WAIT_FOR_RESULT_INJ) != 0u));
 476:Generated_Source\PSoC4/Volt_Regulator.c **** 
 477:Generated_Source\PSoC4/Volt_Regulator.c ****             if((status & Volt_Regulator_INJ_EOC_MASK) != 0u)
 478:Generated_Source\PSoC4/Volt_Regulator.c ****             {
 479:Generated_Source\PSoC4/Volt_Regulator.c ****                 /* Clear Injection EOS bit */
 480:Generated_Source\PSoC4/Volt_Regulator.c ****                 Volt_Regulator_SAR_INTR_REG = Volt_Regulator_INJ_EOC_MASK;
 481:Generated_Source\PSoC4/Volt_Regulator.c ****             }
 482:Generated_Source\PSoC4/Volt_Regulator.c ****         }
 483:Generated_Source\PSoC4/Volt_Regulator.c ****     #endif /* Volt_Regulator_INJ_CHANNEL_ENABLED */
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 17


 484:Generated_Source\PSoC4/Volt_Regulator.c **** 
 485:Generated_Source\PSoC4/Volt_Regulator.c ****     return (status);
 486:Generated_Source\PSoC4/Volt_Regulator.c **** }
 419              		.loc 1 486 0
 420              		@ sp needed
 421 0022 7047     		bx	lr
 422              	.L32:
 423              		.align	2
 424              	.L31:
 425 0024 10023A40 		.word	1077543440
 426              		.cfi_endproc
 427              	.LFE8:
 428              		.size	Volt_Regulator_IsEndConversion, .-Volt_Regulator_IsEndConversion
 429              		.section	.text.Volt_Regulator_GetResult16,"ax",%progbits
 430              		.align	2
 431              		.global	Volt_Regulator_GetResult16
 432              		.code	16
 433              		.thumb_func
 434              		.type	Volt_Regulator_GetResult16, %function
 435              	Volt_Regulator_GetResult16:
 436              	.LFB9:
 487:Generated_Source\PSoC4/Volt_Regulator.c **** 
 488:Generated_Source\PSoC4/Volt_Regulator.c **** 
 489:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
 490:Generated_Source\PSoC4/Volt_Regulator.c **** * Function Name: Volt_Regulator_GetResult16
 491:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
 492:Generated_Source\PSoC4/Volt_Regulator.c **** *
 493:Generated_Source\PSoC4/Volt_Regulator.c **** * Summary:
 494:Generated_Source\PSoC4/Volt_Regulator.c **** *  Gets the data available in the SAR DATA register.
 495:Generated_Source\PSoC4/Volt_Regulator.c **** *
 496:Generated_Source\PSoC4/Volt_Regulator.c **** * Parameters:
 497:Generated_Source\PSoC4/Volt_Regulator.c **** *  chan: The ADC channel in which to return the result. The first channel
 498:Generated_Source\PSoC4/Volt_Regulator.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 499:Generated_Source\PSoC4/Volt_Regulator.c **** *
 500:Generated_Source\PSoC4/Volt_Regulator.c **** * Return:
 501:Generated_Source\PSoC4/Volt_Regulator.c **** *  Returns converted data as a signed 16-bit integer
 502:Generated_Source\PSoC4/Volt_Regulator.c **** *
 503:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
 504:Generated_Source\PSoC4/Volt_Regulator.c **** int16 Volt_Regulator_GetResult16(uint32 chan)
 505:Generated_Source\PSoC4/Volt_Regulator.c **** {
 437              		.loc 1 505 0
 438              		.cfi_startproc
 439              		@ args = 0, pretend = 0, frame = 0
 440              		@ frame_needed = 0, uses_anonymous_args = 0
 441              	.LVL20:
 442 0000 10B5     		push	{r4, lr}
 443              		.cfi_def_cfa_offset 8
 444              		.cfi_offset 4, -8
 445              		.cfi_offset 14, -4
 446 0002 041E     		subs	r4, r0, #0
 506:Generated_Source\PSoC4/Volt_Regulator.c ****     uint32 result;
 507:Generated_Source\PSoC4/Volt_Regulator.c **** 
 508:Generated_Source\PSoC4/Volt_Regulator.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 509:Generated_Source\PSoC4/Volt_Regulator.c ****     CYASSERT(chan < Volt_Regulator_TOTAL_CHANNELS_NUM);
 447              		.loc 1 509 0
 448 0004 02D0     		beq	.L34
 449              		.loc 1 509 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 18


 450 0006 0020     		movs	r0, #0
 451              	.LVL21:
 452 0008 FFF7FEFF 		bl	CyHalt
 453              	.LVL22:
 454              	.L34:
 510:Generated_Source\PSoC4/Volt_Regulator.c **** 
 511:Generated_Source\PSoC4/Volt_Regulator.c ****     if(chan < Volt_Regulator_SEQUENCED_CHANNELS_NUM)
 455              		.loc 1 511 0 is_stmt 1
 456 000c 002C     		cmp	r4, #0
 457 000e 07D1     		bne	.L36
 512:Generated_Source\PSoC4/Volt_Regulator.c ****     {
 513:Generated_Source\PSoC4/Volt_Regulator.c ****         result = CY_GET_REG32((reg32 *)(Volt_Regulator_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u)))
 458              		.loc 1 513 0
 459 0010 A400     		lsls	r4, r4, #2
 460              	.LVL23:
 461 0012 054B     		ldr	r3, .L37
 462 0014 9C46     		mov	ip, r3
 463 0016 6444     		add	r4, r4, ip
 464 0018 2068     		ldr	r0, [r4]
 465 001a 0004     		lsls	r0, r0, #16
 466 001c 000C     		lsrs	r0, r0, #16
 467              	.LVL24:
 468 001e 00E0     		b	.L35
 469              	.LVL25:
 470              	.L36:
 514:Generated_Source\PSoC4/Volt_Regulator.c ****                 Volt_Regulator_RESULT_MASK;
 515:Generated_Source\PSoC4/Volt_Regulator.c ****     }
 516:Generated_Source\PSoC4/Volt_Regulator.c ****     else
 517:Generated_Source\PSoC4/Volt_Regulator.c ****     {
 518:Generated_Source\PSoC4/Volt_Regulator.c ****         #if(Volt_Regulator_INJ_CHANNEL_ENABLED)
 519:Generated_Source\PSoC4/Volt_Regulator.c ****             result = Volt_Regulator_SAR_INJ_RESULT_REG & Volt_Regulator_RESULT_MASK;
 520:Generated_Source\PSoC4/Volt_Regulator.c ****         #else
 521:Generated_Source\PSoC4/Volt_Regulator.c ****             result = 0u;
 471              		.loc 1 521 0
 472 0020 0020     		movs	r0, #0
 473              	.LVL26:
 474              	.L35:
 522:Generated_Source\PSoC4/Volt_Regulator.c ****         #endif /* Volt_Regulator_INJ_CHANNEL_ENABLED */
 523:Generated_Source\PSoC4/Volt_Regulator.c ****     }
 524:Generated_Source\PSoC4/Volt_Regulator.c **** 
 525:Generated_Source\PSoC4/Volt_Regulator.c ****     return ( (int16)result );
 475              		.loc 1 525 0
 476 0022 00B2     		sxth	r0, r0
 477              	.LVL27:
 526:Generated_Source\PSoC4/Volt_Regulator.c **** }
 478              		.loc 1 526 0
 479              		@ sp needed
 480 0024 10BD     		pop	{r4, pc}
 481              	.L38:
 482 0026 C046     		.align	2
 483              	.L37:
 484 0028 80013A40 		.word	1077543296
 485              		.cfi_endproc
 486              	.LFE9:
 487              		.size	Volt_Regulator_GetResult16, .-Volt_Regulator_GetResult16
 488              		.section	.text.Volt_Regulator_SetChanMask,"ax",%progbits
 489              		.align	2
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 19


 490              		.global	Volt_Regulator_SetChanMask
 491              		.code	16
 492              		.thumb_func
 493              		.type	Volt_Regulator_SetChanMask, %function
 494              	Volt_Regulator_SetChanMask:
 495              	.LFB10:
 527:Generated_Source\PSoC4/Volt_Regulator.c **** 
 528:Generated_Source\PSoC4/Volt_Regulator.c **** 
 529:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
 530:Generated_Source\PSoC4/Volt_Regulator.c **** * Function Name: Volt_Regulator_SetChanMask
 531:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
 532:Generated_Source\PSoC4/Volt_Regulator.c **** *
 533:Generated_Source\PSoC4/Volt_Regulator.c **** * Summary:
 534:Generated_Source\PSoC4/Volt_Regulator.c **** *  Sets the channel enable mask.
 535:Generated_Source\PSoC4/Volt_Regulator.c **** *
 536:Generated_Source\PSoC4/Volt_Regulator.c **** * Parameters:
 537:Generated_Source\PSoC4/Volt_Regulator.c **** *  mask: Sets which channels that will be
 538:Generated_Source\PSoC4/Volt_Regulator.c **** *  scanned. Setting bits for channels that do not exist will have no
 539:Generated_Source\PSoC4/Volt_Regulator.c **** *  effect. For example, if only 6 channels were enabled, setting a
 540:Generated_Source\PSoC4/Volt_Regulator.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 541:Generated_Source\PSoC4/Volt_Regulator.c **** *  This API will not enable the injection channel.
 542:Generated_Source\PSoC4/Volt_Regulator.c **** *  Examples: If the component is setup to sequence through 8
 543:Generated_Source\PSoC4/Volt_Regulator.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 544:Generated_Source\PSoC4/Volt_Regulator.c **** *
 545:Generated_Source\PSoC4/Volt_Regulator.c **** * Return:
 546:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
 547:Generated_Source\PSoC4/Volt_Regulator.c **** *
 548:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
 549:Generated_Source\PSoC4/Volt_Regulator.c **** void Volt_Regulator_SetChanMask(uint32 mask)
 550:Generated_Source\PSoC4/Volt_Regulator.c **** {
 496              		.loc 1 550 0
 497              		.cfi_startproc
 498              		@ args = 0, pretend = 0, frame = 0
 499              		@ frame_needed = 0, uses_anonymous_args = 0
 500              		@ link register save eliminated.
 501              	.LVL28:
 551:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_CHAN_EN_REG = mask & Volt_Regulator_MAX_CHANNELS_EN_MASK;
 502              		.loc 1 551 0
 503 0000 0123     		movs	r3, #1
 504 0002 1840     		ands	r0, r3
 505              	.LVL29:
 506 0004 014B     		ldr	r3, .L40
 507 0006 1860     		str	r0, [r3]
 552:Generated_Source\PSoC4/Volt_Regulator.c **** }
 508              		.loc 1 552 0
 509              		@ sp needed
 510 0008 7047     		bx	lr
 511              	.L41:
 512 000a C046     		.align	2
 513              	.L40:
 514 000c 20003A40 		.word	1077542944
 515              		.cfi_endproc
 516              	.LFE10:
 517              		.size	Volt_Regulator_SetChanMask, .-Volt_Regulator_SetChanMask
 518              		.section	.text.Volt_Regulator_SetLowLimit,"ax",%progbits
 519              		.align	2
 520              		.global	Volt_Regulator_SetLowLimit
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 20


 521              		.code	16
 522              		.thumb_func
 523              		.type	Volt_Regulator_SetLowLimit, %function
 524              	Volt_Regulator_SetLowLimit:
 525              	.LFB11:
 553:Generated_Source\PSoC4/Volt_Regulator.c **** 
 554:Generated_Source\PSoC4/Volt_Regulator.c **** #if(Volt_Regulator_INJ_CHANNEL_ENABLED)
 555:Generated_Source\PSoC4/Volt_Regulator.c **** 
 556:Generated_Source\PSoC4/Volt_Regulator.c **** 
 557:Generated_Source\PSoC4/Volt_Regulator.c ****     /*******************************************************************************
 558:Generated_Source\PSoC4/Volt_Regulator.c ****     * Function Name: Volt_Regulator_EnableInjection
 559:Generated_Source\PSoC4/Volt_Regulator.c ****     ********************************************************************************
 560:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 561:Generated_Source\PSoC4/Volt_Regulator.c ****     * Summary:
 562:Generated_Source\PSoC4/Volt_Regulator.c ****     *  Enables the injection channel for the next scan only.
 563:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 564:Generated_Source\PSoC4/Volt_Regulator.c ****     * Parameters:
 565:Generated_Source\PSoC4/Volt_Regulator.c ****     *  None.
 566:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 567:Generated_Source\PSoC4/Volt_Regulator.c ****     * Return:
 568:Generated_Source\PSoC4/Volt_Regulator.c ****     *  None.
 569:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 570:Generated_Source\PSoC4/Volt_Regulator.c ****     *******************************************************************************/
 571:Generated_Source\PSoC4/Volt_Regulator.c ****     void Volt_Regulator_EnableInjection(void)
 572:Generated_Source\PSoC4/Volt_Regulator.c ****     {
 573:Generated_Source\PSoC4/Volt_Regulator.c ****         Volt_Regulator_SAR_INJ_CHAN_CONFIG_REG |= Volt_Regulator_INJ_CHAN_EN;
 574:Generated_Source\PSoC4/Volt_Regulator.c ****     }
 575:Generated_Source\PSoC4/Volt_Regulator.c **** 
 576:Generated_Source\PSoC4/Volt_Regulator.c **** #endif /* Volt_Regulator_INJ_CHANNEL_ENABLED */
 577:Generated_Source\PSoC4/Volt_Regulator.c **** 
 578:Generated_Source\PSoC4/Volt_Regulator.c **** 
 579:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
 580:Generated_Source\PSoC4/Volt_Regulator.c **** * Function Name: Volt_Regulator_SetLowLimit
 581:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
 582:Generated_Source\PSoC4/Volt_Regulator.c **** *
 583:Generated_Source\PSoC4/Volt_Regulator.c **** * Summary:
 584:Generated_Source\PSoC4/Volt_Regulator.c **** *  Sets the low limit parameter for a limit condition.
 585:Generated_Source\PSoC4/Volt_Regulator.c **** *
 586:Generated_Source\PSoC4/Volt_Regulator.c **** * Parameters:
 587:Generated_Source\PSoC4/Volt_Regulator.c **** *  lowLimit: The low limit for a limit condition.
 588:Generated_Source\PSoC4/Volt_Regulator.c **** *
 589:Generated_Source\PSoC4/Volt_Regulator.c **** * Return:
 590:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
 591:Generated_Source\PSoC4/Volt_Regulator.c **** *
 592:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
 593:Generated_Source\PSoC4/Volt_Regulator.c **** void Volt_Regulator_SetLowLimit(uint32 lowLimit)
 594:Generated_Source\PSoC4/Volt_Regulator.c **** {
 526              		.loc 1 594 0
 527              		.cfi_startproc
 528              		@ args = 0, pretend = 0, frame = 0
 529              		@ frame_needed = 0, uses_anonymous_args = 0
 530              		@ link register save eliminated.
 531              	.LVL30:
 595:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_RANGE_THRES_REG &= (uint32)(~Volt_Regulator_RANGE_LOW_MASK);
 532              		.loc 1 595 0
 533 0000 054A     		ldr	r2, .L43
 534 0002 1368     		ldr	r3, [r2]
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 21


 535 0004 1B0C     		lsrs	r3, r3, #16
 536 0006 1B04     		lsls	r3, r3, #16
 537 0008 1360     		str	r3, [r2]
 596:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_RANGE_THRES_REG |= lowLimit & Volt_Regulator_RANGE_LOW_MASK;
 538              		.loc 1 596 0
 539 000a 1368     		ldr	r3, [r2]
 540 000c 0004     		lsls	r0, r0, #16
 541              	.LVL31:
 542 000e 000C     		lsrs	r0, r0, #16
 543 0010 1843     		orrs	r0, r3
 544 0012 1060     		str	r0, [r2]
 597:Generated_Source\PSoC4/Volt_Regulator.c **** }
 545              		.loc 1 597 0
 546              		@ sp needed
 547 0014 7047     		bx	lr
 548              	.L44:
 549 0016 C046     		.align	2
 550              	.L43:
 551 0018 18003A40 		.word	1077542936
 552              		.cfi_endproc
 553              	.LFE11:
 554              		.size	Volt_Regulator_SetLowLimit, .-Volt_Regulator_SetLowLimit
 555              		.section	.text.Volt_Regulator_SetHighLimit,"ax",%progbits
 556              		.align	2
 557              		.global	Volt_Regulator_SetHighLimit
 558              		.code	16
 559              		.thumb_func
 560              		.type	Volt_Regulator_SetHighLimit, %function
 561              	Volt_Regulator_SetHighLimit:
 562              	.LFB12:
 598:Generated_Source\PSoC4/Volt_Regulator.c **** 
 599:Generated_Source\PSoC4/Volt_Regulator.c **** 
 600:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
 601:Generated_Source\PSoC4/Volt_Regulator.c **** * Function Name: Volt_Regulator_SetHighLimit
 602:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
 603:Generated_Source\PSoC4/Volt_Regulator.c **** *
 604:Generated_Source\PSoC4/Volt_Regulator.c **** * Summary:
 605:Generated_Source\PSoC4/Volt_Regulator.c **** *  Sets the low limit parameter for a limit condition.
 606:Generated_Source\PSoC4/Volt_Regulator.c **** *
 607:Generated_Source\PSoC4/Volt_Regulator.c **** * Parameters:
 608:Generated_Source\PSoC4/Volt_Regulator.c **** *  highLimit: The high limit for a limit condition.
 609:Generated_Source\PSoC4/Volt_Regulator.c **** *
 610:Generated_Source\PSoC4/Volt_Regulator.c **** * Return:
 611:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
 612:Generated_Source\PSoC4/Volt_Regulator.c **** *
 613:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
 614:Generated_Source\PSoC4/Volt_Regulator.c **** void Volt_Regulator_SetHighLimit(uint32 highLimit)
 615:Generated_Source\PSoC4/Volt_Regulator.c **** {
 563              		.loc 1 615 0
 564              		.cfi_startproc
 565              		@ args = 0, pretend = 0, frame = 0
 566              		@ frame_needed = 0, uses_anonymous_args = 0
 567              		@ link register save eliminated.
 568              	.LVL32:
 616:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_RANGE_THRES_REG &= (uint32)(~Volt_Regulator_RANGE_HIGH_MASK);
 569              		.loc 1 616 0
 570 0000 044A     		ldr	r2, .L46
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 22


 571 0002 1368     		ldr	r3, [r2]
 572 0004 1B04     		lsls	r3, r3, #16
 573 0006 1B0C     		lsrs	r3, r3, #16
 574 0008 1360     		str	r3, [r2]
 617:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_RANGE_THRES_REG |= (uint32)(highLimit << Volt_Regulator_RANGE_HIGH_OFFSET);
 575              		.loc 1 617 0
 576 000a 1368     		ldr	r3, [r2]
 577 000c 0004     		lsls	r0, r0, #16
 578              	.LVL33:
 579 000e 1843     		orrs	r0, r3
 580 0010 1060     		str	r0, [r2]
 618:Generated_Source\PSoC4/Volt_Regulator.c **** }
 581              		.loc 1 618 0
 582              		@ sp needed
 583 0012 7047     		bx	lr
 584              	.L47:
 585              		.align	2
 586              	.L46:
 587 0014 18003A40 		.word	1077542936
 588              		.cfi_endproc
 589              	.LFE12:
 590              		.size	Volt_Regulator_SetHighLimit, .-Volt_Regulator_SetHighLimit
 591              		.section	.text.Volt_Regulator_SetLimitMask,"ax",%progbits
 592              		.align	2
 593              		.global	Volt_Regulator_SetLimitMask
 594              		.code	16
 595              		.thumb_func
 596              		.type	Volt_Regulator_SetLimitMask, %function
 597              	Volt_Regulator_SetLimitMask:
 598              	.LFB13:
 619:Generated_Source\PSoC4/Volt_Regulator.c **** 
 620:Generated_Source\PSoC4/Volt_Regulator.c **** 
 621:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
 622:Generated_Source\PSoC4/Volt_Regulator.c **** * Function Name: Volt_Regulator_SetLimitMask
 623:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
 624:Generated_Source\PSoC4/Volt_Regulator.c **** *
 625:Generated_Source\PSoC4/Volt_Regulator.c **** * Summary:
 626:Generated_Source\PSoC4/Volt_Regulator.c **** *  Sets the channel limit condition mask.
 627:Generated_Source\PSoC4/Volt_Regulator.c **** *
 628:Generated_Source\PSoC4/Volt_Regulator.c **** * Parameters:
 629:Generated_Source\PSoC4/Volt_Regulator.c **** *  mask: Sets which channels that may cause a
 630:Generated_Source\PSoC4/Volt_Regulator.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 631:Generated_Source\PSoC4/Volt_Regulator.c **** *  will have no effect. For example, if only 6 channels were enabled,
 632:Generated_Source\PSoC4/Volt_Regulator.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 633:Generated_Source\PSoC4/Volt_Regulator.c **** *
 634:Generated_Source\PSoC4/Volt_Regulator.c **** * Return:
 635:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
 636:Generated_Source\PSoC4/Volt_Regulator.c **** *
 637:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
 638:Generated_Source\PSoC4/Volt_Regulator.c **** void Volt_Regulator_SetLimitMask(uint32 mask)
 639:Generated_Source\PSoC4/Volt_Regulator.c **** {
 599              		.loc 1 639 0
 600              		.cfi_startproc
 601              		@ args = 0, pretend = 0, frame = 0
 602              		@ frame_needed = 0, uses_anonymous_args = 0
 603              		@ link register save eliminated.
 604              	.LVL34:
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 23


 640:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_RANGE_INTR_MASK_REG = mask & Volt_Regulator_MAX_CHANNELS_EN_MASK;
 605              		.loc 1 640 0
 606 0000 0123     		movs	r3, #1
 607 0002 1840     		ands	r0, r3
 608              	.LVL35:
 609 0004 014B     		ldr	r3, .L49
 610 0006 1860     		str	r0, [r3]
 641:Generated_Source\PSoC4/Volt_Regulator.c **** }
 611              		.loc 1 641 0
 612              		@ sp needed
 613 0008 7047     		bx	lr
 614              	.L50:
 615 000a C046     		.align	2
 616              	.L49:
 617 000c 38023A40 		.word	1077543480
 618              		.cfi_endproc
 619              	.LFE13:
 620              		.size	Volt_Regulator_SetLimitMask, .-Volt_Regulator_SetLimitMask
 621              		.section	.text.Volt_Regulator_SetSatMask,"ax",%progbits
 622              		.align	2
 623              		.global	Volt_Regulator_SetSatMask
 624              		.code	16
 625              		.thumb_func
 626              		.type	Volt_Regulator_SetSatMask, %function
 627              	Volt_Regulator_SetSatMask:
 628              	.LFB14:
 642:Generated_Source\PSoC4/Volt_Regulator.c **** 
 643:Generated_Source\PSoC4/Volt_Regulator.c **** 
 644:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
 645:Generated_Source\PSoC4/Volt_Regulator.c **** * Function Name: Volt_Regulator_SetSatMask
 646:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
 647:Generated_Source\PSoC4/Volt_Regulator.c **** *
 648:Generated_Source\PSoC4/Volt_Regulator.c **** * Summary:
 649:Generated_Source\PSoC4/Volt_Regulator.c **** *  Sets the channel saturation event mask.
 650:Generated_Source\PSoC4/Volt_Regulator.c **** *
 651:Generated_Source\PSoC4/Volt_Regulator.c **** * Parameters:
 652:Generated_Source\PSoC4/Volt_Regulator.c **** *  mask: Sets which channels that may cause a
 653:Generated_Source\PSoC4/Volt_Regulator.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 654:Generated_Source\PSoC4/Volt_Regulator.c **** *  will have no effect. For example, if only 8 channels were enabled,
 655:Generated_Source\PSoC4/Volt_Regulator.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 656:Generated_Source\PSoC4/Volt_Regulator.c **** *
 657:Generated_Source\PSoC4/Volt_Regulator.c **** * Return:
 658:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
 659:Generated_Source\PSoC4/Volt_Regulator.c **** *
 660:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
 661:Generated_Source\PSoC4/Volt_Regulator.c **** void Volt_Regulator_SetSatMask(uint32 mask)
 662:Generated_Source\PSoC4/Volt_Regulator.c **** {
 629              		.loc 1 662 0
 630              		.cfi_startproc
 631              		@ args = 0, pretend = 0, frame = 0
 632              		@ frame_needed = 0, uses_anonymous_args = 0
 633              		@ link register save eliminated.
 634              	.LVL36:
 663:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_SATURATE_INTR_MASK_REG = mask & Volt_Regulator_MAX_CHANNELS_EN_MASK;
 635              		.loc 1 663 0
 636 0000 0123     		movs	r3, #1
 637 0002 1840     		ands	r0, r3
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 24


 638              	.LVL37:
 639 0004 014B     		ldr	r3, .L52
 640 0006 1860     		str	r0, [r3]
 664:Generated_Source\PSoC4/Volt_Regulator.c **** }
 641              		.loc 1 664 0
 642              		@ sp needed
 643 0008 7047     		bx	lr
 644              	.L53:
 645 000a C046     		.align	2
 646              	.L52:
 647 000c 28023A40 		.word	1077543464
 648              		.cfi_endproc
 649              	.LFE14:
 650              		.size	Volt_Regulator_SetSatMask, .-Volt_Regulator_SetSatMask
 651              		.section	.text.Volt_Regulator_SetOffset,"ax",%progbits
 652              		.align	2
 653              		.global	Volt_Regulator_SetOffset
 654              		.code	16
 655              		.thumb_func
 656              		.type	Volt_Regulator_SetOffset, %function
 657              	Volt_Regulator_SetOffset:
 658              	.LFB15:
 665:Generated_Source\PSoC4/Volt_Regulator.c **** 
 666:Generated_Source\PSoC4/Volt_Regulator.c **** 
 667:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
 668:Generated_Source\PSoC4/Volt_Regulator.c **** * Function Name: Volt_Regulator_SetOffset
 669:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
 670:Generated_Source\PSoC4/Volt_Regulator.c **** *
 671:Generated_Source\PSoC4/Volt_Regulator.c **** * Summary:
 672:Generated_Source\PSoC4/Volt_Regulator.c **** *   Description: Sets the ADC offset which is used by the functions
 673:Generated_Source\PSoC4/Volt_Regulator.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 674:Generated_Source\PSoC4/Volt_Regulator.c **** *   to substract the offset from the given reading
 675:Generated_Source\PSoC4/Volt_Regulator.c **** *   before calculating the voltage conversion.
 676:Generated_Source\PSoC4/Volt_Regulator.c **** *
 677:Generated_Source\PSoC4/Volt_Regulator.c **** * Parameters:
 678:Generated_Source\PSoC4/Volt_Regulator.c **** *  chan: ADC channel number.
 679:Generated_Source\PSoC4/Volt_Regulator.c **** *  offset: This value is a measured value when the
 680:Generated_Source\PSoC4/Volt_Regulator.c **** *          inputs are shorted or connected to the same input voltage.
 681:Generated_Source\PSoC4/Volt_Regulator.c **** *
 682:Generated_Source\PSoC4/Volt_Regulator.c **** * Return:
 683:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
 684:Generated_Source\PSoC4/Volt_Regulator.c **** *
 685:Generated_Source\PSoC4/Volt_Regulator.c **** * Global variables:
 686:Generated_Source\PSoC4/Volt_Regulator.c **** *  Volt_Regulator_Offset:  Modified to set the user provided offset.
 687:Generated_Source\PSoC4/Volt_Regulator.c **** *
 688:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
 689:Generated_Source\PSoC4/Volt_Regulator.c **** void Volt_Regulator_SetOffset(uint32 chan, int16 offset)
 690:Generated_Source\PSoC4/Volt_Regulator.c **** {
 659              		.loc 1 690 0
 660              		.cfi_startproc
 661              		@ args = 0, pretend = 0, frame = 0
 662              		@ frame_needed = 0, uses_anonymous_args = 0
 663              	.LVL38:
 664 0000 70B5     		push	{r4, r5, r6, lr}
 665              		.cfi_def_cfa_offset 16
 666              		.cfi_offset 4, -16
 667              		.cfi_offset 5, -12
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 25


 668              		.cfi_offset 6, -8
 669              		.cfi_offset 14, -4
 670 0002 0400     		movs	r4, r0
 671 0004 0D00     		movs	r5, r1
 691:Generated_Source\PSoC4/Volt_Regulator.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 692:Generated_Source\PSoC4/Volt_Regulator.c ****     CYASSERT(chan < Volt_Regulator_TOTAL_CHANNELS_NUM);
 672              		.loc 1 692 0
 673 0006 0028     		cmp	r0, #0
 674 0008 02D0     		beq	.L55
 675              		.loc 1 692 0 is_stmt 0 discriminator 1
 676 000a 0020     		movs	r0, #0
 677              	.LVL39:
 678 000c FFF7FEFF 		bl	CyHalt
 679              	.LVL40:
 680              	.L55:
 693:Generated_Source\PSoC4/Volt_Regulator.c **** 
 694:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_offset[chan] = offset;
 681              		.loc 1 694 0 is_stmt 1
 682 0010 6400     		lsls	r4, r4, #1
 683              	.LVL41:
 684 0012 014B     		ldr	r3, .L56
 685 0014 E552     		strh	r5, [r4, r3]
 695:Generated_Source\PSoC4/Volt_Regulator.c **** }
 686              		.loc 1 695 0
 687              		@ sp needed
 688 0016 70BD     		pop	{r4, r5, r6, pc}
 689              	.L57:
 690              		.align	2
 691              	.L56:
 692 0018 00000000 		.word	Volt_Regulator_offset
 693              		.cfi_endproc
 694              	.LFE15:
 695              		.size	Volt_Regulator_SetOffset, .-Volt_Regulator_SetOffset
 696              		.section	.text.Volt_Regulator_SetGain,"ax",%progbits
 697              		.align	2
 698              		.global	Volt_Regulator_SetGain
 699              		.code	16
 700              		.thumb_func
 701              		.type	Volt_Regulator_SetGain, %function
 702              	Volt_Regulator_SetGain:
 703              	.LFB16:
 696:Generated_Source\PSoC4/Volt_Regulator.c **** 
 697:Generated_Source\PSoC4/Volt_Regulator.c **** 
 698:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
 699:Generated_Source\PSoC4/Volt_Regulator.c **** * Function Name: Volt_Regulator_SetGain
 700:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
 701:Generated_Source\PSoC4/Volt_Regulator.c **** *
 702:Generated_Source\PSoC4/Volt_Regulator.c **** * Summary:
 703:Generated_Source\PSoC4/Volt_Regulator.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 704:Generated_Source\PSoC4/Volt_Regulator.c **** *  conversion functions below. This value is set by default by the
 705:Generated_Source\PSoC4/Volt_Regulator.c **** *  reference and input range settings. It should only be used to further
 706:Generated_Source\PSoC4/Volt_Regulator.c **** *  calibrate the ADC with a known input or if an external reference is
 707:Generated_Source\PSoC4/Volt_Regulator.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 708:Generated_Source\PSoC4/Volt_Regulator.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 709:Generated_Source\PSoC4/Volt_Regulator.c **** *  conversion between ADC counts and voltage.
 710:Generated_Source\PSoC4/Volt_Regulator.c **** *
 711:Generated_Source\PSoC4/Volt_Regulator.c **** * Parameters:
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 26


 712:Generated_Source\PSoC4/Volt_Regulator.c **** *  chan: ADC channel number.
 713:Generated_Source\PSoC4/Volt_Regulator.c **** *  adcGain: ADC gain in counts per 10 volts.
 714:Generated_Source\PSoC4/Volt_Regulator.c **** *
 715:Generated_Source\PSoC4/Volt_Regulator.c **** * Return:
 716:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
 717:Generated_Source\PSoC4/Volt_Regulator.c **** *
 718:Generated_Source\PSoC4/Volt_Regulator.c **** * Global variables:
 719:Generated_Source\PSoC4/Volt_Regulator.c **** *  Volt_Regulator_CountsPer10Volt:  modified to set the ADC gain in counts
 720:Generated_Source\PSoC4/Volt_Regulator.c **** *   per 10 volt.
 721:Generated_Source\PSoC4/Volt_Regulator.c **** *
 722:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
 723:Generated_Source\PSoC4/Volt_Regulator.c **** void Volt_Regulator_SetGain(uint32 chan, int32 adcGain)
 724:Generated_Source\PSoC4/Volt_Regulator.c **** {
 704              		.loc 1 724 0
 705              		.cfi_startproc
 706              		@ args = 0, pretend = 0, frame = 0
 707              		@ frame_needed = 0, uses_anonymous_args = 0
 708              	.LVL42:
 709 0000 70B5     		push	{r4, r5, r6, lr}
 710              		.cfi_def_cfa_offset 16
 711              		.cfi_offset 4, -16
 712              		.cfi_offset 5, -12
 713              		.cfi_offset 6, -8
 714              		.cfi_offset 14, -4
 715 0002 0400     		movs	r4, r0
 716 0004 0D00     		movs	r5, r1
 725:Generated_Source\PSoC4/Volt_Regulator.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 726:Generated_Source\PSoC4/Volt_Regulator.c ****     CYASSERT(chan < Volt_Regulator_TOTAL_CHANNELS_NUM);
 717              		.loc 1 726 0
 718 0006 0028     		cmp	r0, #0
 719 0008 02D0     		beq	.L59
 720              		.loc 1 726 0 is_stmt 0 discriminator 1
 721 000a 0020     		movs	r0, #0
 722              	.LVL43:
 723 000c FFF7FEFF 		bl	CyHalt
 724              	.LVL44:
 725              	.L59:
 727:Generated_Source\PSoC4/Volt_Regulator.c **** 
 728:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_countsPer10Volt[chan] = adcGain;
 726              		.loc 1 728 0 is_stmt 1
 727 0010 A400     		lsls	r4, r4, #2
 728              	.LVL45:
 729 0012 014B     		ldr	r3, .L60
 730 0014 E550     		str	r5, [r4, r3]
 729:Generated_Source\PSoC4/Volt_Regulator.c **** }
 731              		.loc 1 729 0
 732              		@ sp needed
 733              	.LVL46:
 734 0016 70BD     		pop	{r4, r5, r6, pc}
 735              	.L61:
 736              		.align	2
 737              	.L60:
 738 0018 00000000 		.word	Volt_Regulator_countsPer10Volt
 739              		.cfi_endproc
 740              	.LFE16:
 741              		.size	Volt_Regulator_SetGain, .-Volt_Regulator_SetGain
 742              		.global	__aeabi_idiv
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 27


 743              		.section	.text.Volt_Regulator_CountsTo_mVolts,"ax",%progbits
 744              		.align	2
 745              		.global	Volt_Regulator_CountsTo_mVolts
 746              		.code	16
 747              		.thumb_func
 748              		.type	Volt_Regulator_CountsTo_mVolts, %function
 749              	Volt_Regulator_CountsTo_mVolts:
 750              	.LFB17:
 730:Generated_Source\PSoC4/Volt_Regulator.c **** 
 731:Generated_Source\PSoC4/Volt_Regulator.c **** 
 732:Generated_Source\PSoC4/Volt_Regulator.c **** #if(Volt_Regulator_DEFAULT_JUSTIFICATION_SEL == Volt_Regulator__RIGHT)
 733:Generated_Source\PSoC4/Volt_Regulator.c **** 
 734:Generated_Source\PSoC4/Volt_Regulator.c **** 
 735:Generated_Source\PSoC4/Volt_Regulator.c ****     /*******************************************************************************
 736:Generated_Source\PSoC4/Volt_Regulator.c ****     * Function Name: Volt_Regulator_CountsTo_mVolts
 737:Generated_Source\PSoC4/Volt_Regulator.c ****     ********************************************************************************
 738:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 739:Generated_Source\PSoC4/Volt_Regulator.c ****     * Summary:
 740:Generated_Source\PSoC4/Volt_Regulator.c ****     *  This function converts ADC counts to mVolts
 741:Generated_Source\PSoC4/Volt_Regulator.c ****     *  This function is not available when left data format justification selected.
 742:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 743:Generated_Source\PSoC4/Volt_Regulator.c ****     * Parameters:
 744:Generated_Source\PSoC4/Volt_Regulator.c ****     *  chan: The ADC channel number.
 745:Generated_Source\PSoC4/Volt_Regulator.c ****     *  adcCounts: Result from the ADC conversion
 746:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 747:Generated_Source\PSoC4/Volt_Regulator.c ****     * Return:
 748:Generated_Source\PSoC4/Volt_Regulator.c ****     *  Results in mVolts
 749:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 750:Generated_Source\PSoC4/Volt_Regulator.c ****     * Global variables:
 751:Generated_Source\PSoC4/Volt_Regulator.c ****     *  Volt_Regulator_countsPer10Volt:  used to convert ADC counts to mVolts.
 752:Generated_Source\PSoC4/Volt_Regulator.c ****     *  Volt_Regulator_Offset:  Used as the offset while converting ADC counts
 753:Generated_Source\PSoC4/Volt_Regulator.c ****     *   to mVolts.
 754:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 755:Generated_Source\PSoC4/Volt_Regulator.c ****     *******************************************************************************/
 756:Generated_Source\PSoC4/Volt_Regulator.c ****     int16 Volt_Regulator_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 757:Generated_Source\PSoC4/Volt_Regulator.c ****     {
 751              		.loc 1 757 0
 752              		.cfi_startproc
 753              		@ args = 0, pretend = 0, frame = 0
 754              		@ frame_needed = 0, uses_anonymous_args = 0
 755              	.LVL47:
 756 0000 70B5     		push	{r4, r5, r6, lr}
 757              		.cfi_def_cfa_offset 16
 758              		.cfi_offset 4, -16
 759              		.cfi_offset 5, -12
 760              		.cfi_offset 6, -8
 761              		.cfi_offset 14, -4
 762 0002 0400     		movs	r4, r0
 763 0004 0D00     		movs	r5, r1
 758:Generated_Source\PSoC4/Volt_Regulator.c ****         int16 mVolts;
 759:Generated_Source\PSoC4/Volt_Regulator.c **** 
 760:Generated_Source\PSoC4/Volt_Regulator.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 761:Generated_Source\PSoC4/Volt_Regulator.c ****         CYASSERT(chan < Volt_Regulator_TOTAL_CHANNELS_NUM);
 764              		.loc 1 761 0
 765 0006 0028     		cmp	r0, #0
 766 0008 02D0     		beq	.L63
 767              		.loc 1 761 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 28


 768 000a 0020     		movs	r0, #0
 769              	.LVL48:
 770 000c FFF7FEFF 		bl	CyHalt
 771              	.LVL49:
 772              	.L63:
 762:Generated_Source\PSoC4/Volt_Regulator.c **** 
 763:Generated_Source\PSoC4/Volt_Regulator.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 764:Generated_Source\PSoC4/Volt_Regulator.c ****         #if(Volt_Regulator_DEFAULT_AVG_MODE == Volt_Regulator__ACCUMULATE)
 765:Generated_Source\PSoC4/Volt_Regulator.c ****             if((Volt_Regulator_channelsConfig[chan] & Volt_Regulator_AVERAGING_EN) != 0u)
 766:Generated_Source\PSoC4/Volt_Regulator.c ****             {
 767:Generated_Source\PSoC4/Volt_Regulator.c ****                 adcCounts /= Volt_Regulator_DEFAULT_AVG_SAMPLES_DIV;
 768:Generated_Source\PSoC4/Volt_Regulator.c ****             }
 769:Generated_Source\PSoC4/Volt_Regulator.c ****         #endif /* Volt_Regulator_DEFAULT_AVG_MODE == Volt_Regulator__ACCUMULATE */
 770:Generated_Source\PSoC4/Volt_Regulator.c **** 
 771:Generated_Source\PSoC4/Volt_Regulator.c ****         /* Subtract ADC offset */
 772:Generated_Source\PSoC4/Volt_Regulator.c ****         adcCounts -= Volt_Regulator_offset[chan];
 773              		.loc 1 772 0 is_stmt 1
 774 0010 6300     		lsls	r3, r4, #1
 775 0012 0F4A     		ldr	r2, .L66
 776 0014 995A     		ldrh	r1, [r3, r2]
 777 0016 09B2     		sxth	r1, r1
 778 0018 691A     		subs	r1, r5, r1
 779 001a 09B2     		sxth	r1, r1
 780              	.LVL50:
 773:Generated_Source\PSoC4/Volt_Regulator.c **** 
 774:Generated_Source\PSoC4/Volt_Regulator.c ****         mVolts = (int16)((((int32)adcCounts * Volt_Regulator_10MV_COUNTS) + ( (adcCounts > 0) ?
 781              		.loc 1 774 0
 782 001c 0D48     		ldr	r0, .L66+4
 783 001e 4843     		muls	r0, r1
 775:Generated_Source\PSoC4/Volt_Regulator.c ****                  (Volt_Regulator_countsPer10Volt[chan] / 2) : (-(Volt_Regulator_countsPer10Volt[cha
 784              		.loc 1 775 0
 785 0020 0029     		cmp	r1, #0
 786 0022 06DD     		ble	.L64
 787              		.loc 1 775 0 is_stmt 0 discriminator 1
 788 0024 A300     		lsls	r3, r4, #2
 789 0026 0C4A     		ldr	r2, .L66+8
 790 0028 9A58     		ldr	r2, [r3, r2]
 791 002a D30F     		lsrs	r3, r2, #31
 792 002c 9A18     		adds	r2, r3, r2
 793 002e 5310     		asrs	r3, r2, #1
 794 0030 06E0     		b	.L65
 795              	.L64:
 796              		.loc 1 775 0 discriminator 2
 797 0032 A300     		lsls	r3, r4, #2
 798 0034 084A     		ldr	r2, .L66+8
 799 0036 9A58     		ldr	r2, [r3, r2]
 800 0038 D30F     		lsrs	r3, r2, #31
 801 003a 9A18     		adds	r2, r3, r2
 802 003c 5210     		asrs	r2, r2, #1
 803 003e 5342     		rsbs	r3, r2, #0
 804              	.L65:
 774:Generated_Source\PSoC4/Volt_Regulator.c ****                  (Volt_Regulator_countsPer10Volt[chan] / 2) : (-(Volt_Regulator_countsPer10Volt[cha
 805              		.loc 1 774 0 is_stmt 1
 806 0040 1818     		adds	r0, r3, r0
 776:Generated_Source\PSoC4/Volt_Regulator.c ****                  / Volt_Regulator_countsPer10Volt[chan]);
 807              		.loc 1 776 0
 808 0042 A400     		lsls	r4, r4, #2
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 29


 809              	.LVL51:
 810 0044 044B     		ldr	r3, .L66+8
 811 0046 E158     		ldr	r1, [r4, r3]
 812              	.LVL52:
 813 0048 FFF7FEFF 		bl	__aeabi_idiv
 814              	.LVL53:
 774:Generated_Source\PSoC4/Volt_Regulator.c ****                  (Volt_Regulator_countsPer10Volt[chan] / 2) : (-(Volt_Regulator_countsPer10Volt[cha
 815              		.loc 1 774 0
 816 004c 00B2     		sxth	r0, r0
 817              	.LVL54:
 777:Generated_Source\PSoC4/Volt_Regulator.c **** 
 778:Generated_Source\PSoC4/Volt_Regulator.c ****         return( mVolts );
 779:Generated_Source\PSoC4/Volt_Regulator.c ****     }
 818              		.loc 1 779 0
 819              		@ sp needed
 820 004e 70BD     		pop	{r4, r5, r6, pc}
 821              	.L67:
 822              		.align	2
 823              	.L66:
 824 0050 00000000 		.word	Volt_Regulator_offset
 825 0054 10270000 		.word	10000
 826 0058 00000000 		.word	Volt_Regulator_countsPer10Volt
 827              		.cfi_endproc
 828              	.LFE17:
 829              		.size	Volt_Regulator_CountsTo_mVolts, .-Volt_Regulator_CountsTo_mVolts
 830              		.global	__aeabi_lmul
 831              		.global	__aeabi_ldivmod
 832              		.section	.text.Volt_Regulator_CountsTo_uVolts,"ax",%progbits
 833              		.align	2
 834              		.global	Volt_Regulator_CountsTo_uVolts
 835              		.code	16
 836              		.thumb_func
 837              		.type	Volt_Regulator_CountsTo_uVolts, %function
 838              	Volt_Regulator_CountsTo_uVolts:
 839              	.LFB18:
 780:Generated_Source\PSoC4/Volt_Regulator.c **** 
 781:Generated_Source\PSoC4/Volt_Regulator.c **** 
 782:Generated_Source\PSoC4/Volt_Regulator.c ****     /*******************************************************************************
 783:Generated_Source\PSoC4/Volt_Regulator.c ****     * Function Name: Volt_Regulator_CountsTo_uVolts
 784:Generated_Source\PSoC4/Volt_Regulator.c ****     ********************************************************************************
 785:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 786:Generated_Source\PSoC4/Volt_Regulator.c ****     * Summary:
 787:Generated_Source\PSoC4/Volt_Regulator.c ****     *  This function converts ADC counts to micro Volts
 788:Generated_Source\PSoC4/Volt_Regulator.c ****     *  This function is not available when left data format justification selected.
 789:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 790:Generated_Source\PSoC4/Volt_Regulator.c ****     * Parameters:
 791:Generated_Source\PSoC4/Volt_Regulator.c ****     *  chan: The ADC channel number.
 792:Generated_Source\PSoC4/Volt_Regulator.c ****     *  adcCounts: Result from the ADC conversion
 793:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 794:Generated_Source\PSoC4/Volt_Regulator.c ****     * Return:
 795:Generated_Source\PSoC4/Volt_Regulator.c ****     *  Results in uVolts
 796:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 797:Generated_Source\PSoC4/Volt_Regulator.c ****     * Global variables:
 798:Generated_Source\PSoC4/Volt_Regulator.c ****     *  Volt_Regulator_countsPer10Volt:  used to convert ADC counts to uVolts.
 799:Generated_Source\PSoC4/Volt_Regulator.c ****     *  Volt_Regulator_Offset:  Used as the offset while converting ADC counts
 800:Generated_Source\PSoC4/Volt_Regulator.c ****     *   to mVolts.
 801:Generated_Source\PSoC4/Volt_Regulator.c ****     *
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 30


 802:Generated_Source\PSoC4/Volt_Regulator.c ****     * Theory:
 803:Generated_Source\PSoC4/Volt_Regulator.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 804:Generated_Source\PSoC4/Volt_Regulator.c ****     *  number in the conversion to uVolts and at the same time not loose
 805:Generated_Source\PSoC4/Volt_Regulator.c ****     *  resolution.
 806:Generated_Source\PSoC4/Volt_Regulator.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 807:Generated_Source\PSoC4/Volt_Regulator.c ****     *  on 10 million and later divide on gain in counts per 10V.
 808:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 809:Generated_Source\PSoC4/Volt_Regulator.c ****     *******************************************************************************/
 810:Generated_Source\PSoC4/Volt_Regulator.c ****     int32 Volt_Regulator_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 811:Generated_Source\PSoC4/Volt_Regulator.c ****     {
 840              		.loc 1 811 0
 841              		.cfi_startproc
 842              		@ args = 0, pretend = 0, frame = 0
 843              		@ frame_needed = 0, uses_anonymous_args = 0
 844              	.LVL55:
 845 0000 70B5     		push	{r4, r5, r6, lr}
 846              		.cfi_def_cfa_offset 16
 847              		.cfi_offset 4, -16
 848              		.cfi_offset 5, -12
 849              		.cfi_offset 6, -8
 850              		.cfi_offset 14, -4
 851 0002 0500     		movs	r5, r0
 852 0004 0C00     		movs	r4, r1
 812:Generated_Source\PSoC4/Volt_Regulator.c ****         int64 uVolts;
 813:Generated_Source\PSoC4/Volt_Regulator.c **** 
 814:Generated_Source\PSoC4/Volt_Regulator.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 815:Generated_Source\PSoC4/Volt_Regulator.c ****         CYASSERT(chan < Volt_Regulator_TOTAL_CHANNELS_NUM);
 853              		.loc 1 815 0
 854 0006 0028     		cmp	r0, #0
 855 0008 02D0     		beq	.L69
 856              		.loc 1 815 0 is_stmt 0 discriminator 1
 857 000a 0020     		movs	r0, #0
 858              	.LVL56:
 859 000c FFF7FEFF 		bl	CyHalt
 860              	.LVL57:
 861              	.L69:
 816:Generated_Source\PSoC4/Volt_Regulator.c **** 
 817:Generated_Source\PSoC4/Volt_Regulator.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 818:Generated_Source\PSoC4/Volt_Regulator.c ****         #if(Volt_Regulator_DEFAULT_AVG_MODE == Volt_Regulator__ACCUMULATE)
 819:Generated_Source\PSoC4/Volt_Regulator.c ****             if((Volt_Regulator_channelsConfig[chan] & Volt_Regulator_AVERAGING_EN) != 0u)
 820:Generated_Source\PSoC4/Volt_Regulator.c ****             {
 821:Generated_Source\PSoC4/Volt_Regulator.c ****                 adcCounts /= Volt_Regulator_DEFAULT_AVG_SAMPLES_DIV;
 822:Generated_Source\PSoC4/Volt_Regulator.c ****             }
 823:Generated_Source\PSoC4/Volt_Regulator.c ****         #endif /* Volt_Regulator_DEFAULT_AVG_MODE == Volt_Regulator__ACCUMULATE */
 824:Generated_Source\PSoC4/Volt_Regulator.c **** 
 825:Generated_Source\PSoC4/Volt_Regulator.c ****         /* Subtract ADC offset */
 826:Generated_Source\PSoC4/Volt_Regulator.c ****         adcCounts -= Volt_Regulator_offset[chan];
 862              		.loc 1 826 0 is_stmt 1
 863 0010 6A00     		lsls	r2, r5, #1
 864 0012 084B     		ldr	r3, .L70
 865 0014 D05A     		ldrh	r0, [r2, r3]
 866 0016 00B2     		sxth	r0, r0
 867 0018 201A     		subs	r0, r4, r0
 868 001a 00B2     		sxth	r0, r0
 869              	.LVL58:
 827:Generated_Source\PSoC4/Volt_Regulator.c **** 
 828:Generated_Source\PSoC4/Volt_Regulator.c ****         uVolts = ((int64)adcCounts * Volt_Regulator_10UV_COUNTS) / Volt_Regulator_countsPer10Volt[c
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 31


 870              		.loc 1 828 0
 871 001c C117     		asrs	r1, r0, #31
 872 001e 064A     		ldr	r2, .L70+4
 873 0020 0023     		movs	r3, #0
 874 0022 FFF7FEFF 		bl	__aeabi_lmul
 875              	.LVL59:
 876 0026 AD00     		lsls	r5, r5, #2
 877              	.LVL60:
 878 0028 044B     		ldr	r3, .L70+8
 879 002a EA58     		ldr	r2, [r5, r3]
 880 002c D317     		asrs	r3, r2, #31
 881 002e FFF7FEFF 		bl	__aeabi_ldivmod
 882              	.LVL61:
 829:Generated_Source\PSoC4/Volt_Regulator.c **** 
 830:Generated_Source\PSoC4/Volt_Regulator.c ****         return( (int32)uVolts );
 831:Generated_Source\PSoC4/Volt_Regulator.c ****     }
 883              		.loc 1 831 0
 884              		@ sp needed
 885 0032 70BD     		pop	{r4, r5, r6, pc}
 886              	.L71:
 887              		.align	2
 888              	.L70:
 889 0034 00000000 		.word	Volt_Regulator_offset
 890 0038 80969800 		.word	10000000
 891 003c 00000000 		.word	Volt_Regulator_countsPer10Volt
 892              		.cfi_endproc
 893              	.LFE18:
 894              		.size	Volt_Regulator_CountsTo_uVolts, .-Volt_Regulator_CountsTo_uVolts
 895              		.global	__aeabi_i2f
 896              		.global	__aeabi_fmul
 897              		.global	__aeabi_fdiv
 898              		.section	.text.Volt_Regulator_CountsTo_Volts,"ax",%progbits
 899              		.align	2
 900              		.global	Volt_Regulator_CountsTo_Volts
 901              		.code	16
 902              		.thumb_func
 903              		.type	Volt_Regulator_CountsTo_Volts, %function
 904              	Volt_Regulator_CountsTo_Volts:
 905              	.LFB19:
 832:Generated_Source\PSoC4/Volt_Regulator.c **** 
 833:Generated_Source\PSoC4/Volt_Regulator.c **** 
 834:Generated_Source\PSoC4/Volt_Regulator.c ****     /*******************************************************************************
 835:Generated_Source\PSoC4/Volt_Regulator.c ****     * Function Name: Volt_Regulator_CountsTo_Volts
 836:Generated_Source\PSoC4/Volt_Regulator.c ****     ********************************************************************************
 837:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 838:Generated_Source\PSoC4/Volt_Regulator.c ****     * Summary:
 839:Generated_Source\PSoC4/Volt_Regulator.c ****     *  Converts the ADC output to Volts as a floating point number.
 840:Generated_Source\PSoC4/Volt_Regulator.c ****     *  This function is not available when left data format justification selected.
 841:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 842:Generated_Source\PSoC4/Volt_Regulator.c ****     * Parameters:
 843:Generated_Source\PSoC4/Volt_Regulator.c ****     *  chan: The ADC channel number.
 844:Generated_Source\PSoC4/Volt_Regulator.c ****     *  Result from the ADC conversion
 845:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 846:Generated_Source\PSoC4/Volt_Regulator.c ****     * Return:
 847:Generated_Source\PSoC4/Volt_Regulator.c ****     *  Results in Volts
 848:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 849:Generated_Source\PSoC4/Volt_Regulator.c ****     * Global variables:
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 32


 850:Generated_Source\PSoC4/Volt_Regulator.c ****     *  Volt_Regulator_countsPer10Volt:  used to convert ADC counts to Volts.
 851:Generated_Source\PSoC4/Volt_Regulator.c ****     *  Volt_Regulator_Offset:  Used as the offset while converting ADC counts
 852:Generated_Source\PSoC4/Volt_Regulator.c ****     *   to mVolts.
 853:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 854:Generated_Source\PSoC4/Volt_Regulator.c ****     *******************************************************************************/
 855:Generated_Source\PSoC4/Volt_Regulator.c ****     float32 Volt_Regulator_CountsTo_Volts(uint32 chan, int16 adcCounts)
 856:Generated_Source\PSoC4/Volt_Regulator.c ****     {
 906              		.loc 1 856 0
 907              		.cfi_startproc
 908              		@ args = 0, pretend = 0, frame = 0
 909              		@ frame_needed = 0, uses_anonymous_args = 0
 910              	.LVL62:
 911 0000 70B5     		push	{r4, r5, r6, lr}
 912              		.cfi_def_cfa_offset 16
 913              		.cfi_offset 4, -16
 914              		.cfi_offset 5, -12
 915              		.cfi_offset 6, -8
 916              		.cfi_offset 14, -4
 917 0002 0400     		movs	r4, r0
 918 0004 0D00     		movs	r5, r1
 857:Generated_Source\PSoC4/Volt_Regulator.c ****         float32 volts;
 858:Generated_Source\PSoC4/Volt_Regulator.c **** 
 859:Generated_Source\PSoC4/Volt_Regulator.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 860:Generated_Source\PSoC4/Volt_Regulator.c ****         CYASSERT(chan < Volt_Regulator_TOTAL_CHANNELS_NUM);
 919              		.loc 1 860 0
 920 0006 0028     		cmp	r0, #0
 921 0008 02D0     		beq	.L73
 922              		.loc 1 860 0 is_stmt 0 discriminator 1
 923 000a 0020     		movs	r0, #0
 924              	.LVL63:
 925 000c FFF7FEFF 		bl	CyHalt
 926              	.LVL64:
 927              	.L73:
 861:Generated_Source\PSoC4/Volt_Regulator.c **** 
 862:Generated_Source\PSoC4/Volt_Regulator.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 863:Generated_Source\PSoC4/Volt_Regulator.c ****         #if(Volt_Regulator_DEFAULT_AVG_MODE == Volt_Regulator__ACCUMULATE)
 864:Generated_Source\PSoC4/Volt_Regulator.c ****             if((Volt_Regulator_channelsConfig[chan] & Volt_Regulator_AVERAGING_EN) != 0u)
 865:Generated_Source\PSoC4/Volt_Regulator.c ****             {
 866:Generated_Source\PSoC4/Volt_Regulator.c ****                 adcCounts /= Volt_Regulator_DEFAULT_AVG_SAMPLES_DIV;
 867:Generated_Source\PSoC4/Volt_Regulator.c ****             }
 868:Generated_Source\PSoC4/Volt_Regulator.c ****         #endif /* Volt_Regulator_DEFAULT_AVG_MODE == Volt_Regulator__ACCUMULATE */
 869:Generated_Source\PSoC4/Volt_Regulator.c **** 
 870:Generated_Source\PSoC4/Volt_Regulator.c ****         /* Subtract ADC offset */
 871:Generated_Source\PSoC4/Volt_Regulator.c ****         adcCounts -= Volt_Regulator_offset[chan];
 928              		.loc 1 871 0 is_stmt 1
 929 0010 6200     		lsls	r2, r4, #1
 930 0012 0A4B     		ldr	r3, .L74
 931 0014 D05A     		ldrh	r0, [r2, r3]
 932 0016 00B2     		sxth	r0, r0
 933 0018 281A     		subs	r0, r5, r0
 934 001a 00B2     		sxth	r0, r0
 935              	.LVL65:
 872:Generated_Source\PSoC4/Volt_Regulator.c **** 
 873:Generated_Source\PSoC4/Volt_Regulator.c ****         volts = ((float32)adcCounts * Volt_Regulator_10V_COUNTS) / (float32)Volt_Regulator_countsPe
 936              		.loc 1 873 0
 937 001c FFF7FEFF 		bl	__aeabi_i2f
 938              	.LVL66:
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 33


 939 0020 0749     		ldr	r1, .L74+4
 940 0022 FFF7FEFF 		bl	__aeabi_fmul
 941              	.LVL67:
 942 0026 051C     		adds	r5, r0, #0
 943 0028 A400     		lsls	r4, r4, #2
 944              	.LVL68:
 945 002a 064B     		ldr	r3, .L74+8
 946 002c E058     		ldr	r0, [r4, r3]
 947 002e FFF7FEFF 		bl	__aeabi_i2f
 948              	.LVL69:
 949 0032 011C     		adds	r1, r0, #0
 950 0034 281C     		adds	r0, r5, #0
 951 0036 FFF7FEFF 		bl	__aeabi_fdiv
 952              	.LVL70:
 874:Generated_Source\PSoC4/Volt_Regulator.c **** 
 875:Generated_Source\PSoC4/Volt_Regulator.c ****         return( volts );
 876:Generated_Source\PSoC4/Volt_Regulator.c ****     }
 953              		.loc 1 876 0
 954              		@ sp needed
 955 003a 70BD     		pop	{r4, r5, r6, pc}
 956              	.L75:
 957              		.align	2
 958              	.L74:
 959 003c 00000000 		.word	Volt_Regulator_offset
 960 0040 00002041 		.word	1092616192
 961 0044 00000000 		.word	Volt_Regulator_countsPer10Volt
 962              		.cfi_endproc
 963              	.LFE19:
 964              		.size	Volt_Regulator_CountsTo_Volts, .-Volt_Regulator_CountsTo_Volts
 965              		.comm	Volt_Regulator_countsPer10Volt,4,4
 966              		.comm	Volt_Regulator_offset,2,4
 967              		.global	Volt_Regulator_initVar
 968              		.bss
 969              		.set	.LANCHOR0,. + 0
 970              		.type	Volt_Regulator_initVar, %object
 971              		.size	Volt_Regulator_initVar, 1
 972              	Volt_Regulator_initVar:
 973 0000 00       		.space	1
 974              		.text
 975              	.Letext0:
 976              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 977              		.file 3 "Generated_Source\\PSoC4\\CyLib.h"
 978              		.section	.debug_info,"",%progbits
 979              	.Ldebug_info0:
 980 0000 75050000 		.4byte	0x575
 981 0004 0400     		.2byte	0x4
 982 0006 00000000 		.4byte	.Ldebug_abbrev0
 983 000a 04       		.byte	0x4
 984 000b 01       		.uleb128 0x1
 985 000c 2C000000 		.4byte	.LASF63
 986 0010 0C       		.byte	0xc
 987 0011 C8010000 		.4byte	.LASF64
 988 0015 10040000 		.4byte	.LASF65
 989 0019 00000000 		.4byte	.Ldebug_ranges0+0
 990 001d 00000000 		.4byte	0
 991 0021 00000000 		.4byte	.Ldebug_line0
 992 0025 02       		.uleb128 0x2
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 34


 993 0026 01       		.byte	0x1
 994 0027 06       		.byte	0x6
 995 0028 0B010000 		.4byte	.LASF0
 996 002c 02       		.uleb128 0x2
 997 002d 01       		.byte	0x1
 998 002e 08       		.byte	0x8
 999 002f C4030000 		.4byte	.LASF1
 1000 0033 02       		.uleb128 0x2
 1001 0034 02       		.byte	0x2
 1002 0035 05       		.byte	0x5
 1003 0036 D2030000 		.4byte	.LASF2
 1004 003a 02       		.uleb128 0x2
 1005 003b 02       		.byte	0x2
 1006 003c 07       		.byte	0x7
 1007 003d 6A020000 		.4byte	.LASF3
 1008 0041 02       		.uleb128 0x2
 1009 0042 04       		.byte	0x4
 1010 0043 05       		.byte	0x5
 1011 0044 39010000 		.4byte	.LASF4
 1012 0048 02       		.uleb128 0x2
 1013 0049 04       		.byte	0x4
 1014 004a 07       		.byte	0x7
 1015 004b 15020000 		.4byte	.LASF5
 1016 004f 02       		.uleb128 0x2
 1017 0050 08       		.byte	0x8
 1018 0051 05       		.byte	0x5
 1019 0052 FD000000 		.4byte	.LASF6
 1020 0056 02       		.uleb128 0x2
 1021 0057 08       		.byte	0x8
 1022 0058 07       		.byte	0x7
 1023 0059 D1000000 		.4byte	.LASF7
 1024 005d 03       		.uleb128 0x3
 1025 005e 04       		.byte	0x4
 1026 005f 05       		.byte	0x5
 1027 0060 696E7400 		.ascii	"int\000"
 1028 0064 02       		.uleb128 0x2
 1029 0065 04       		.byte	0x4
 1030 0066 07       		.byte	0x7
 1031 0067 BB010000 		.4byte	.LASF8
 1032 006b 04       		.uleb128 0x4
 1033 006c 42010000 		.4byte	.LASF9
 1034 0070 02       		.byte	0x2
 1035 0071 E401     		.2byte	0x1e4
 1036 0073 2C000000 		.4byte	0x2c
 1037 0077 04       		.uleb128 0x4
 1038 0078 00000000 		.4byte	.LASF10
 1039 007c 02       		.byte	0x2
 1040 007d E501     		.2byte	0x1e5
 1041 007f 3A000000 		.4byte	0x3a
 1042 0083 04       		.uleb128 0x4
 1043 0084 74010000 		.4byte	.LASF11
 1044 0088 02       		.byte	0x2
 1045 0089 E601     		.2byte	0x1e6
 1046 008b 48000000 		.4byte	0x48
 1047 008f 04       		.uleb128 0x4
 1048 0090 9E040000 		.4byte	.LASF12
 1049 0094 02       		.byte	0x2
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 35


 1050 0095 E801     		.2byte	0x1e8
 1051 0097 33000000 		.4byte	0x33
 1052 009b 04       		.uleb128 0x4
 1053 009c 17010000 		.4byte	.LASF13
 1054 00a0 02       		.byte	0x2
 1055 00a1 E901     		.2byte	0x1e9
 1056 00a3 41000000 		.4byte	0x41
 1057 00a7 04       		.uleb128 0x4
 1058 00a8 E7020000 		.4byte	.LASF14
 1059 00ac 02       		.byte	0x2
 1060 00ad EA01     		.2byte	0x1ea
 1061 00af B3000000 		.4byte	0xb3
 1062 00b3 02       		.uleb128 0x2
 1063 00b4 04       		.byte	0x4
 1064 00b5 04       		.byte	0x4
 1065 00b6 70030000 		.4byte	.LASF15
 1066 00ba 02       		.uleb128 0x2
 1067 00bb 08       		.byte	0x8
 1068 00bc 04       		.byte	0x4
 1069 00bd 6D010000 		.4byte	.LASF16
 1070 00c1 04       		.uleb128 0x4
 1071 00c2 59030000 		.4byte	.LASF17
 1072 00c6 02       		.byte	0x2
 1073 00c7 EF01     		.2byte	0x1ef
 1074 00c9 4F000000 		.4byte	0x4f
 1075 00cd 02       		.uleb128 0x2
 1076 00ce 01       		.byte	0x1
 1077 00cf 08       		.byte	0x8
 1078 00d0 66040000 		.4byte	.LASF18
 1079 00d4 04       		.uleb128 0x4
 1080 00d5 E1020000 		.4byte	.LASF19
 1081 00d9 02       		.byte	0x2
 1082 00da 9002     		.2byte	0x290
 1083 00dc E0000000 		.4byte	0xe0
 1084 00e0 05       		.uleb128 0x5
 1085 00e1 83000000 		.4byte	0x83
 1086 00e5 02       		.uleb128 0x2
 1087 00e6 08       		.byte	0x8
 1088 00e7 04       		.byte	0x4
 1089 00e8 17030000 		.4byte	.LASF20
 1090 00ec 02       		.uleb128 0x2
 1091 00ed 04       		.byte	0x4
 1092 00ee 07       		.byte	0x7
 1093 00ef EF020000 		.4byte	.LASF21
 1094 00f3 06       		.uleb128 0x6
 1095 00f4 F5030000 		.4byte	.LASF25
 1096 00f8 01       		.byte	0x1
 1097 00f9 5E       		.byte	0x5e
 1098 00fa 00000000 		.4byte	.LFB3
 1099 00fe 0C010000 		.4byte	.LFE3-.LFB3
 1100 0102 01       		.uleb128 0x1
 1101 0103 9C       		.byte	0x9c
 1102 0104 5D010000 		.4byte	0x15d
 1103 0108 07       		.uleb128 0x7
 1104 0109 5B040000 		.4byte	.LASF22
 1105 010d 01       		.byte	0x1
 1106 010e 60       		.byte	0x60
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 36


 1107 010f 83000000 		.4byte	0x83
 1108 0113 00000000 		.4byte	.LLST0
 1109 0117 07       		.uleb128 0x7
 1110 0118 2D020000 		.4byte	.LASF23
 1111 011c 01       		.byte	0x1
 1112 011d 61       		.byte	0x61
 1113 011e 83000000 		.4byte	0x83
 1114 0122 1F000000 		.4byte	.LLST1
 1115 0126 07       		.uleb128 0x7
 1116 0127 25000000 		.4byte	.LASF24
 1117 012b 01       		.byte	0x1
 1118 012c 62       		.byte	0x62
 1119 012d 9B000000 		.4byte	0x9b
 1120 0131 62000000 		.4byte	.LLST2
 1121 0135 08       		.uleb128 0x8
 1122 0136 0A000000 		.4byte	.LVL0
 1123 013a 4C050000 		.4byte	0x54c
 1124 013e 4D010000 		.4byte	0x14d
 1125 0142 09       		.uleb128 0x9
 1126 0143 01       		.uleb128 0x1
 1127 0144 50       		.byte	0x50
 1128 0145 01       		.uleb128 0x1
 1129 0146 3F       		.byte	0x3f
 1130 0147 09       		.uleb128 0x9
 1131 0148 01       		.uleb128 0x1
 1132 0149 51       		.byte	0x51
 1133 014a 01       		.uleb128 0x1
 1134 014b 33       		.byte	0x33
 1135 014c 00       		.byte	0
 1136 014d 0A       		.uleb128 0xa
 1137 014e 12000000 		.4byte	.LVL1
 1138 0152 57050000 		.4byte	0x557
 1139 0156 09       		.uleb128 0x9
 1140 0157 01       		.uleb128 0x1
 1141 0158 50       		.byte	0x50
 1142 0159 01       		.uleb128 0x1
 1143 015a 3F       		.byte	0x3f
 1144 015b 00       		.byte	0
 1145 015c 00       		.byte	0
 1146 015d 0B       		.uleb128 0xb
 1147 015e 01030000 		.4byte	.LASF26
 1148 0162 01       		.byte	0x1
 1149 0163 4A01     		.2byte	0x14a
 1150 0165 00000000 		.4byte	.LFB4
 1151 0169 30000000 		.4byte	.LFE4-.LFB4
 1152 016d 01       		.uleb128 0x1
 1153 016e 9C       		.byte	0x9c
 1154 016f 83010000 		.4byte	0x183
 1155 0173 0A       		.uleb128 0xa
 1156 0174 24000000 		.4byte	.LVL10
 1157 0178 62050000 		.4byte	0x562
 1158 017c 09       		.uleb128 0x9
 1159 017d 01       		.uleb128 0x1
 1160 017e 50       		.byte	0x50
 1161 017f 01       		.uleb128 0x1
 1162 0180 3A       		.byte	0x3a
 1163 0181 00       		.byte	0
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 37


 1164 0182 00       		.byte	0
 1165 0183 06       		.uleb128 0x6
 1166 0184 E8000000 		.4byte	.LASF27
 1167 0188 01       		.byte	0x1
 1168 0189 3F       		.byte	0x3f
 1169 018a 00000000 		.4byte	.LFB2
 1170 018e 20000000 		.4byte	.LFE2-.LFB2
 1171 0192 01       		.uleb128 0x1
 1172 0193 9C       		.byte	0x9c
 1173 0194 AB010000 		.4byte	0x1ab
 1174 0198 0C       		.uleb128 0xc
 1175 0199 0E000000 		.4byte	.LVL11
 1176 019d F3000000 		.4byte	0xf3
 1177 01a1 0C       		.uleb128 0xc
 1178 01a2 18000000 		.4byte	.LVL12
 1179 01a6 5D010000 		.4byte	0x15d
 1180 01aa 00       		.byte	0
 1181 01ab 0D       		.uleb128 0xd
 1182 01ac 9F010000 		.4byte	.LASF28
 1183 01b0 01       		.byte	0x1
 1184 01b1 6D01     		.2byte	0x16d
 1185 01b3 00000000 		.4byte	.LFB5
 1186 01b7 10000000 		.4byte	.LFE5-.LFB5
 1187 01bb 01       		.uleb128 0x1
 1188 01bc 9C       		.byte	0x9c
 1189 01bd 0D       		.uleb128 0xd
 1190 01be 3D030000 		.4byte	.LASF29
 1191 01c2 01       		.byte	0x1
 1192 01c3 8701     		.2byte	0x187
 1193 01c5 00000000 		.4byte	.LFB6
 1194 01c9 14000000 		.4byte	.LFE6-.LFB6
 1195 01cd 01       		.uleb128 0x1
 1196 01ce 9C       		.byte	0x9c
 1197 01cf 0D       		.uleb128 0xd
 1198 01d0 48010000 		.4byte	.LASF30
 1199 01d4 01       		.byte	0x1
 1200 01d5 A001     		.2byte	0x1a0
 1201 01d7 00000000 		.4byte	.LFB7
 1202 01db 14000000 		.4byte	.LFE7-.LFB7
 1203 01df 01       		.uleb128 0x1
 1204 01e0 9C       		.byte	0x9c
 1205 01e1 0E       		.uleb128 0xe
 1206 01e2 9E030000 		.4byte	.LASF32
 1207 01e6 01       		.byte	0x1
 1208 01e7 C201     		.2byte	0x1c2
 1209 01e9 83000000 		.4byte	0x83
 1210 01ed 00000000 		.4byte	.LFB8
 1211 01f1 28000000 		.4byte	.LFE8-.LFB8
 1212 01f5 01       		.uleb128 0x1
 1213 01f6 9C       		.byte	0x9c
 1214 01f7 1C020000 		.4byte	0x21c
 1215 01fb 0F       		.uleb128 0xf
 1216 01fc B3010000 		.4byte	.LASF34
 1217 0200 01       		.byte	0x1
 1218 0201 C201     		.2byte	0x1c2
 1219 0203 83000000 		.4byte	0x83
 1220 0207 78000000 		.4byte	.LLST3
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 38


 1221 020b 10       		.uleb128 0x10
 1222 020c 97040000 		.4byte	.LASF31
 1223 0210 01       		.byte	0x1
 1224 0211 C401     		.2byte	0x1c4
 1225 0213 83000000 		.4byte	0x83
 1226 0217 BD000000 		.4byte	.LLST4
 1227 021b 00       		.byte	0
 1228 021c 0E       		.uleb128 0xe
 1229 021d 6B040000 		.4byte	.LASF33
 1230 0221 01       		.byte	0x1
 1231 0222 F801     		.2byte	0x1f8
 1232 0224 8F000000 		.4byte	0x8f
 1233 0228 00000000 		.4byte	.LFB9
 1234 022c 2C000000 		.4byte	.LFE9-.LFB9
 1235 0230 01       		.uleb128 0x1
 1236 0231 9C       		.byte	0x9c
 1237 0232 66020000 		.4byte	0x266
 1238 0236 0F       		.uleb128 0xf
 1239 0237 61040000 		.4byte	.LASF35
 1240 023b 01       		.byte	0x1
 1241 023c F801     		.2byte	0x1f8
 1242 023e 83000000 		.4byte	0x83
 1243 0242 F3000000 		.4byte	.LLST5
 1244 0246 10       		.uleb128 0x10
 1245 0247 C3040000 		.4byte	.LASF36
 1246 024b 01       		.byte	0x1
 1247 024c FA01     		.2byte	0x1fa
 1248 024e 83000000 		.4byte	0x83
 1249 0252 38010000 		.4byte	.LLST6
 1250 0256 0A       		.uleb128 0xa
 1251 0257 0C000000 		.4byte	.LVL22
 1252 025b 6D050000 		.4byte	0x56d
 1253 025f 09       		.uleb128 0x9
 1254 0260 01       		.uleb128 0x1
 1255 0261 50       		.byte	0x50
 1256 0262 01       		.uleb128 0x1
 1257 0263 30       		.byte	0x30
 1258 0264 00       		.byte	0
 1259 0265 00       		.byte	0
 1260 0266 0B       		.uleb128 0xb
 1261 0267 7D020000 		.4byte	.LASF37
 1262 026b 01       		.byte	0x1
 1263 026c 2502     		.2byte	0x225
 1264 026e 00000000 		.4byte	.LFB10
 1265 0272 10000000 		.4byte	.LFE10-.LFB10
 1266 0276 01       		.uleb128 0x1
 1267 0277 9C       		.byte	0x9c
 1268 0278 8D020000 		.4byte	0x28d
 1269 027c 0F       		.uleb128 0xf
 1270 027d 7B010000 		.4byte	.LASF38
 1271 0281 01       		.byte	0x1
 1272 0282 2502     		.2byte	0x225
 1273 0284 83000000 		.4byte	0x83
 1274 0288 56010000 		.4byte	.LLST7
 1275 028c 00       		.byte	0
 1276 028d 0B       		.uleb128 0xb
 1277 028e C6020000 		.4byte	.LASF39
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 39


 1278 0292 01       		.byte	0x1
 1279 0293 5102     		.2byte	0x251
 1280 0295 00000000 		.4byte	.LFB11
 1281 0299 1C000000 		.4byte	.LFE11-.LFB11
 1282 029d 01       		.uleb128 0x1
 1283 029e 9C       		.byte	0x9c
 1284 029f B4020000 		.4byte	0x2b4
 1285 02a3 0F       		.uleb128 0xf
 1286 02a4 F8020000 		.4byte	.LASF40
 1287 02a8 01       		.byte	0x1
 1288 02a9 5102     		.2byte	0x251
 1289 02ab 83000000 		.4byte	0x83
 1290 02af 77010000 		.4byte	.LLST8
 1291 02b3 00       		.byte	0
 1292 02b4 0B       		.uleb128 0xb
 1293 02b5 4E020000 		.4byte	.LASF41
 1294 02b9 01       		.byte	0x1
 1295 02ba 6602     		.2byte	0x266
 1296 02bc 00000000 		.4byte	.LFB12
 1297 02c0 18000000 		.4byte	.LFE12-.LFB12
 1298 02c4 01       		.uleb128 0x1
 1299 02c5 9C       		.byte	0x9c
 1300 02c6 DB020000 		.4byte	0x2db
 1301 02ca 0F       		.uleb128 0xf
 1302 02cb 94030000 		.4byte	.LASF42
 1303 02cf 01       		.byte	0x1
 1304 02d0 6602     		.2byte	0x266
 1305 02d2 83000000 		.4byte	0x83
 1306 02d6 98010000 		.4byte	.LLST9
 1307 02da 00       		.byte	0
 1308 02db 0B       		.uleb128 0xb
 1309 02dc 1D010000 		.4byte	.LASF43
 1310 02e0 01       		.byte	0x1
 1311 02e1 7E02     		.2byte	0x27e
 1312 02e3 00000000 		.4byte	.LFB13
 1313 02e7 10000000 		.4byte	.LFE13-.LFB13
 1314 02eb 01       		.uleb128 0x1
 1315 02ec 9C       		.byte	0x9c
 1316 02ed 02030000 		.4byte	0x302
 1317 02f1 0F       		.uleb128 0xf
 1318 02f2 7B010000 		.4byte	.LASF38
 1319 02f6 01       		.byte	0x1
 1320 02f7 7E02     		.2byte	0x27e
 1321 02f9 83000000 		.4byte	0x83
 1322 02fd B9010000 		.4byte	.LLST10
 1323 0301 00       		.byte	0
 1324 0302 0B       		.uleb128 0xb
 1325 0303 23030000 		.4byte	.LASF44
 1326 0307 01       		.byte	0x1
 1327 0308 9502     		.2byte	0x295
 1328 030a 00000000 		.4byte	.LFB14
 1329 030e 10000000 		.4byte	.LFE14-.LFB14
 1330 0312 01       		.uleb128 0x1
 1331 0313 9C       		.byte	0x9c
 1332 0314 29030000 		.4byte	0x329
 1333 0318 0F       		.uleb128 0xf
 1334 0319 7B010000 		.4byte	.LASF38
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 40


 1335 031d 01       		.byte	0x1
 1336 031e 9502     		.2byte	0x295
 1337 0320 83000000 		.4byte	0x83
 1338 0324 DA010000 		.4byte	.LLST11
 1339 0328 00       		.byte	0
 1340 0329 0B       		.uleb128 0xb
 1341 032a DC030000 		.4byte	.LASF45
 1342 032e 01       		.byte	0x1
 1343 032f B102     		.2byte	0x2b1
 1344 0331 00000000 		.4byte	.LFB15
 1345 0335 1C000000 		.4byte	.LFE15-.LFB15
 1346 0339 01       		.uleb128 0x1
 1347 033a 9C       		.byte	0x9c
 1348 033b 6F030000 		.4byte	0x36f
 1349 033f 0F       		.uleb128 0xf
 1350 0340 61040000 		.4byte	.LASF35
 1351 0344 01       		.byte	0x1
 1352 0345 B102     		.2byte	0x2b1
 1353 0347 83000000 		.4byte	0x83
 1354 034b FB010000 		.4byte	.LLST12
 1355 034f 0F       		.uleb128 0xf
 1356 0350 86040000 		.4byte	.LASF46
 1357 0354 01       		.byte	0x1
 1358 0355 B102     		.2byte	0x2b1
 1359 0357 8F000000 		.4byte	0x8f
 1360 035b 27020000 		.4byte	.LLST13
 1361 035f 0A       		.uleb128 0xa
 1362 0360 10000000 		.4byte	.LVL40
 1363 0364 6D050000 		.4byte	0x56d
 1364 0368 09       		.uleb128 0x9
 1365 0369 01       		.uleb128 0x1
 1366 036a 50       		.byte	0x50
 1367 036b 01       		.uleb128 0x1
 1368 036c 30       		.byte	0x30
 1369 036d 00       		.byte	0
 1370 036e 00       		.byte	0
 1371 036f 0B       		.uleb128 0xb
 1372 0370 37020000 		.4byte	.LASF47
 1373 0374 01       		.byte	0x1
 1374 0375 D302     		.2byte	0x2d3
 1375 0377 00000000 		.4byte	.LFB16
 1376 037b 1C000000 		.4byte	.LFE16-.LFB16
 1377 037f 01       		.uleb128 0x1
 1378 0380 9C       		.byte	0x9c
 1379 0381 B5030000 		.4byte	0x3b5
 1380 0385 0F       		.uleb128 0xf
 1381 0386 61040000 		.4byte	.LASF35
 1382 038a 01       		.byte	0x1
 1383 038b D302     		.2byte	0x2d3
 1384 038d 83000000 		.4byte	0x83
 1385 0391 48020000 		.4byte	.LLST14
 1386 0395 0F       		.uleb128 0xf
 1387 0396 1D000000 		.4byte	.LASF48
 1388 039a 01       		.byte	0x1
 1389 039b D302     		.2byte	0x2d3
 1390 039d 9B000000 		.4byte	0x9b
 1391 03a1 74020000 		.4byte	.LLST15
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 41


 1392 03a5 0A       		.uleb128 0xa
 1393 03a6 10000000 		.4byte	.LVL44
 1394 03aa 6D050000 		.4byte	0x56d
 1395 03ae 09       		.uleb128 0x9
 1396 03af 01       		.uleb128 0x1
 1397 03b0 50       		.byte	0x50
 1398 03b1 01       		.uleb128 0x1
 1399 03b2 30       		.byte	0x30
 1400 03b3 00       		.byte	0
 1401 03b4 00       		.byte	0
 1402 03b5 11       		.uleb128 0x11
 1403 03b6 98020000 		.4byte	.LASF49
 1404 03ba 01       		.byte	0x1
 1405 03bb F402     		.2byte	0x2f4
 1406 03bd 8F000000 		.4byte	0x8f
 1407 03c1 00000000 		.4byte	.LFB17
 1408 03c5 5C000000 		.4byte	.LFE17-.LFB17
 1409 03c9 01       		.uleb128 0x1
 1410 03ca 9C       		.byte	0x9c
 1411 03cb 0D040000 		.4byte	0x40d
 1412 03cf 0F       		.uleb128 0xf
 1413 03d0 61040000 		.4byte	.LASF35
 1414 03d4 01       		.byte	0x1
 1415 03d5 F402     		.2byte	0x2f4
 1416 03d7 83000000 		.4byte	0x83
 1417 03db A4020000 		.4byte	.LLST16
 1418 03df 0F       		.uleb128 0xf
 1419 03e0 8D040000 		.4byte	.LASF50
 1420 03e4 01       		.byte	0x1
 1421 03e5 F402     		.2byte	0x2f4
 1422 03e7 8F000000 		.4byte	0x8f
 1423 03eb D0020000 		.4byte	.LLST17
 1424 03ef 12       		.uleb128 0x12
 1425 03f0 09040000 		.4byte	.LASF51
 1426 03f4 01       		.byte	0x1
 1427 03f5 F602     		.2byte	0x2f6
 1428 03f7 8F000000 		.4byte	0x8f
 1429 03fb 01       		.uleb128 0x1
 1430 03fc 50       		.byte	0x50
 1431 03fd 0A       		.uleb128 0xa
 1432 03fe 10000000 		.4byte	.LVL49
 1433 0402 6D050000 		.4byte	0x56d
 1434 0406 09       		.uleb128 0x9
 1435 0407 01       		.uleb128 0x1
 1436 0408 50       		.byte	0x50
 1437 0409 01       		.uleb128 0x1
 1438 040a 30       		.byte	0x30
 1439 040b 00       		.byte	0
 1440 040c 00       		.byte	0
 1441 040d 11       		.uleb128 0x11
 1442 040e 80010000 		.4byte	.LASF52
 1443 0412 01       		.byte	0x1
 1444 0413 2A03     		.2byte	0x32a
 1445 0415 9B000000 		.4byte	0x9b
 1446 0419 00000000 		.4byte	.LFB18
 1447 041d 40000000 		.4byte	.LFE18-.LFB18
 1448 0421 01       		.uleb128 0x1
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 42


 1449 0422 9C       		.byte	0x9c
 1450 0423 63040000 		.4byte	0x463
 1451 0427 0F       		.uleb128 0xf
 1452 0428 61040000 		.4byte	.LASF35
 1453 042c 01       		.byte	0x1
 1454 042d 2A03     		.2byte	0x32a
 1455 042f 83000000 		.4byte	0x83
 1456 0433 FC020000 		.4byte	.LLST18
 1457 0437 0F       		.uleb128 0xf
 1458 0438 8D040000 		.4byte	.LASF50
 1459 043c 01       		.byte	0x1
 1460 043d 2A03     		.2byte	0x32a
 1461 043f 8F000000 		.4byte	0x8f
 1462 0443 28030000 		.4byte	.LLST19
 1463 0447 13       		.uleb128 0x13
 1464 0448 F0010000 		.4byte	.LASF66
 1465 044c 01       		.byte	0x1
 1466 044d 2C03     		.2byte	0x32c
 1467 044f C1000000 		.4byte	0xc1
 1468 0453 0A       		.uleb128 0xa
 1469 0454 10000000 		.4byte	.LVL57
 1470 0458 6D050000 		.4byte	0x56d
 1471 045c 09       		.uleb128 0x9
 1472 045d 01       		.uleb128 0x1
 1473 045e 50       		.byte	0x50
 1474 045f 01       		.uleb128 0x1
 1475 0460 30       		.byte	0x30
 1476 0461 00       		.byte	0
 1477 0462 00       		.byte	0
 1478 0463 11       		.uleb128 0x11
 1479 0464 76030000 		.4byte	.LASF53
 1480 0468 01       		.byte	0x1
 1481 0469 5703     		.2byte	0x357
 1482 046b A7000000 		.4byte	0xa7
 1483 046f 00000000 		.4byte	.LFB19
 1484 0473 48000000 		.4byte	.LFE19-.LFB19
 1485 0477 01       		.uleb128 0x1
 1486 0478 9C       		.byte	0x9c
 1487 0479 BB040000 		.4byte	0x4bb
 1488 047d 0F       		.uleb128 0xf
 1489 047e 61040000 		.4byte	.LASF35
 1490 0482 01       		.byte	0x1
 1491 0483 5703     		.2byte	0x357
 1492 0485 83000000 		.4byte	0x83
 1493 0489 54030000 		.4byte	.LLST20
 1494 048d 0F       		.uleb128 0xf
 1495 048e 8D040000 		.4byte	.LASF50
 1496 0492 01       		.byte	0x1
 1497 0493 5703     		.2byte	0x357
 1498 0495 8F000000 		.4byte	0x8f
 1499 0499 80030000 		.4byte	.LLST21
 1500 049d 12       		.uleb128 0x12
 1501 049e 27020000 		.4byte	.LASF54
 1502 04a2 01       		.byte	0x1
 1503 04a3 5903     		.2byte	0x359
 1504 04a5 A7000000 		.4byte	0xa7
 1505 04a9 01       		.uleb128 0x1
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 43


 1506 04aa 50       		.byte	0x50
 1507 04ab 0A       		.uleb128 0xa
 1508 04ac 10000000 		.4byte	.LVL64
 1509 04b0 6D050000 		.4byte	0x56d
 1510 04b4 09       		.uleb128 0x9
 1511 04b5 01       		.uleb128 0x1
 1512 04b6 50       		.byte	0x50
 1513 04b7 01       		.uleb128 0x1
 1514 04b8 30       		.byte	0x30
 1515 04b9 00       		.byte	0
 1516 04ba 00       		.byte	0
 1517 04bb 14       		.uleb128 0x14
 1518 04bc CB040000 		.4byte	0x4cb
 1519 04c0 CB040000 		.4byte	0x4cb
 1520 04c4 15       		.uleb128 0x15
 1521 04c5 EC000000 		.4byte	0xec
 1522 04c9 00       		.byte	0
 1523 04ca 00       		.byte	0
 1524 04cb 16       		.uleb128 0x16
 1525 04cc 83000000 		.4byte	0x83
 1526 04d0 17       		.uleb128 0x17
 1527 04d1 F7010000 		.4byte	.LASF55
 1528 04d5 01       		.byte	0x1
 1529 04d6 21       		.byte	0x21
 1530 04d7 E0040000 		.4byte	0x4e0
 1531 04db 04       		.byte	0x4
 1532 04dc 02       		.byte	0x2
 1533 04dd 04       		.byte	0x4
 1534 04de 00       		.byte	0
 1535 04df 00       		.byte	0
 1536 04e0 16       		.uleb128 0x16
 1537 04e1 BB040000 		.4byte	0x4bb
 1538 04e5 18       		.uleb128 0x18
 1539 04e6 BA000000 		.4byte	.LASF56
 1540 04ea 01       		.byte	0x1
 1541 04eb 18       		.byte	0x18
 1542 04ec 6B000000 		.4byte	0x6b
 1543 04f0 05       		.uleb128 0x5
 1544 04f1 03       		.byte	0x3
 1545 04f2 00000000 		.4byte	Volt_Regulator_initVar
 1546 04f6 14       		.uleb128 0x14
 1547 04f7 06050000 		.4byte	0x506
 1548 04fb 06050000 		.4byte	0x506
 1549 04ff 15       		.uleb128 0x15
 1550 0500 EC000000 		.4byte	0xec
 1551 0504 00       		.byte	0
 1552 0505 00       		.byte	0
 1553 0506 05       		.uleb128 0x5
 1554 0507 8F000000 		.4byte	0x8f
 1555 050b 18       		.uleb128 0x18
 1556 050c 07000000 		.4byte	.LASF57
 1557 0510 01       		.byte	0x1
 1558 0511 19       		.byte	0x19
 1559 0512 1C050000 		.4byte	0x51c
 1560 0516 05       		.uleb128 0x5
 1561 0517 03       		.byte	0x3
 1562 0518 00000000 		.4byte	Volt_Regulator_offset
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 44


 1563 051c 05       		.uleb128 0x5
 1564 051d F6040000 		.4byte	0x4f6
 1565 0521 14       		.uleb128 0x14
 1566 0522 31050000 		.4byte	0x531
 1567 0526 31050000 		.4byte	0x531
 1568 052a 15       		.uleb128 0x15
 1569 052b EC000000 		.4byte	0xec
 1570 052f 00       		.byte	0
 1571 0530 00       		.byte	0
 1572 0531 05       		.uleb128 0x5
 1573 0532 9B000000 		.4byte	0x9b
 1574 0536 18       		.uleb128 0x18
 1575 0537 A4040000 		.4byte	.LASF58
 1576 053b 01       		.byte	0x1
 1577 053c 1A       		.byte	0x1a
 1578 053d 47050000 		.4byte	0x547
 1579 0541 05       		.uleb128 0x5
 1580 0542 03       		.byte	0x3
 1581 0543 00000000 		.4byte	Volt_Regulator_countsPer10Volt
 1582 0547 05       		.uleb128 0x5
 1583 0548 21050000 		.4byte	0x521
 1584 054c 19       		.uleb128 0x19
 1585 054d 5F030000 		.4byte	.LASF59
 1586 0551 5F030000 		.4byte	.LASF59
 1587 0555 03       		.byte	0x3
 1588 0556 C0       		.byte	0xc0
 1589 0557 19       		.uleb128 0x19
 1590 0558 B7020000 		.4byte	.LASF60
 1591 055c B7020000 		.4byte	.LASF60
 1592 0560 03       		.byte	0x3
 1593 0561 BD       		.byte	0xbd
 1594 0562 19       		.uleb128 0x19
 1595 0563 63010000 		.4byte	.LASF61
 1596 0567 63010000 		.4byte	.LASF61
 1597 056b 03       		.byte	0x3
 1598 056c DA       		.byte	0xda
 1599 056d 19       		.uleb128 0x19
 1600 056e BD030000 		.4byte	.LASF62
 1601 0572 BD030000 		.4byte	.LASF62
 1602 0576 03       		.byte	0x3
 1603 0577 E7       		.byte	0xe7
 1604 0578 00       		.byte	0
 1605              		.section	.debug_abbrev,"",%progbits
 1606              	.Ldebug_abbrev0:
 1607 0000 01       		.uleb128 0x1
 1608 0001 11       		.uleb128 0x11
 1609 0002 01       		.byte	0x1
 1610 0003 25       		.uleb128 0x25
 1611 0004 0E       		.uleb128 0xe
 1612 0005 13       		.uleb128 0x13
 1613 0006 0B       		.uleb128 0xb
 1614 0007 03       		.uleb128 0x3
 1615 0008 0E       		.uleb128 0xe
 1616 0009 1B       		.uleb128 0x1b
 1617 000a 0E       		.uleb128 0xe
 1618 000b 55       		.uleb128 0x55
 1619 000c 17       		.uleb128 0x17
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 45


 1620 000d 11       		.uleb128 0x11
 1621 000e 01       		.uleb128 0x1
 1622 000f 10       		.uleb128 0x10
 1623 0010 17       		.uleb128 0x17
 1624 0011 00       		.byte	0
 1625 0012 00       		.byte	0
 1626 0013 02       		.uleb128 0x2
 1627 0014 24       		.uleb128 0x24
 1628 0015 00       		.byte	0
 1629 0016 0B       		.uleb128 0xb
 1630 0017 0B       		.uleb128 0xb
 1631 0018 3E       		.uleb128 0x3e
 1632 0019 0B       		.uleb128 0xb
 1633 001a 03       		.uleb128 0x3
 1634 001b 0E       		.uleb128 0xe
 1635 001c 00       		.byte	0
 1636 001d 00       		.byte	0
 1637 001e 03       		.uleb128 0x3
 1638 001f 24       		.uleb128 0x24
 1639 0020 00       		.byte	0
 1640 0021 0B       		.uleb128 0xb
 1641 0022 0B       		.uleb128 0xb
 1642 0023 3E       		.uleb128 0x3e
 1643 0024 0B       		.uleb128 0xb
 1644 0025 03       		.uleb128 0x3
 1645 0026 08       		.uleb128 0x8
 1646 0027 00       		.byte	0
 1647 0028 00       		.byte	0
 1648 0029 04       		.uleb128 0x4
 1649 002a 16       		.uleb128 0x16
 1650 002b 00       		.byte	0
 1651 002c 03       		.uleb128 0x3
 1652 002d 0E       		.uleb128 0xe
 1653 002e 3A       		.uleb128 0x3a
 1654 002f 0B       		.uleb128 0xb
 1655 0030 3B       		.uleb128 0x3b
 1656 0031 05       		.uleb128 0x5
 1657 0032 49       		.uleb128 0x49
 1658 0033 13       		.uleb128 0x13
 1659 0034 00       		.byte	0
 1660 0035 00       		.byte	0
 1661 0036 05       		.uleb128 0x5
 1662 0037 35       		.uleb128 0x35
 1663 0038 00       		.byte	0
 1664 0039 49       		.uleb128 0x49
 1665 003a 13       		.uleb128 0x13
 1666 003b 00       		.byte	0
 1667 003c 00       		.byte	0
 1668 003d 06       		.uleb128 0x6
 1669 003e 2E       		.uleb128 0x2e
 1670 003f 01       		.byte	0x1
 1671 0040 3F       		.uleb128 0x3f
 1672 0041 19       		.uleb128 0x19
 1673 0042 03       		.uleb128 0x3
 1674 0043 0E       		.uleb128 0xe
 1675 0044 3A       		.uleb128 0x3a
 1676 0045 0B       		.uleb128 0xb
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 46


 1677 0046 3B       		.uleb128 0x3b
 1678 0047 0B       		.uleb128 0xb
 1679 0048 27       		.uleb128 0x27
 1680 0049 19       		.uleb128 0x19
 1681 004a 11       		.uleb128 0x11
 1682 004b 01       		.uleb128 0x1
 1683 004c 12       		.uleb128 0x12
 1684 004d 06       		.uleb128 0x6
 1685 004e 40       		.uleb128 0x40
 1686 004f 18       		.uleb128 0x18
 1687 0050 9742     		.uleb128 0x2117
 1688 0052 19       		.uleb128 0x19
 1689 0053 01       		.uleb128 0x1
 1690 0054 13       		.uleb128 0x13
 1691 0055 00       		.byte	0
 1692 0056 00       		.byte	0
 1693 0057 07       		.uleb128 0x7
 1694 0058 34       		.uleb128 0x34
 1695 0059 00       		.byte	0
 1696 005a 03       		.uleb128 0x3
 1697 005b 0E       		.uleb128 0xe
 1698 005c 3A       		.uleb128 0x3a
 1699 005d 0B       		.uleb128 0xb
 1700 005e 3B       		.uleb128 0x3b
 1701 005f 0B       		.uleb128 0xb
 1702 0060 49       		.uleb128 0x49
 1703 0061 13       		.uleb128 0x13
 1704 0062 02       		.uleb128 0x2
 1705 0063 17       		.uleb128 0x17
 1706 0064 00       		.byte	0
 1707 0065 00       		.byte	0
 1708 0066 08       		.uleb128 0x8
 1709 0067 898201   		.uleb128 0x4109
 1710 006a 01       		.byte	0x1
 1711 006b 11       		.uleb128 0x11
 1712 006c 01       		.uleb128 0x1
 1713 006d 31       		.uleb128 0x31
 1714 006e 13       		.uleb128 0x13
 1715 006f 01       		.uleb128 0x1
 1716 0070 13       		.uleb128 0x13
 1717 0071 00       		.byte	0
 1718 0072 00       		.byte	0
 1719 0073 09       		.uleb128 0x9
 1720 0074 8A8201   		.uleb128 0x410a
 1721 0077 00       		.byte	0
 1722 0078 02       		.uleb128 0x2
 1723 0079 18       		.uleb128 0x18
 1724 007a 9142     		.uleb128 0x2111
 1725 007c 18       		.uleb128 0x18
 1726 007d 00       		.byte	0
 1727 007e 00       		.byte	0
 1728 007f 0A       		.uleb128 0xa
 1729 0080 898201   		.uleb128 0x4109
 1730 0083 01       		.byte	0x1
 1731 0084 11       		.uleb128 0x11
 1732 0085 01       		.uleb128 0x1
 1733 0086 31       		.uleb128 0x31
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 47


 1734 0087 13       		.uleb128 0x13
 1735 0088 00       		.byte	0
 1736 0089 00       		.byte	0
 1737 008a 0B       		.uleb128 0xb
 1738 008b 2E       		.uleb128 0x2e
 1739 008c 01       		.byte	0x1
 1740 008d 3F       		.uleb128 0x3f
 1741 008e 19       		.uleb128 0x19
 1742 008f 03       		.uleb128 0x3
 1743 0090 0E       		.uleb128 0xe
 1744 0091 3A       		.uleb128 0x3a
 1745 0092 0B       		.uleb128 0xb
 1746 0093 3B       		.uleb128 0x3b
 1747 0094 05       		.uleb128 0x5
 1748 0095 27       		.uleb128 0x27
 1749 0096 19       		.uleb128 0x19
 1750 0097 11       		.uleb128 0x11
 1751 0098 01       		.uleb128 0x1
 1752 0099 12       		.uleb128 0x12
 1753 009a 06       		.uleb128 0x6
 1754 009b 40       		.uleb128 0x40
 1755 009c 18       		.uleb128 0x18
 1756 009d 9742     		.uleb128 0x2117
 1757 009f 19       		.uleb128 0x19
 1758 00a0 01       		.uleb128 0x1
 1759 00a1 13       		.uleb128 0x13
 1760 00a2 00       		.byte	0
 1761 00a3 00       		.byte	0
 1762 00a4 0C       		.uleb128 0xc
 1763 00a5 898201   		.uleb128 0x4109
 1764 00a8 00       		.byte	0
 1765 00a9 11       		.uleb128 0x11
 1766 00aa 01       		.uleb128 0x1
 1767 00ab 31       		.uleb128 0x31
 1768 00ac 13       		.uleb128 0x13
 1769 00ad 00       		.byte	0
 1770 00ae 00       		.byte	0
 1771 00af 0D       		.uleb128 0xd
 1772 00b0 2E       		.uleb128 0x2e
 1773 00b1 00       		.byte	0
 1774 00b2 3F       		.uleb128 0x3f
 1775 00b3 19       		.uleb128 0x19
 1776 00b4 03       		.uleb128 0x3
 1777 00b5 0E       		.uleb128 0xe
 1778 00b6 3A       		.uleb128 0x3a
 1779 00b7 0B       		.uleb128 0xb
 1780 00b8 3B       		.uleb128 0x3b
 1781 00b9 05       		.uleb128 0x5
 1782 00ba 27       		.uleb128 0x27
 1783 00bb 19       		.uleb128 0x19
 1784 00bc 11       		.uleb128 0x11
 1785 00bd 01       		.uleb128 0x1
 1786 00be 12       		.uleb128 0x12
 1787 00bf 06       		.uleb128 0x6
 1788 00c0 40       		.uleb128 0x40
 1789 00c1 18       		.uleb128 0x18
 1790 00c2 9742     		.uleb128 0x2117
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 48


 1791 00c4 19       		.uleb128 0x19
 1792 00c5 00       		.byte	0
 1793 00c6 00       		.byte	0
 1794 00c7 0E       		.uleb128 0xe
 1795 00c8 2E       		.uleb128 0x2e
 1796 00c9 01       		.byte	0x1
 1797 00ca 3F       		.uleb128 0x3f
 1798 00cb 19       		.uleb128 0x19
 1799 00cc 03       		.uleb128 0x3
 1800 00cd 0E       		.uleb128 0xe
 1801 00ce 3A       		.uleb128 0x3a
 1802 00cf 0B       		.uleb128 0xb
 1803 00d0 3B       		.uleb128 0x3b
 1804 00d1 05       		.uleb128 0x5
 1805 00d2 27       		.uleb128 0x27
 1806 00d3 19       		.uleb128 0x19
 1807 00d4 49       		.uleb128 0x49
 1808 00d5 13       		.uleb128 0x13
 1809 00d6 11       		.uleb128 0x11
 1810 00d7 01       		.uleb128 0x1
 1811 00d8 12       		.uleb128 0x12
 1812 00d9 06       		.uleb128 0x6
 1813 00da 40       		.uleb128 0x40
 1814 00db 18       		.uleb128 0x18
 1815 00dc 9742     		.uleb128 0x2117
 1816 00de 19       		.uleb128 0x19
 1817 00df 01       		.uleb128 0x1
 1818 00e0 13       		.uleb128 0x13
 1819 00e1 00       		.byte	0
 1820 00e2 00       		.byte	0
 1821 00e3 0F       		.uleb128 0xf
 1822 00e4 05       		.uleb128 0x5
 1823 00e5 00       		.byte	0
 1824 00e6 03       		.uleb128 0x3
 1825 00e7 0E       		.uleb128 0xe
 1826 00e8 3A       		.uleb128 0x3a
 1827 00e9 0B       		.uleb128 0xb
 1828 00ea 3B       		.uleb128 0x3b
 1829 00eb 05       		.uleb128 0x5
 1830 00ec 49       		.uleb128 0x49
 1831 00ed 13       		.uleb128 0x13
 1832 00ee 02       		.uleb128 0x2
 1833 00ef 17       		.uleb128 0x17
 1834 00f0 00       		.byte	0
 1835 00f1 00       		.byte	0
 1836 00f2 10       		.uleb128 0x10
 1837 00f3 34       		.uleb128 0x34
 1838 00f4 00       		.byte	0
 1839 00f5 03       		.uleb128 0x3
 1840 00f6 0E       		.uleb128 0xe
 1841 00f7 3A       		.uleb128 0x3a
 1842 00f8 0B       		.uleb128 0xb
 1843 00f9 3B       		.uleb128 0x3b
 1844 00fa 05       		.uleb128 0x5
 1845 00fb 49       		.uleb128 0x49
 1846 00fc 13       		.uleb128 0x13
 1847 00fd 02       		.uleb128 0x2
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 49


 1848 00fe 17       		.uleb128 0x17
 1849 00ff 00       		.byte	0
 1850 0100 00       		.byte	0
 1851 0101 11       		.uleb128 0x11
 1852 0102 2E       		.uleb128 0x2e
 1853 0103 01       		.byte	0x1
 1854 0104 3F       		.uleb128 0x3f
 1855 0105 19       		.uleb128 0x19
 1856 0106 03       		.uleb128 0x3
 1857 0107 0E       		.uleb128 0xe
 1858 0108 3A       		.uleb128 0x3a
 1859 0109 0B       		.uleb128 0xb
 1860 010a 3B       		.uleb128 0x3b
 1861 010b 05       		.uleb128 0x5
 1862 010c 27       		.uleb128 0x27
 1863 010d 19       		.uleb128 0x19
 1864 010e 49       		.uleb128 0x49
 1865 010f 13       		.uleb128 0x13
 1866 0110 11       		.uleb128 0x11
 1867 0111 01       		.uleb128 0x1
 1868 0112 12       		.uleb128 0x12
 1869 0113 06       		.uleb128 0x6
 1870 0114 40       		.uleb128 0x40
 1871 0115 18       		.uleb128 0x18
 1872 0116 9642     		.uleb128 0x2116
 1873 0118 19       		.uleb128 0x19
 1874 0119 01       		.uleb128 0x1
 1875 011a 13       		.uleb128 0x13
 1876 011b 00       		.byte	0
 1877 011c 00       		.byte	0
 1878 011d 12       		.uleb128 0x12
 1879 011e 34       		.uleb128 0x34
 1880 011f 00       		.byte	0
 1881 0120 03       		.uleb128 0x3
 1882 0121 0E       		.uleb128 0xe
 1883 0122 3A       		.uleb128 0x3a
 1884 0123 0B       		.uleb128 0xb
 1885 0124 3B       		.uleb128 0x3b
 1886 0125 05       		.uleb128 0x5
 1887 0126 49       		.uleb128 0x49
 1888 0127 13       		.uleb128 0x13
 1889 0128 02       		.uleb128 0x2
 1890 0129 18       		.uleb128 0x18
 1891 012a 00       		.byte	0
 1892 012b 00       		.byte	0
 1893 012c 13       		.uleb128 0x13
 1894 012d 34       		.uleb128 0x34
 1895 012e 00       		.byte	0
 1896 012f 03       		.uleb128 0x3
 1897 0130 0E       		.uleb128 0xe
 1898 0131 3A       		.uleb128 0x3a
 1899 0132 0B       		.uleb128 0xb
 1900 0133 3B       		.uleb128 0x3b
 1901 0134 05       		.uleb128 0x5
 1902 0135 49       		.uleb128 0x49
 1903 0136 13       		.uleb128 0x13
 1904 0137 00       		.byte	0
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 50


 1905 0138 00       		.byte	0
 1906 0139 14       		.uleb128 0x14
 1907 013a 01       		.uleb128 0x1
 1908 013b 01       		.byte	0x1
 1909 013c 49       		.uleb128 0x49
 1910 013d 13       		.uleb128 0x13
 1911 013e 01       		.uleb128 0x1
 1912 013f 13       		.uleb128 0x13
 1913 0140 00       		.byte	0
 1914 0141 00       		.byte	0
 1915 0142 15       		.uleb128 0x15
 1916 0143 21       		.uleb128 0x21
 1917 0144 00       		.byte	0
 1918 0145 49       		.uleb128 0x49
 1919 0146 13       		.uleb128 0x13
 1920 0147 2F       		.uleb128 0x2f
 1921 0148 0B       		.uleb128 0xb
 1922 0149 00       		.byte	0
 1923 014a 00       		.byte	0
 1924 014b 16       		.uleb128 0x16
 1925 014c 26       		.uleb128 0x26
 1926 014d 00       		.byte	0
 1927 014e 49       		.uleb128 0x49
 1928 014f 13       		.uleb128 0x13
 1929 0150 00       		.byte	0
 1930 0151 00       		.byte	0
 1931 0152 17       		.uleb128 0x17
 1932 0153 34       		.uleb128 0x34
 1933 0154 00       		.byte	0
 1934 0155 03       		.uleb128 0x3
 1935 0156 0E       		.uleb128 0xe
 1936 0157 3A       		.uleb128 0x3a
 1937 0158 0B       		.uleb128 0xb
 1938 0159 3B       		.uleb128 0x3b
 1939 015a 0B       		.uleb128 0xb
 1940 015b 49       		.uleb128 0x49
 1941 015c 13       		.uleb128 0x13
 1942 015d 1C       		.uleb128 0x1c
 1943 015e 0A       		.uleb128 0xa
 1944 015f 00       		.byte	0
 1945 0160 00       		.byte	0
 1946 0161 18       		.uleb128 0x18
 1947 0162 34       		.uleb128 0x34
 1948 0163 00       		.byte	0
 1949 0164 03       		.uleb128 0x3
 1950 0165 0E       		.uleb128 0xe
 1951 0166 3A       		.uleb128 0x3a
 1952 0167 0B       		.uleb128 0xb
 1953 0168 3B       		.uleb128 0x3b
 1954 0169 0B       		.uleb128 0xb
 1955 016a 49       		.uleb128 0x49
 1956 016b 13       		.uleb128 0x13
 1957 016c 3F       		.uleb128 0x3f
 1958 016d 19       		.uleb128 0x19
 1959 016e 02       		.uleb128 0x2
 1960 016f 18       		.uleb128 0x18
 1961 0170 00       		.byte	0
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 51


 1962 0171 00       		.byte	0
 1963 0172 19       		.uleb128 0x19
 1964 0173 2E       		.uleb128 0x2e
 1965 0174 00       		.byte	0
 1966 0175 3F       		.uleb128 0x3f
 1967 0176 19       		.uleb128 0x19
 1968 0177 3C       		.uleb128 0x3c
 1969 0178 19       		.uleb128 0x19
 1970 0179 6E       		.uleb128 0x6e
 1971 017a 0E       		.uleb128 0xe
 1972 017b 03       		.uleb128 0x3
 1973 017c 0E       		.uleb128 0xe
 1974 017d 3A       		.uleb128 0x3a
 1975 017e 0B       		.uleb128 0xb
 1976 017f 3B       		.uleb128 0x3b
 1977 0180 0B       		.uleb128 0xb
 1978 0181 00       		.byte	0
 1979 0182 00       		.byte	0
 1980 0183 00       		.byte	0
 1981              		.section	.debug_loc,"",%progbits
 1982              	.Ldebug_loc0:
 1983              	.LLST0:
 1984 0000 72000000 		.4byte	.LVL5
 1985 0004 76000000 		.4byte	.LVL7
 1986 0008 0200     		.2byte	0x2
 1987 000a 30       		.byte	0x30
 1988 000b 9F       		.byte	0x9f
 1989 000c 76000000 		.4byte	.LVL7
 1990 0010 0C010000 		.4byte	.LFE3
 1991 0014 0100     		.2byte	0x1
 1992 0016 53       		.byte	0x53
 1993 0017 00000000 		.4byte	0
 1994 001b 00000000 		.4byte	0
 1995              	.LLST1:
 1996 001f 6A000000 		.4byte	.LVL2
 1997 0023 6E000000 		.4byte	.LVL3
 1998 0027 0100     		.2byte	0x1
 1999 0029 50       		.byte	0x50
 2000 002a 6E000000 		.4byte	.LVL3
 2001 002e 70000000 		.4byte	.LVL4
 2002 0032 0100     		.2byte	0x1
 2003 0034 52       		.byte	0x52
 2004 0035 70000000 		.4byte	.LVL4
 2005 0039 74000000 		.4byte	.LVL6
 2006 003d 0100     		.2byte	0x1
 2007 003f 53       		.byte	0x53
 2008 0040 74000000 		.4byte	.LVL6
 2009 0044 76000000 		.4byte	.LVL7
 2010 0048 0200     		.2byte	0x2
 2011 004a 71       		.byte	0x71
 2012 004b 00       		.sleb128 0
 2013 004c 76000000 		.4byte	.LVL7
 2014 0050 A2000000 		.4byte	.LVL9
 2015 0054 0400     		.2byte	0x4
 2016 0056 0A       		.byte	0xa
 2017 0057 0004     		.2byte	0x400
 2018 0059 9F       		.byte	0x9f
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 52


 2019 005a 00000000 		.4byte	0
 2020 005e 00000000 		.4byte	0
 2021              	.LLST2:
 2022 0062 92000000 		.4byte	.LVL8
 2023 0066 A2000000 		.4byte	.LVL9
 2024 006a 0400     		.2byte	0x4
 2025 006c 0A       		.byte	0xa
 2026 006d 0010     		.2byte	0x1000
 2027 006f 9F       		.byte	0x9f
 2028 0070 00000000 		.4byte	0
 2029 0074 00000000 		.4byte	0
 2030              	.LLST3:
 2031 0078 00000000 		.4byte	.LVL13
 2032 007c 06000000 		.4byte	.LVL15
 2033 0080 0100     		.2byte	0x1
 2034 0082 50       		.byte	0x50
 2035 0083 06000000 		.4byte	.LVL15
 2036 0087 1A000000 		.4byte	.LVL17
 2037 008b 0100     		.2byte	0x1
 2038 008d 52       		.byte	0x52
 2039 008e 1A000000 		.4byte	.LVL17
 2040 0092 20000000 		.4byte	.LVL18
 2041 0096 0400     		.2byte	0x4
 2042 0098 F3       		.byte	0xf3
 2043 0099 01       		.uleb128 0x1
 2044 009a 50       		.byte	0x50
 2045 009b 9F       		.byte	0x9f
 2046 009c 20000000 		.4byte	.LVL18
 2047 00a0 22000000 		.4byte	.LVL19
 2048 00a4 0100     		.2byte	0x1
 2049 00a6 50       		.byte	0x50
 2050 00a7 22000000 		.4byte	.LVL19
 2051 00ab 28000000 		.4byte	.LFE8
 2052 00af 0400     		.2byte	0x4
 2053 00b1 F3       		.byte	0xf3
 2054 00b2 01       		.uleb128 0x1
 2055 00b3 50       		.byte	0x50
 2056 00b4 9F       		.byte	0x9f
 2057 00b5 00000000 		.4byte	0
 2058 00b9 00000000 		.4byte	0
 2059              	.LLST4:
 2060 00bd 02000000 		.4byte	.LVL14
 2061 00c1 06000000 		.4byte	.LVL15
 2062 00c5 0200     		.2byte	0x2
 2063 00c7 30       		.byte	0x30
 2064 00c8 9F       		.byte	0x9f
 2065 00c9 0E000000 		.4byte	.LVL16
 2066 00cd 20000000 		.4byte	.LVL18
 2067 00d1 0100     		.2byte	0x1
 2068 00d3 50       		.byte	0x50
 2069 00d4 20000000 		.4byte	.LVL18
 2070 00d8 22000000 		.4byte	.LVL19
 2071 00dc 0200     		.2byte	0x2
 2072 00de 30       		.byte	0x30
 2073 00df 9F       		.byte	0x9f
 2074 00e0 22000000 		.4byte	.LVL19
 2075 00e4 28000000 		.4byte	.LFE8
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 53


 2076 00e8 0100     		.2byte	0x1
 2077 00ea 50       		.byte	0x50
 2078 00eb 00000000 		.4byte	0
 2079 00ef 00000000 		.4byte	0
 2080              	.LLST5:
 2081 00f3 00000000 		.4byte	.LVL20
 2082 00f7 08000000 		.4byte	.LVL21
 2083 00fb 0100     		.2byte	0x1
 2084 00fd 50       		.byte	0x50
 2085 00fe 08000000 		.4byte	.LVL21
 2086 0102 12000000 		.4byte	.LVL23
 2087 0106 0100     		.2byte	0x1
 2088 0108 54       		.byte	0x54
 2089 0109 12000000 		.4byte	.LVL23
 2090 010d 20000000 		.4byte	.LVL25
 2091 0111 0400     		.2byte	0x4
 2092 0113 F3       		.byte	0xf3
 2093 0114 01       		.uleb128 0x1
 2094 0115 50       		.byte	0x50
 2095 0116 9F       		.byte	0x9f
 2096 0117 20000000 		.4byte	.LVL25
 2097 011b 22000000 		.4byte	.LVL26
 2098 011f 0100     		.2byte	0x1
 2099 0121 54       		.byte	0x54
 2100 0122 22000000 		.4byte	.LVL26
 2101 0126 2C000000 		.4byte	.LFE9
 2102 012a 0400     		.2byte	0x4
 2103 012c F3       		.byte	0xf3
 2104 012d 01       		.uleb128 0x1
 2105 012e 50       		.byte	0x50
 2106 012f 9F       		.byte	0x9f
 2107 0130 00000000 		.4byte	0
 2108 0134 00000000 		.4byte	0
 2109              	.LLST6:
 2110 0138 1E000000 		.4byte	.LVL24
 2111 013c 20000000 		.4byte	.LVL25
 2112 0140 0100     		.2byte	0x1
 2113 0142 50       		.byte	0x50
 2114 0143 22000000 		.4byte	.LVL26
 2115 0147 24000000 		.4byte	.LVL27
 2116 014b 0100     		.2byte	0x1
 2117 014d 50       		.byte	0x50
 2118 014e 00000000 		.4byte	0
 2119 0152 00000000 		.4byte	0
 2120              	.LLST7:
 2121 0156 00000000 		.4byte	.LVL28
 2122 015a 04000000 		.4byte	.LVL29
 2123 015e 0100     		.2byte	0x1
 2124 0160 50       		.byte	0x50
 2125 0161 04000000 		.4byte	.LVL29
 2126 0165 10000000 		.4byte	.LFE10
 2127 0169 0400     		.2byte	0x4
 2128 016b F3       		.byte	0xf3
 2129 016c 01       		.uleb128 0x1
 2130 016d 50       		.byte	0x50
 2131 016e 9F       		.byte	0x9f
 2132 016f 00000000 		.4byte	0
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 54


 2133 0173 00000000 		.4byte	0
 2134              	.LLST8:
 2135 0177 00000000 		.4byte	.LVL30
 2136 017b 0E000000 		.4byte	.LVL31
 2137 017f 0100     		.2byte	0x1
 2138 0181 50       		.byte	0x50
 2139 0182 0E000000 		.4byte	.LVL31
 2140 0186 1C000000 		.4byte	.LFE11
 2141 018a 0400     		.2byte	0x4
 2142 018c F3       		.byte	0xf3
 2143 018d 01       		.uleb128 0x1
 2144 018e 50       		.byte	0x50
 2145 018f 9F       		.byte	0x9f
 2146 0190 00000000 		.4byte	0
 2147 0194 00000000 		.4byte	0
 2148              	.LLST9:
 2149 0198 00000000 		.4byte	.LVL32
 2150 019c 0E000000 		.4byte	.LVL33
 2151 01a0 0100     		.2byte	0x1
 2152 01a2 50       		.byte	0x50
 2153 01a3 0E000000 		.4byte	.LVL33
 2154 01a7 18000000 		.4byte	.LFE12
 2155 01ab 0400     		.2byte	0x4
 2156 01ad F3       		.byte	0xf3
 2157 01ae 01       		.uleb128 0x1
 2158 01af 50       		.byte	0x50
 2159 01b0 9F       		.byte	0x9f
 2160 01b1 00000000 		.4byte	0
 2161 01b5 00000000 		.4byte	0
 2162              	.LLST10:
 2163 01b9 00000000 		.4byte	.LVL34
 2164 01bd 04000000 		.4byte	.LVL35
 2165 01c1 0100     		.2byte	0x1
 2166 01c3 50       		.byte	0x50
 2167 01c4 04000000 		.4byte	.LVL35
 2168 01c8 10000000 		.4byte	.LFE13
 2169 01cc 0400     		.2byte	0x4
 2170 01ce F3       		.byte	0xf3
 2171 01cf 01       		.uleb128 0x1
 2172 01d0 50       		.byte	0x50
 2173 01d1 9F       		.byte	0x9f
 2174 01d2 00000000 		.4byte	0
 2175 01d6 00000000 		.4byte	0
 2176              	.LLST11:
 2177 01da 00000000 		.4byte	.LVL36
 2178 01de 04000000 		.4byte	.LVL37
 2179 01e2 0100     		.2byte	0x1
 2180 01e4 50       		.byte	0x50
 2181 01e5 04000000 		.4byte	.LVL37
 2182 01e9 10000000 		.4byte	.LFE14
 2183 01ed 0400     		.2byte	0x4
 2184 01ef F3       		.byte	0xf3
 2185 01f0 01       		.uleb128 0x1
 2186 01f1 50       		.byte	0x50
 2187 01f2 9F       		.byte	0x9f
 2188 01f3 00000000 		.4byte	0
 2189 01f7 00000000 		.4byte	0
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 55


 2190              	.LLST12:
 2191 01fb 00000000 		.4byte	.LVL38
 2192 01ff 0C000000 		.4byte	.LVL39
 2193 0203 0100     		.2byte	0x1
 2194 0205 50       		.byte	0x50
 2195 0206 0C000000 		.4byte	.LVL39
 2196 020a 12000000 		.4byte	.LVL41
 2197 020e 0100     		.2byte	0x1
 2198 0210 54       		.byte	0x54
 2199 0211 12000000 		.4byte	.LVL41
 2200 0215 1C000000 		.4byte	.LFE15
 2201 0219 0400     		.2byte	0x4
 2202 021b F3       		.byte	0xf3
 2203 021c 01       		.uleb128 0x1
 2204 021d 50       		.byte	0x50
 2205 021e 9F       		.byte	0x9f
 2206 021f 00000000 		.4byte	0
 2207 0223 00000000 		.4byte	0
 2208              	.LLST13:
 2209 0227 00000000 		.4byte	.LVL38
 2210 022b 0F000000 		.4byte	.LVL40-1
 2211 022f 0100     		.2byte	0x1
 2212 0231 51       		.byte	0x51
 2213 0232 0F000000 		.4byte	.LVL40-1
 2214 0236 1C000000 		.4byte	.LFE15
 2215 023a 0400     		.2byte	0x4
 2216 023c F3       		.byte	0xf3
 2217 023d 01       		.uleb128 0x1
 2218 023e 51       		.byte	0x51
 2219 023f 9F       		.byte	0x9f
 2220 0240 00000000 		.4byte	0
 2221 0244 00000000 		.4byte	0
 2222              	.LLST14:
 2223 0248 00000000 		.4byte	.LVL42
 2224 024c 0C000000 		.4byte	.LVL43
 2225 0250 0100     		.2byte	0x1
 2226 0252 50       		.byte	0x50
 2227 0253 0C000000 		.4byte	.LVL43
 2228 0257 12000000 		.4byte	.LVL45
 2229 025b 0100     		.2byte	0x1
 2230 025d 54       		.byte	0x54
 2231 025e 12000000 		.4byte	.LVL45
 2232 0262 1C000000 		.4byte	.LFE16
 2233 0266 0400     		.2byte	0x4
 2234 0268 F3       		.byte	0xf3
 2235 0269 01       		.uleb128 0x1
 2236 026a 50       		.byte	0x50
 2237 026b 9F       		.byte	0x9f
 2238 026c 00000000 		.4byte	0
 2239 0270 00000000 		.4byte	0
 2240              	.LLST15:
 2241 0274 00000000 		.4byte	.LVL42
 2242 0278 0F000000 		.4byte	.LVL44-1
 2243 027c 0100     		.2byte	0x1
 2244 027e 51       		.byte	0x51
 2245 027f 0F000000 		.4byte	.LVL44-1
 2246 0283 16000000 		.4byte	.LVL46
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 56


 2247 0287 0100     		.2byte	0x1
 2248 0289 55       		.byte	0x55
 2249 028a 16000000 		.4byte	.LVL46
 2250 028e 1C000000 		.4byte	.LFE16
 2251 0292 0800     		.2byte	0x8
 2252 0294 F3       		.byte	0xf3
 2253 0295 01       		.uleb128 0x1
 2254 0296 50       		.byte	0x50
 2255 0297 32       		.byte	0x32
 2256 0298 24       		.byte	0x24
 2257 0299 73       		.byte	0x73
 2258 029a 00       		.sleb128 0
 2259 029b 22       		.byte	0x22
 2260 029c 00000000 		.4byte	0
 2261 02a0 00000000 		.4byte	0
 2262              	.LLST16:
 2263 02a4 00000000 		.4byte	.LVL47
 2264 02a8 0C000000 		.4byte	.LVL48
 2265 02ac 0100     		.2byte	0x1
 2266 02ae 50       		.byte	0x50
 2267 02af 0C000000 		.4byte	.LVL48
 2268 02b3 44000000 		.4byte	.LVL51
 2269 02b7 0100     		.2byte	0x1
 2270 02b9 54       		.byte	0x54
 2271 02ba 44000000 		.4byte	.LVL51
 2272 02be 5C000000 		.4byte	.LFE17
 2273 02c2 0400     		.2byte	0x4
 2274 02c4 F3       		.byte	0xf3
 2275 02c5 01       		.uleb128 0x1
 2276 02c6 50       		.byte	0x50
 2277 02c7 9F       		.byte	0x9f
 2278 02c8 00000000 		.4byte	0
 2279 02cc 00000000 		.4byte	0
 2280              	.LLST17:
 2281 02d0 00000000 		.4byte	.LVL47
 2282 02d4 0F000000 		.4byte	.LVL49-1
 2283 02d8 0100     		.2byte	0x1
 2284 02da 51       		.byte	0x51
 2285 02db 0F000000 		.4byte	.LVL49-1
 2286 02df 1C000000 		.4byte	.LVL50
 2287 02e3 0400     		.2byte	0x4
 2288 02e5 F3       		.byte	0xf3
 2289 02e6 01       		.uleb128 0x1
 2290 02e7 51       		.byte	0x51
 2291 02e8 9F       		.byte	0x9f
 2292 02e9 1C000000 		.4byte	.LVL50
 2293 02ed 48000000 		.4byte	.LVL52
 2294 02f1 0100     		.2byte	0x1
 2295 02f3 51       		.byte	0x51
 2296 02f4 00000000 		.4byte	0
 2297 02f8 00000000 		.4byte	0
 2298              	.LLST18:
 2299 02fc 00000000 		.4byte	.LVL55
 2300 0300 0C000000 		.4byte	.LVL56
 2301 0304 0100     		.2byte	0x1
 2302 0306 50       		.byte	0x50
 2303 0307 0C000000 		.4byte	.LVL56
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 57


 2304 030b 28000000 		.4byte	.LVL60
 2305 030f 0100     		.2byte	0x1
 2306 0311 55       		.byte	0x55
 2307 0312 28000000 		.4byte	.LVL60
 2308 0316 40000000 		.4byte	.LFE18
 2309 031a 0400     		.2byte	0x4
 2310 031c F3       		.byte	0xf3
 2311 031d 01       		.uleb128 0x1
 2312 031e 50       		.byte	0x50
 2313 031f 9F       		.byte	0x9f
 2314 0320 00000000 		.4byte	0
 2315 0324 00000000 		.4byte	0
 2316              	.LLST19:
 2317 0328 00000000 		.4byte	.LVL55
 2318 032c 0F000000 		.4byte	.LVL57-1
 2319 0330 0100     		.2byte	0x1
 2320 0332 51       		.byte	0x51
 2321 0333 0F000000 		.4byte	.LVL57-1
 2322 0337 1C000000 		.4byte	.LVL58
 2323 033b 0400     		.2byte	0x4
 2324 033d F3       		.byte	0xf3
 2325 033e 01       		.uleb128 0x1
 2326 033f 51       		.byte	0x51
 2327 0340 9F       		.byte	0x9f
 2328 0341 1C000000 		.4byte	.LVL58
 2329 0345 25000000 		.4byte	.LVL59-1
 2330 0349 0100     		.2byte	0x1
 2331 034b 50       		.byte	0x50
 2332 034c 00000000 		.4byte	0
 2333 0350 00000000 		.4byte	0
 2334              	.LLST20:
 2335 0354 00000000 		.4byte	.LVL62
 2336 0358 0C000000 		.4byte	.LVL63
 2337 035c 0100     		.2byte	0x1
 2338 035e 50       		.byte	0x50
 2339 035f 0C000000 		.4byte	.LVL63
 2340 0363 2A000000 		.4byte	.LVL68
 2341 0367 0100     		.2byte	0x1
 2342 0369 54       		.byte	0x54
 2343 036a 2A000000 		.4byte	.LVL68
 2344 036e 48000000 		.4byte	.LFE19
 2345 0372 0400     		.2byte	0x4
 2346 0374 F3       		.byte	0xf3
 2347 0375 01       		.uleb128 0x1
 2348 0376 50       		.byte	0x50
 2349 0377 9F       		.byte	0x9f
 2350 0378 00000000 		.4byte	0
 2351 037c 00000000 		.4byte	0
 2352              	.LLST21:
 2353 0380 00000000 		.4byte	.LVL62
 2354 0384 0F000000 		.4byte	.LVL64-1
 2355 0388 0100     		.2byte	0x1
 2356 038a 51       		.byte	0x51
 2357 038b 0F000000 		.4byte	.LVL64-1
 2358 038f 1C000000 		.4byte	.LVL65
 2359 0393 0400     		.2byte	0x4
 2360 0395 F3       		.byte	0xf3
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 58


 2361 0396 01       		.uleb128 0x1
 2362 0397 51       		.byte	0x51
 2363 0398 9F       		.byte	0x9f
 2364 0399 1C000000 		.4byte	.LVL65
 2365 039d 1F000000 		.4byte	.LVL66-1
 2366 03a1 0100     		.2byte	0x1
 2367 03a3 50       		.byte	0x50
 2368 03a4 00000000 		.4byte	0
 2369 03a8 00000000 		.4byte	0
 2370              		.section	.debug_aranges,"",%progbits
 2371 0000 A4000000 		.4byte	0xa4
 2372 0004 0200     		.2byte	0x2
 2373 0006 00000000 		.4byte	.Ldebug_info0
 2374 000a 04       		.byte	0x4
 2375 000b 00       		.byte	0
 2376 000c 0000     		.2byte	0
 2377 000e 0000     		.2byte	0
 2378 0010 00000000 		.4byte	.LFB3
 2379 0014 0C010000 		.4byte	.LFE3-.LFB3
 2380 0018 00000000 		.4byte	.LFB4
 2381 001c 30000000 		.4byte	.LFE4-.LFB4
 2382 0020 00000000 		.4byte	.LFB2
 2383 0024 20000000 		.4byte	.LFE2-.LFB2
 2384 0028 00000000 		.4byte	.LFB5
 2385 002c 10000000 		.4byte	.LFE5-.LFB5
 2386 0030 00000000 		.4byte	.LFB6
 2387 0034 14000000 		.4byte	.LFE6-.LFB6
 2388 0038 00000000 		.4byte	.LFB7
 2389 003c 14000000 		.4byte	.LFE7-.LFB7
 2390 0040 00000000 		.4byte	.LFB8
 2391 0044 28000000 		.4byte	.LFE8-.LFB8
 2392 0048 00000000 		.4byte	.LFB9
 2393 004c 2C000000 		.4byte	.LFE9-.LFB9
 2394 0050 00000000 		.4byte	.LFB10
 2395 0054 10000000 		.4byte	.LFE10-.LFB10
 2396 0058 00000000 		.4byte	.LFB11
 2397 005c 1C000000 		.4byte	.LFE11-.LFB11
 2398 0060 00000000 		.4byte	.LFB12
 2399 0064 18000000 		.4byte	.LFE12-.LFB12
 2400 0068 00000000 		.4byte	.LFB13
 2401 006c 10000000 		.4byte	.LFE13-.LFB13
 2402 0070 00000000 		.4byte	.LFB14
 2403 0074 10000000 		.4byte	.LFE14-.LFB14
 2404 0078 00000000 		.4byte	.LFB15
 2405 007c 1C000000 		.4byte	.LFE15-.LFB15
 2406 0080 00000000 		.4byte	.LFB16
 2407 0084 1C000000 		.4byte	.LFE16-.LFB16
 2408 0088 00000000 		.4byte	.LFB17
 2409 008c 5C000000 		.4byte	.LFE17-.LFB17
 2410 0090 00000000 		.4byte	.LFB18
 2411 0094 40000000 		.4byte	.LFE18-.LFB18
 2412 0098 00000000 		.4byte	.LFB19
 2413 009c 48000000 		.4byte	.LFE19-.LFB19
 2414 00a0 00000000 		.4byte	0
 2415 00a4 00000000 		.4byte	0
 2416              		.section	.debug_ranges,"",%progbits
 2417              	.Ldebug_ranges0:
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 59


 2418 0000 00000000 		.4byte	.LFB3
 2419 0004 0C010000 		.4byte	.LFE3
 2420 0008 00000000 		.4byte	.LFB4
 2421 000c 30000000 		.4byte	.LFE4
 2422 0010 00000000 		.4byte	.LFB2
 2423 0014 20000000 		.4byte	.LFE2
 2424 0018 00000000 		.4byte	.LFB5
 2425 001c 10000000 		.4byte	.LFE5
 2426 0020 00000000 		.4byte	.LFB6
 2427 0024 14000000 		.4byte	.LFE6
 2428 0028 00000000 		.4byte	.LFB7
 2429 002c 14000000 		.4byte	.LFE7
 2430 0030 00000000 		.4byte	.LFB8
 2431 0034 28000000 		.4byte	.LFE8
 2432 0038 00000000 		.4byte	.LFB9
 2433 003c 2C000000 		.4byte	.LFE9
 2434 0040 00000000 		.4byte	.LFB10
 2435 0044 10000000 		.4byte	.LFE10
 2436 0048 00000000 		.4byte	.LFB11
 2437 004c 1C000000 		.4byte	.LFE11
 2438 0050 00000000 		.4byte	.LFB12
 2439 0054 18000000 		.4byte	.LFE12
 2440 0058 00000000 		.4byte	.LFB13
 2441 005c 10000000 		.4byte	.LFE13
 2442 0060 00000000 		.4byte	.LFB14
 2443 0064 10000000 		.4byte	.LFE14
 2444 0068 00000000 		.4byte	.LFB15
 2445 006c 1C000000 		.4byte	.LFE15
 2446 0070 00000000 		.4byte	.LFB16
 2447 0074 1C000000 		.4byte	.LFE16
 2448 0078 00000000 		.4byte	.LFB17
 2449 007c 5C000000 		.4byte	.LFE17
 2450 0080 00000000 		.4byte	.LFB18
 2451 0084 40000000 		.4byte	.LFE18
 2452 0088 00000000 		.4byte	.LFB19
 2453 008c 48000000 		.4byte	.LFE19
 2454 0090 00000000 		.4byte	0
 2455 0094 00000000 		.4byte	0
 2456              		.section	.debug_line,"",%progbits
 2457              	.Ldebug_line0:
 2458 0000 7F020000 		.section	.debug_str,"MS",%progbits,1
 2458      02005600 
 2458      00000201 
 2458      FB0E0D00 
 2458      01010101 
 2459              	.LASF10:
 2460 0000 75696E74 		.ascii	"uint16\000"
 2460      313600
 2461              	.LASF57:
 2462 0007 566F6C74 		.ascii	"Volt_Regulator_offset\000"
 2462      5F526567 
 2462      756C6174 
 2462      6F725F6F 
 2462      66667365 
 2463              	.LASF48:
 2464 001d 61646347 		.ascii	"adcGain\000"
 2464      61696E00 
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 60


 2465              	.LASF24:
 2466 0025 636F756E 		.ascii	"counts\000"
 2466      747300
 2467              	.LASF63:
 2468 002c 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2468      43313120 
 2468      352E342E 
 2468      31203230 
 2468      31363036 
 2469 005f 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 2469      20726576 
 2469      6973696F 
 2469      6E203233 
 2469      37373135 
 2470 0092 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 2470      66756E63 
 2470      74696F6E 
 2470      2D736563 
 2470      74696F6E 
 2471              	.LASF56:
 2472 00ba 566F6C74 		.ascii	"Volt_Regulator_initVar\000"
 2472      5F526567 
 2472      756C6174 
 2472      6F725F69 
 2472      6E697456 
 2473              	.LASF7:
 2474 00d1 6C6F6E67 		.ascii	"long long unsigned int\000"
 2474      206C6F6E 
 2474      6720756E 
 2474      7369676E 
 2474      65642069 
 2475              	.LASF27:
 2476 00e8 566F6C74 		.ascii	"Volt_Regulator_Start\000"
 2476      5F526567 
 2476      756C6174 
 2476      6F725F53 
 2476      74617274 
 2477              	.LASF6:
 2478 00fd 6C6F6E67 		.ascii	"long long int\000"
 2478      206C6F6E 
 2478      6720696E 
 2478      7400
 2479              	.LASF0:
 2480 010b 7369676E 		.ascii	"signed char\000"
 2480      65642063 
 2480      68617200 
 2481              	.LASF13:
 2482 0117 696E7433 		.ascii	"int32\000"
 2482      3200
 2483              	.LASF43:
 2484 011d 566F6C74 		.ascii	"Volt_Regulator_SetLimitMask\000"
 2484      5F526567 
 2484      756C6174 
 2484      6F725F53 
 2484      65744C69 
 2485              	.LASF4:
 2486 0139 6C6F6E67 		.ascii	"long int\000"
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 61


 2486      20696E74 
 2486      00
 2487              	.LASF9:
 2488 0142 75696E74 		.ascii	"uint8\000"
 2488      3800
 2489              	.LASF30:
 2490 0148 566F6C74 		.ascii	"Volt_Regulator_StopConvert\000"
 2490      5F526567 
 2490      756C6174 
 2490      6F725F53 
 2490      746F7043 
 2491              	.LASF61:
 2492 0163 43794465 		.ascii	"CyDelayUs\000"
 2492      6C617955 
 2492      7300
 2493              	.LASF16:
 2494 016d 646F7562 		.ascii	"double\000"
 2494      6C6500
 2495              	.LASF11:
 2496 0174 75696E74 		.ascii	"uint32\000"
 2496      333200
 2497              	.LASF38:
 2498 017b 6D61736B 		.ascii	"mask\000"
 2498      00
 2499              	.LASF52:
 2500 0180 566F6C74 		.ascii	"Volt_Regulator_CountsTo_uVolts\000"
 2500      5F526567 
 2500      756C6174 
 2500      6F725F43 
 2500      6F756E74 
 2501              	.LASF28:
 2502 019f 566F6C74 		.ascii	"Volt_Regulator_Stop\000"
 2502      5F526567 
 2502      756C6174 
 2502      6F725F53 
 2502      746F7000 
 2503              	.LASF34:
 2504 01b3 7265744D 		.ascii	"retMode\000"
 2504      6F646500 
 2505              	.LASF8:
 2506 01bb 756E7369 		.ascii	"unsigned int\000"
 2506      676E6564 
 2506      20696E74 
 2506      00
 2507              	.LASF64:
 2508 01c8 47656E65 		.ascii	"Generated_Source\\PSoC4\\Volt_Regulator.c\000"
 2508      72617465 
 2508      645F536F 
 2508      75726365 
 2508      5C50536F 
 2509              	.LASF66:
 2510 01f0 75566F6C 		.ascii	"uVolts\000"
 2510      747300
 2511              	.LASF55:
 2512 01f7 566F6C74 		.ascii	"Volt_Regulator_channelsConfig\000"
 2512      5F526567 
 2512      756C6174 
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 62


 2512      6F725F63 
 2512      68616E6E 
 2513              	.LASF5:
 2514 0215 6C6F6E67 		.ascii	"long unsigned int\000"
 2514      20756E73 
 2514      69676E65 
 2514      6420696E 
 2514      7400
 2515              	.LASF54:
 2516 0227 766F6C74 		.ascii	"volts\000"
 2516      7300
 2517              	.LASF23:
 2518 022d 746D7052 		.ascii	"tmpRegVal\000"
 2518      65675661 
 2518      6C00
 2519              	.LASF47:
 2520 0237 566F6C74 		.ascii	"Volt_Regulator_SetGain\000"
 2520      5F526567 
 2520      756C6174 
 2520      6F725F53 
 2520      65744761 
 2521              	.LASF41:
 2522 024e 566F6C74 		.ascii	"Volt_Regulator_SetHighLimit\000"
 2522      5F526567 
 2522      756C6174 
 2522      6F725F53 
 2522      65744869 
 2523              	.LASF3:
 2524 026a 73686F72 		.ascii	"short unsigned int\000"
 2524      7420756E 
 2524      7369676E 
 2524      65642069 
 2524      6E7400
 2525              	.LASF37:
 2526 027d 566F6C74 		.ascii	"Volt_Regulator_SetChanMask\000"
 2526      5F526567 
 2526      756C6174 
 2526      6F725F53 
 2526      65744368 
 2527              	.LASF49:
 2528 0298 566F6C74 		.ascii	"Volt_Regulator_CountsTo_mVolts\000"
 2528      5F526567 
 2528      756C6174 
 2528      6F725F43 
 2528      6F756E74 
 2529              	.LASF60:
 2530 02b7 4379496E 		.ascii	"CyIntSetVector\000"
 2530      74536574 
 2530      56656374 
 2530      6F7200
 2531              	.LASF39:
 2532 02c6 566F6C74 		.ascii	"Volt_Regulator_SetLowLimit\000"
 2532      5F526567 
 2532      756C6174 
 2532      6F725F53 
 2532      65744C6F 
 2533              	.LASF19:
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 63


 2534 02e1 72656733 		.ascii	"reg32\000"
 2534      3200
 2535              	.LASF14:
 2536 02e7 666C6F61 		.ascii	"float32\000"
 2536      74333200 
 2537              	.LASF21:
 2538 02ef 73697A65 		.ascii	"sizetype\000"
 2538      74797065 
 2538      00
 2539              	.LASF40:
 2540 02f8 6C6F774C 		.ascii	"lowLimit\000"
 2540      696D6974 
 2540      00
 2541              	.LASF26:
 2542 0301 566F6C74 		.ascii	"Volt_Regulator_Enable\000"
 2542      5F526567 
 2542      756C6174 
 2542      6F725F45 
 2542      6E61626C 
 2543              	.LASF20:
 2544 0317 6C6F6E67 		.ascii	"long double\000"
 2544      20646F75 
 2544      626C6500 
 2545              	.LASF44:
 2546 0323 566F6C74 		.ascii	"Volt_Regulator_SetSatMask\000"
 2546      5F526567 
 2546      756C6174 
 2546      6F725F53 
 2546      65745361 
 2547              	.LASF29:
 2548 033d 566F6C74 		.ascii	"Volt_Regulator_StartConvert\000"
 2548      5F526567 
 2548      756C6174 
 2548      6F725F53 
 2548      74617274 
 2549              	.LASF17:
 2550 0359 696E7436 		.ascii	"int64\000"
 2550      3400
 2551              	.LASF59:
 2552 035f 4379496E 		.ascii	"CyIntSetPriority\000"
 2552      74536574 
 2552      5072696F 
 2552      72697479 
 2552      00
 2553              	.LASF15:
 2554 0370 666C6F61 		.ascii	"float\000"
 2554      7400
 2555              	.LASF53:
 2556 0376 566F6C74 		.ascii	"Volt_Regulator_CountsTo_Volts\000"
 2556      5F526567 
 2556      756C6174 
 2556      6F725F43 
 2556      6F756E74 
 2557              	.LASF42:
 2558 0394 68696768 		.ascii	"highLimit\000"
 2558      4C696D69 
 2558      7400
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 64


 2559              	.LASF32:
 2560 039e 566F6C74 		.ascii	"Volt_Regulator_IsEndConversion\000"
 2560      5F526567 
 2560      756C6174 
 2560      6F725F49 
 2560      73456E64 
 2561              	.LASF62:
 2562 03bd 43794861 		.ascii	"CyHalt\000"
 2562      6C7400
 2563              	.LASF1:
 2564 03c4 756E7369 		.ascii	"unsigned char\000"
 2564      676E6564 
 2564      20636861 
 2564      7200
 2565              	.LASF2:
 2566 03d2 73686F72 		.ascii	"short int\000"
 2566      7420696E 
 2566      7400
 2567              	.LASF45:
 2568 03dc 566F6C74 		.ascii	"Volt_Regulator_SetOffset\000"
 2568      5F526567 
 2568      756C6174 
 2568      6F725F53 
 2568      65744F66 
 2569              	.LASF25:
 2570 03f5 566F6C74 		.ascii	"Volt_Regulator_Init\000"
 2570      5F526567 
 2570      756C6174 
 2570      6F725F49 
 2570      6E697400 
 2571              	.LASF51:
 2572 0409 6D566F6C 		.ascii	"mVolts\000"
 2572      747300
 2573              	.LASF65:
 2574 0410 433A5C55 		.ascii	"C:\\Users\\sergio\\Documents\\PSoC Creator\\SD_Devi"
 2574      73657273 
 2574      5C736572 
 2574      67696F5C 
 2574      446F6375 
 2575 043e 63655F45 		.ascii	"ce_EmbeddedCode\\SDBLEE.cydsn\000"
 2575      6D626564 
 2575      64656443 
 2575      6F64655C 
 2575      5344424C 
 2576              	.LASF22:
 2577 045b 63684E75 		.ascii	"chNum\000"
 2577      6D00
 2578              	.LASF35:
 2579 0461 6368616E 		.ascii	"chan\000"
 2579      00
 2580              	.LASF18:
 2581 0466 63686172 		.ascii	"char\000"
 2581      00
 2582              	.LASF33:
 2583 046b 566F6C74 		.ascii	"Volt_Regulator_GetResult16\000"
 2583      5F526567 
 2583      756C6174 
ARM GAS  C:\Users\sergio\AppData\Local\Temp\ccSnAlC9.s 			page 65


 2583      6F725F47 
 2583      65745265 
 2584              	.LASF46:
 2585 0486 6F666673 		.ascii	"offset\000"
 2585      657400
 2586              	.LASF50:
 2587 048d 61646343 		.ascii	"adcCounts\000"
 2587      6F756E74 
 2587      7300
 2588              	.LASF31:
 2589 0497 73746174 		.ascii	"status\000"
 2589      757300
 2590              	.LASF12:
 2591 049e 696E7431 		.ascii	"int16\000"
 2591      3600
 2592              	.LASF58:
 2593 04a4 566F6C74 		.ascii	"Volt_Regulator_countsPer10Volt\000"
 2593      5F526567 
 2593      756C6174 
 2593      6F725F63 
 2593      6F756E74 
 2594              	.LASF36:
 2595 04c3 72657375 		.ascii	"result\000"
 2595      6C7400
 2596              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
