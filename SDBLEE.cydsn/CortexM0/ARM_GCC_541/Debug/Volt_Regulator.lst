ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"Volt_Regulator.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.Volt_Regulator_Init,"ax",%progbits
  20              		.align	2
  21              		.global	Volt_Regulator_Init
  22              		.code	16
  23              		.thumb_func
  24              		.type	Volt_Regulator_Init, %function
  25              	Volt_Regulator_Init:
  26              	.LFB3:
  27              		.file 1 "Generated_Source\\PSoC4\\Volt_Regulator.c"
   1:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/Volt_Regulator.c **** * File Name: Volt_Regulator.c
   3:Generated_Source\PSoC4/Volt_Regulator.c **** * Version 2.50
   4:Generated_Source\PSoC4/Volt_Regulator.c **** *
   5:Generated_Source\PSoC4/Volt_Regulator.c **** * Description:
   6:Generated_Source\PSoC4/Volt_Regulator.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:Generated_Source\PSoC4/Volt_Regulator.c **** *  Approximation ADC Component Component.
   8:Generated_Source\PSoC4/Volt_Regulator.c **** *
   9:Generated_Source\PSoC4/Volt_Regulator.c **** * Note:
  10:Generated_Source\PSoC4/Volt_Regulator.c **** *
  11:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
  12:Generated_Source\PSoC4/Volt_Regulator.c **** * Copyright 2008-2017, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/Volt_Regulator.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/Volt_Regulator.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/Volt_Regulator.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
  17:Generated_Source\PSoC4/Volt_Regulator.c **** 
  18:Generated_Source\PSoC4/Volt_Regulator.c **** #include "Volt_Regulator.h"
  19:Generated_Source\PSoC4/Volt_Regulator.c **** 
  20:Generated_Source\PSoC4/Volt_Regulator.c **** 
  21:Generated_Source\PSoC4/Volt_Regulator.c **** /***************************************
  22:Generated_Source\PSoC4/Volt_Regulator.c **** * Global data allocation
  23:Generated_Source\PSoC4/Volt_Regulator.c **** ***************************************/
  24:Generated_Source\PSoC4/Volt_Regulator.c **** uint8 Volt_Regulator_initVar = 0u;
  25:Generated_Source\PSoC4/Volt_Regulator.c **** volatile int16 Volt_Regulator_offset[Volt_Regulator_TOTAL_CHANNELS_NUM];
  26:Generated_Source\PSoC4/Volt_Regulator.c **** volatile int32 Volt_Regulator_countsPer10Volt[Volt_Regulator_TOTAL_CHANNELS_NUM];   /* Gain compens
  27:Generated_Source\PSoC4/Volt_Regulator.c **** 
  28:Generated_Source\PSoC4/Volt_Regulator.c **** 
  29:Generated_Source\PSoC4/Volt_Regulator.c **** /***************************************
  30:Generated_Source\PSoC4/Volt_Regulator.c **** * Local data allocation
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 2


  31:Generated_Source\PSoC4/Volt_Regulator.c **** ***************************************/
  32:Generated_Source\PSoC4/Volt_Regulator.c **** /* Channels configuration generated by customiser */
  33:Generated_Source\PSoC4/Volt_Regulator.c **** static const uint32 CYCODE Volt_Regulator_channelsConfig[] = { 0x00000002u };
  34:Generated_Source\PSoC4/Volt_Regulator.c **** 
  35:Generated_Source\PSoC4/Volt_Regulator.c **** 
  36:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
  37:Generated_Source\PSoC4/Volt_Regulator.c **** * Function Name: Volt_Regulator_Start
  38:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
  39:Generated_Source\PSoC4/Volt_Regulator.c **** *
  40:Generated_Source\PSoC4/Volt_Regulator.c **** * Summary:
  41:Generated_Source\PSoC4/Volt_Regulator.c **** *  Performs all required initialization for this component
  42:Generated_Source\PSoC4/Volt_Regulator.c **** *  and enables the power. The power will be set to the appropriate
  43:Generated_Source\PSoC4/Volt_Regulator.c **** *  power based on the clock frequency.
  44:Generated_Source\PSoC4/Volt_Regulator.c **** *
  45:Generated_Source\PSoC4/Volt_Regulator.c **** * Parameters:
  46:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
  47:Generated_Source\PSoC4/Volt_Regulator.c **** *
  48:Generated_Source\PSoC4/Volt_Regulator.c **** * Return:
  49:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
  50:Generated_Source\PSoC4/Volt_Regulator.c **** *
  51:Generated_Source\PSoC4/Volt_Regulator.c **** * Global variables:
  52:Generated_Source\PSoC4/Volt_Regulator.c **** *  The Volt_Regulator_initVar variable is used to indicate when/if initial
  53:Generated_Source\PSoC4/Volt_Regulator.c **** *  configuration of this component has happened. The variable is initialized to
  54:Generated_Source\PSoC4/Volt_Regulator.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:Generated_Source\PSoC4/Volt_Regulator.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:Generated_Source\PSoC4/Volt_Regulator.c **** *  Volt_Regulator_Start() routine.
  57:Generated_Source\PSoC4/Volt_Regulator.c **** *  If re-initialization of the component is required the variable should be set
  58:Generated_Source\PSoC4/Volt_Regulator.c **** *  to zero before call of Volt_Regulator_Start() routine, or the user may call
  59:Generated_Source\PSoC4/Volt_Regulator.c **** *  Volt_Regulator_Init() and Volt_Regulator_Enable() as done in the
  60:Generated_Source\PSoC4/Volt_Regulator.c **** *  Volt_Regulator_Start() routine.
  61:Generated_Source\PSoC4/Volt_Regulator.c **** *
  62:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
  63:Generated_Source\PSoC4/Volt_Regulator.c **** void Volt_Regulator_Start(void)
  64:Generated_Source\PSoC4/Volt_Regulator.c **** {
  65:Generated_Source\PSoC4/Volt_Regulator.c ****     /* If not Initialized then initialize all required hardware and software */
  66:Generated_Source\PSoC4/Volt_Regulator.c ****     if(Volt_Regulator_initVar == 0u)
  67:Generated_Source\PSoC4/Volt_Regulator.c ****     {
  68:Generated_Source\PSoC4/Volt_Regulator.c ****         Volt_Regulator_Init();
  69:Generated_Source\PSoC4/Volt_Regulator.c ****         Volt_Regulator_initVar = 1u;
  70:Generated_Source\PSoC4/Volt_Regulator.c ****     }
  71:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_Enable();
  72:Generated_Source\PSoC4/Volt_Regulator.c **** }
  73:Generated_Source\PSoC4/Volt_Regulator.c **** 
  74:Generated_Source\PSoC4/Volt_Regulator.c **** 
  75:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
  76:Generated_Source\PSoC4/Volt_Regulator.c **** * Function Name: Volt_Regulator_Init
  77:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
  78:Generated_Source\PSoC4/Volt_Regulator.c **** *
  79:Generated_Source\PSoC4/Volt_Regulator.c **** * Summary:
  80:Generated_Source\PSoC4/Volt_Regulator.c **** *  Initialize component's parameters to the parameters set by user in the
  81:Generated_Source\PSoC4/Volt_Regulator.c **** *  customizer of the component placed onto schematic. Usually called in
  82:Generated_Source\PSoC4/Volt_Regulator.c **** *  Volt_Regulator_Start().
  83:Generated_Source\PSoC4/Volt_Regulator.c **** *
  84:Generated_Source\PSoC4/Volt_Regulator.c **** * Parameters:
  85:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
  86:Generated_Source\PSoC4/Volt_Regulator.c **** *
  87:Generated_Source\PSoC4/Volt_Regulator.c **** * Return:
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 3


  88:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
  89:Generated_Source\PSoC4/Volt_Regulator.c **** *
  90:Generated_Source\PSoC4/Volt_Regulator.c **** * Global variables:
  91:Generated_Source\PSoC4/Volt_Regulator.c **** *  The Volt_Regulator_offset variable is initialized.
  92:Generated_Source\PSoC4/Volt_Regulator.c **** *
  93:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
  94:Generated_Source\PSoC4/Volt_Regulator.c **** void Volt_Regulator_Init(void)
  95:Generated_Source\PSoC4/Volt_Regulator.c **** {
  28              		.loc 1 95 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 70B5     		push	{r4, r5, r6, lr}
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 4, -16
  35              		.cfi_offset 5, -12
  36              		.cfi_offset 6, -8
  37              		.cfi_offset 14, -4
  96:Generated_Source\PSoC4/Volt_Regulator.c ****     uint32 chNum;
  97:Generated_Source\PSoC4/Volt_Regulator.c ****     uint32 tmpRegVal;
  98:Generated_Source\PSoC4/Volt_Regulator.c ****     int32 counts;
  99:Generated_Source\PSoC4/Volt_Regulator.c **** 
 100:Generated_Source\PSoC4/Volt_Regulator.c ****     #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 1u)
 101:Generated_Source\PSoC4/Volt_Regulator.c ****         static const uint8 CYCODE Volt_Regulator_InputsPlacement[] =
 102:Generated_Source\PSoC4/Volt_Regulator.c ****         {
 103:Generated_Source\PSoC4/Volt_Regulator.c ****             (uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:Generated_Source\PSoC4/Volt_Regulator.c ****             (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_0_PIN
 105:Generated_Source\PSoC4/Volt_Regulator.c ****             ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:Generated_Source\PSoC4/Volt_Regulator.c ****              (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_1_PIN
 107:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 2u)
 108:Generated_Source\PSoC4/Volt_Regulator.c ****                 ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:Generated_Source\PSoC4/Volt_Regulator.c ****                  (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_2_PIN
 110:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 2u */
 111:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 3u)
 112:Generated_Source\PSoC4/Volt_Regulator.c ****                 ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:Generated_Source\PSoC4/Volt_Regulator.c ****                  (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_3_PIN
 114:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 3u */
 115:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 4u)
 116:Generated_Source\PSoC4/Volt_Regulator.c ****                 ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:Generated_Source\PSoC4/Volt_Regulator.c ****                  (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_4_PIN
 118:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 4u */
 119:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 5u)
 120:Generated_Source\PSoC4/Volt_Regulator.c ****                 ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:Generated_Source\PSoC4/Volt_Regulator.c ****                  (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_5_PIN
 122:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 5u */
 123:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 6u)
 124:Generated_Source\PSoC4/Volt_Regulator.c ****                 ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:Generated_Source\PSoC4/Volt_Regulator.c ****                  (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_6_PIN
 126:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 6u */
 127:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 7u)
 128:Generated_Source\PSoC4/Volt_Regulator.c ****                 ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:Generated_Source\PSoC4/Volt_Regulator.c ****                  (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_7_PIN
 130:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 7u */
 131:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 8u)
 132:Generated_Source\PSoC4/Volt_Regulator.c ****                 ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:Generated_Source\PSoC4/Volt_Regulator.c ****                  (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_8_PIN
 134:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 8u */
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 4


 135:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 9u)
 136:Generated_Source\PSoC4/Volt_Regulator.c ****                 ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
 137:Generated_Source\PSoC4/Volt_Regulator.c ****                  (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_9_PIN
 138:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 9u */
 139:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 10u)
 140:Generated_Source\PSoC4/Volt_Regulator.c ****                 ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 141:Generated_Source\PSoC4/Volt_Regulator.c ****                  (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_10_PIN
 142:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 10u */
 143:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 11u)
 144:Generated_Source\PSoC4/Volt_Regulator.c ****                 ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 145:Generated_Source\PSoC4/Volt_Regulator.c ****                  (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_11_PIN
 146:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 11u */
 147:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 12u)
 148:Generated_Source\PSoC4/Volt_Regulator.c ****                 ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 149:Generated_Source\PSoC4/Volt_Regulator.c ****                  (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_12_PIN
 150:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 12u */
 151:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 13u)
 152:Generated_Source\PSoC4/Volt_Regulator.c ****                 ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 153:Generated_Source\PSoC4/Volt_Regulator.c ****                  (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_13_PIN
 154:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 13u */
 155:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 14u)
 156:Generated_Source\PSoC4/Volt_Regulator.c ****                 ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 157:Generated_Source\PSoC4/Volt_Regulator.c ****                  (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_14_PIN
 158:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 14u */
 159:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 15u)
 160:Generated_Source\PSoC4/Volt_Regulator.c ****                 ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 161:Generated_Source\PSoC4/Volt_Regulator.c ****                  (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_15_PIN
 162:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 15u */
 163:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 16u)
 164:Generated_Source\PSoC4/Volt_Regulator.c ****                 ,(uint8)(Volt_Regulator_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 165:Generated_Source\PSoC4/Volt_Regulator.c ****                  (uint8)Volt_Regulator_cy_psoc4_sarmux_8__CH_16_PIN
 166:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 16u */
 167:Generated_Source\PSoC4/Volt_Regulator.c ****         };
 168:Generated_Source\PSoC4/Volt_Regulator.c ****     #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 1u */
 169:Generated_Source\PSoC4/Volt_Regulator.c **** 
 170:Generated_Source\PSoC4/Volt_Regulator.c ****     #if(Volt_Regulator_IRQ_REMOVE == 0u)
 171:Generated_Source\PSoC4/Volt_Regulator.c ****         /* Start and set interrupt vector */
 172:Generated_Source\PSoC4/Volt_Regulator.c ****         CyIntSetPriority(Volt_Regulator_INTC_NUMBER, Volt_Regulator_INTC_PRIOR_NUMBER);
  38              		.loc 1 172 0
  39 0002 0321     		movs	r1, #3
  40 0004 0F20     		movs	r0, #15
  41 0006 FFF7FEFF 		bl	CyIntSetPriority
  42              	.LVL0:
 173:Generated_Source\PSoC4/Volt_Regulator.c ****         (void)CyIntSetVector(Volt_Regulator_INTC_NUMBER, &Volt_Regulator_ISR);
  43              		.loc 1 173 0
  44 000a 2749     		ldr	r1, .L6
  45 000c 0F20     		movs	r0, #15
  46 000e FFF7FEFF 		bl	CyIntSetVector
  47              	.LVL1:
 174:Generated_Source\PSoC4/Volt_Regulator.c ****     #endif   /* End Volt_Regulator_IRQ_REMOVE */
 175:Generated_Source\PSoC4/Volt_Regulator.c **** 
 176:Generated_Source\PSoC4/Volt_Regulator.c ****     /* Init SAR and MUX registers */
 177:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_CHAN_EN_REG = Volt_Regulator_DEFAULT_EN_CHANNELS;
  48              		.loc 1 177 0
  49 0012 0122     		movs	r2, #1
  50 0014 254B     		ldr	r3, .L6+4
  51 0016 1A60     		str	r2, [r3]
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 5


 178:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_CTRL_REG |= Volt_Regulator_DEFAULT_CTRL_REG_CFG | 
 179:Generated_Source\PSoC4/Volt_Regulator.c ****         /* Enable the SAR internal pump when global pump is enabled */
 180:Generated_Source\PSoC4/Volt_Regulator.c ****         (((Volt_Regulator_PUMP_CTRL_REG & Volt_Regulator_PUMP_CTRL_ENABLED) != 0u) ? 
  52              		.loc 1 180 0
  53 0018 254B     		ldr	r3, .L6+8
  54 001a 1B68     		ldr	r3, [r3]
 178:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_CTRL_REG |= Volt_Regulator_DEFAULT_CTRL_REG_CFG | 
  55              		.loc 1 178 0
  56 001c 002B     		cmp	r3, #0
  57 001e 01DA     		bge	.L5
  58 0020 2449     		ldr	r1, .L6+12
  59 0022 00E0     		b	.L2
  60              	.L5:
  61 0024 2449     		ldr	r1, .L6+16
  62              	.L2:
 178:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_CTRL_REG |= Volt_Regulator_DEFAULT_CTRL_REG_CFG | 
  63              		.loc 1 178 0 is_stmt 0 discriminator 4
  64 0026 254A     		ldr	r2, .L6+20
  65 0028 1368     		ldr	r3, [r2]
  66 002a 0B43     		orrs	r3, r1
  67 002c 1360     		str	r3, [r2]
 181:Generated_Source\PSoC4/Volt_Regulator.c ****         Volt_Regulator_BOOSTPUMP_EN : 0u);
 182:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_SAMPLE_CTRL_REG = Volt_Regulator_DEFAULT_SAMPLE_CTRL_REG_CFG;
  68              		.loc 1 182 0 is_stmt 1 discriminator 4
  69 002e 244A     		ldr	r2, .L6+24
  70 0030 244B     		ldr	r3, .L6+28
  71 0032 1A60     		str	r2, [r3]
 183:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_RANGE_THRES_REG = Volt_Regulator_DEFAULT_RANGE_THRES_REG_CFG;
  72              		.loc 1 183 0 discriminator 4
  73 0034 244A     		ldr	r2, .L6+32
  74 0036 254B     		ldr	r3, .L6+36
  75 0038 1A60     		str	r2, [r3]
 184:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_RANGE_COND_REG  = Volt_Regulator_COMPARE_MODE;
  76              		.loc 1 184 0 discriminator 4
  77 003a 0023     		movs	r3, #0
  78 003c 244A     		ldr	r2, .L6+40
  79 003e 1360     		str	r3, [r2]
 185:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_SAMPLE_TIME01_REG = Volt_Regulator_DEFAULT_SAMPLE_TIME01_REG_CFG;
  80              		.loc 1 185 0 discriminator 4
  81 0040 244A     		ldr	r2, .L6+44
  82 0042 2549     		ldr	r1, .L6+48
  83 0044 0A60     		str	r2, [r1]
 186:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_SAMPLE_TIME23_REG = Volt_Regulator_DEFAULT_SAMPLE_TIME23_REG_CFG;
  84              		.loc 1 186 0 discriminator 4
  85 0046 2549     		ldr	r1, .L6+52
  86 0048 0A60     		str	r2, [r1]
 187:Generated_Source\PSoC4/Volt_Regulator.c ****     
 188:Generated_Source\PSoC4/Volt_Regulator.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 189:Generated_Source\PSoC4/Volt_Regulator.c ****     #if(Volt_Regulator_DEFAULT_MUX_SWITCH0 != 0u)
 190:Generated_Source\PSoC4/Volt_Regulator.c ****         Volt_Regulator_MUX_SWITCH0_REG |= Volt_Regulator_DEFAULT_MUX_SWITCH0;
  87              		.loc 1 190 0 discriminator 4
  88 004a 2549     		ldr	r1, .L6+56
  89 004c 0A68     		ldr	r2, [r1]
  90 004e 8020     		movs	r0, #128
  91 0050 4002     		lsls	r0, r0, #9
  92 0052 0243     		orrs	r2, r0
  93 0054 0A60     		str	r2, [r1]
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 6


 191:Generated_Source\PSoC4/Volt_Regulator.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 192:Generated_Source\PSoC4/Volt_Regulator.c ****         #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 1u)
 193:Generated_Source\PSoC4/Volt_Regulator.c ****             Volt_Regulator_MUX_SWITCH_HW_CTRL_REG |= Volt_Regulator_DEFAULT_MUX_SWITCH0;
 194:Generated_Source\PSoC4/Volt_Regulator.c ****         #endif /* Volt_Regulator_TOTAL_CHANNELS_NUM > 1u */
 195:Generated_Source\PSoC4/Volt_Regulator.c ****     #endif /*Volt_Regulator_CHANNELS_MODE !=0 */
 196:Generated_Source\PSoC4/Volt_Regulator.c **** 
 197:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_SATURATE_INTR_MASK_REG = 0u;
  94              		.loc 1 197 0 discriminator 4
  95 0056 234A     		ldr	r2, .L6+60
  96 0058 1360     		str	r3, [r2]
 198:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_RANGE_INTR_MASK_REG = 0u;
  97              		.loc 1 198 0 discriminator 4
  98 005a 234A     		ldr	r2, .L6+64
  99 005c 1360     		str	r3, [r2]
 199:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_INTR_MASK_REG = Volt_Regulator_SAR_INTR_MASK;
 100              		.loc 1 199 0 discriminator 4
 101 005e 0122     		movs	r2, #1
 102 0060 224B     		ldr	r3, .L6+68
 103 0062 1A60     		str	r2, [r3]
 200:Generated_Source\PSoC4/Volt_Regulator.c **** 
 201:Generated_Source\PSoC4/Volt_Regulator.c ****     #if(Volt_Regulator_CY_SAR_IP_VER == Volt_Regulator_CY_SAR_IP_VER0)
 202:Generated_Source\PSoC4/Volt_Regulator.c ****         Volt_Regulator_ANA_TRIM_REG = Volt_Regulator_TRIM_COEF;
 203:Generated_Source\PSoC4/Volt_Regulator.c ****     #endif /* (Volt_Regulator_CY_SAR_IP_VER == Volt_Regulator_CY_SAR_IP_VER0) */
 204:Generated_Source\PSoC4/Volt_Regulator.c **** 
 205:Generated_Source\PSoC4/Volt_Regulator.c ****     /* Read and modify default configuration based on characterization */
 206:Generated_Source\PSoC4/Volt_Regulator.c ****     tmpRegVal = Volt_Regulator_SAR_DFT_CTRL_REG;
 104              		.loc 1 206 0 discriminator 4
 105 0064 224A     		ldr	r2, .L6+72
 106 0066 1168     		ldr	r1, [r2]
 107              	.LVL2:
 108 0068 224B     		ldr	r3, .L6+76
 109 006a 0B40     		ands	r3, r1
 207:Generated_Source\PSoC4/Volt_Regulator.c ****     tmpRegVal &= (uint32)~Volt_Regulator_DCEN;
 208:Generated_Source\PSoC4/Volt_Regulator.c ****     
 209:Generated_Source\PSoC4/Volt_Regulator.c ****     #if(Volt_Regulator_CY_SAR_IP_VER == Volt_Regulator_CY_SAR_IP_VER0)
 210:Generated_Source\PSoC4/Volt_Regulator.c ****         #if(Volt_Regulator_NOMINAL_CLOCK_FREQ > (Volt_Regulator_MAX_FREQUENCY / 2))
 211:Generated_Source\PSoC4/Volt_Regulator.c ****             tmpRegVal |= Volt_Regulator_SEL_CSEL_DFT_CHAR;
 212:Generated_Source\PSoC4/Volt_Regulator.c ****         #else  /* clock speed < 9 Mhz */
 213:Generated_Source\PSoC4/Volt_Regulator.c ****             tmpRegVal |= Volt_Regulator_DLY_INC;
 214:Generated_Source\PSoC4/Volt_Regulator.c ****         #endif /* clock speed > 9 Mhz */
 215:Generated_Source\PSoC4/Volt_Regulator.c ****     #else
 216:Generated_Source\PSoC4/Volt_Regulator.c ****         #if ((Volt_Regulator_DEFAULT_VREF_SEL == Volt_Regulator__INTERNAL1024) || \
 217:Generated_Source\PSoC4/Volt_Regulator.c ****              (Volt_Regulator_DEFAULT_VREF_SEL == Volt_Regulator__INTERNALVREF))
 218:Generated_Source\PSoC4/Volt_Regulator.c ****             tmpRegVal |= Volt_Regulator_DLY_INC;
 219:Generated_Source\PSoC4/Volt_Regulator.c ****         #else
 220:Generated_Source\PSoC4/Volt_Regulator.c ****             tmpRegVal |= Volt_Regulator_DCEN;
 221:Generated_Source\PSoC4/Volt_Regulator.c ****             tmpRegVal &= (uint32)~Volt_Regulator_DLY_INC;
 110              		.loc 1 221 0 discriminator 4
 111 006c 8021     		movs	r1, #128
 112              	.LVL3:
 113 006e 8905     		lsls	r1, r1, #22
 114 0070 0B43     		orrs	r3, r1
 115              	.LVL4:
 222:Generated_Source\PSoC4/Volt_Regulator.c ****         #endif /* ((Volt_Regulator_DEFAULT_VREF_SEL == Volt_Regulator__INTERNAL1024) || \
 223:Generated_Source\PSoC4/Volt_Regulator.c ****                    (Volt_Regulator_DEFAULT_VREF_SEL == Volt_Regulator__INTERNALVREF)) */
 224:Generated_Source\PSoC4/Volt_Regulator.c ****     #endif /* (Volt_Regulator_CY_SAR_IP_VER == Volt_Regulator_CY_SAR_IP_VER0) */
 225:Generated_Source\PSoC4/Volt_Regulator.c ****     
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 7


 226:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_DFT_CTRL_REG = tmpRegVal;
 116              		.loc 1 226 0 discriminator 4
 117 0072 1360     		str	r3, [r2]
 118              	.LVL5:
 227:Generated_Source\PSoC4/Volt_Regulator.c **** 
 228:Generated_Source\PSoC4/Volt_Regulator.c ****     #if(Volt_Regulator_MAX_RESOLUTION != Volt_Regulator_RESOLUTION_12)
 229:Generated_Source\PSoC4/Volt_Regulator.c ****         Volt_Regulator_WOUNDING_REG = Volt_Regulator_ALT_WOUNDING;
 230:Generated_Source\PSoC4/Volt_Regulator.c ****     #endif /* Volt_Regulator_MAX_RESOLUTION != Volt_Regulator_RESOLUTION_12 */
 231:Generated_Source\PSoC4/Volt_Regulator.c **** 
 232:Generated_Source\PSoC4/Volt_Regulator.c ****     for(chNum = 0u; chNum < Volt_Regulator_TOTAL_CHANNELS_NUM; chNum++)
 119              		.loc 1 232 0 discriminator 4
 120 0074 0023     		movs	r3, #0
 121              	.LVL6:
 122 0076 13E0     		b	.L3
 123              	.LVL7:
 124              	.L4:
 233:Generated_Source\PSoC4/Volt_Regulator.c ****     {
 234:Generated_Source\PSoC4/Volt_Regulator.c ****         tmpRegVal = (Volt_Regulator_channelsConfig[chNum] & Volt_Regulator_CHANNEL_CONFIG_MASK);
 235:Generated_Source\PSoC4/Volt_Regulator.c ****         #if(Volt_Regulator_TOTAL_CHANNELS_NUM > 1u)
 236:Generated_Source\PSoC4/Volt_Regulator.c ****             tmpRegVal |= Volt_Regulator_InputsPlacement[chNum];
 237:Generated_Source\PSoC4/Volt_Regulator.c ****         #endif /* End Volt_Regulator_TOTAL_CHANNELS_NUM > 1u */
 238:Generated_Source\PSoC4/Volt_Regulator.c ****         
 239:Generated_Source\PSoC4/Volt_Regulator.c ****         
 240:Generated_Source\PSoC4/Volt_Regulator.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 241:Generated_Source\PSoC4/Volt_Regulator.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 242:Generated_Source\PSoC4/Volt_Regulator.c ****         *  (0) and 8-bit (1) resolution.
 243:Generated_Source\PSoC4/Volt_Regulator.c ****         */
 244:Generated_Source\PSoC4/Volt_Regulator.c ****         #if((Volt_Regulator_MAX_RESOLUTION != Volt_Regulator_RESOLUTION_12) && \
 245:Generated_Source\PSoC4/Volt_Regulator.c ****             (Volt_Regulator_ALT_WOUNDING == Volt_Regulator_WOUNDING_10BIT))
 246:Generated_Source\PSoC4/Volt_Regulator.c ****             tmpRegVal &= (uint32)(~Volt_Regulator_ALT_RESOLUTION_ON);
 247:Generated_Source\PSoC4/Volt_Regulator.c ****         #endif /* Volt_Regulator_MAX_RESOLUTION != Volt_Regulator_RESOLUTION_12 */
 248:Generated_Source\PSoC4/Volt_Regulator.c **** 
 249:Generated_Source\PSoC4/Volt_Regulator.c ****         #if(Volt_Regulator_INJ_CHANNEL_ENABLED)
 250:Generated_Source\PSoC4/Volt_Regulator.c ****         if(chNum < Volt_Regulator_SEQUENCED_CHANNELS_NUM)
 251:Generated_Source\PSoC4/Volt_Regulator.c ****         #endif /* Volt_Regulator_INJ_CHANNEL_ENABLED */
 252:Generated_Source\PSoC4/Volt_Regulator.c ****         {
 253:Generated_Source\PSoC4/Volt_Regulator.c ****             CY_SET_REG32((reg32 *)(Volt_Regulator_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpR
 125              		.loc 1 253 0
 126 0078 9800     		lsls	r0, r3, #2
 127 007a 1F4A     		ldr	r2, .L6+80
 128 007c 8218     		adds	r2, r0, r2
 129 007e 0024     		movs	r4, #0
 130 0080 1460     		str	r4, [r2]
 254:Generated_Source\PSoC4/Volt_Regulator.c **** 
 255:Generated_Source\PSoC4/Volt_Regulator.c ****             if((Volt_Regulator_channelsConfig[chNum] & Volt_Regulator_IS_SATURATE_EN_MASK) != 0u)
 256:Generated_Source\PSoC4/Volt_Regulator.c ****             {
 257:Generated_Source\PSoC4/Volt_Regulator.c ****                 Volt_Regulator_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 258:Generated_Source\PSoC4/Volt_Regulator.c ****             }
 259:Generated_Source\PSoC4/Volt_Regulator.c **** 
 260:Generated_Source\PSoC4/Volt_Regulator.c ****             if((Volt_Regulator_channelsConfig[chNum] & Volt_Regulator_IS_RANGE_CTRL_EN_MASK) != 0u)
 261:Generated_Source\PSoC4/Volt_Regulator.c ****             {
 262:Generated_Source\PSoC4/Volt_Regulator.c ****                 Volt_Regulator_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 131              		.loc 1 262 0
 132 0082 194D     		ldr	r5, .L6+64
 133 0084 2968     		ldr	r1, [r5]
 134 0086 0122     		movs	r2, #1
 135 0088 9A40     		lsls	r2, r2, r3
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 8


 136 008a 1204     		lsls	r2, r2, #16
 137 008c 120C     		lsrs	r2, r2, #16
 138 008e 0A43     		orrs	r2, r1
 139 0090 2A60     		str	r2, [r5]
 140              	.LVL8:
 263:Generated_Source\PSoC4/Volt_Regulator.c ****             }
 264:Generated_Source\PSoC4/Volt_Regulator.c ****         }
 265:Generated_Source\PSoC4/Volt_Regulator.c ****         #if(Volt_Regulator_INJ_CHANNEL_ENABLED)
 266:Generated_Source\PSoC4/Volt_Regulator.c ****             else
 267:Generated_Source\PSoC4/Volt_Regulator.c ****             {
 268:Generated_Source\PSoC4/Volt_Regulator.c ****                 CY_SET_REG32(Volt_Regulator_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | Volt_Regulator_INJ
 269:Generated_Source\PSoC4/Volt_Regulator.c **** 
 270:Generated_Source\PSoC4/Volt_Regulator.c ****                 if((Volt_Regulator_channelsConfig[chNum] & Volt_Regulator_IS_SATURATE_EN_MASK) != 0
 271:Generated_Source\PSoC4/Volt_Regulator.c ****                 {
 272:Generated_Source\PSoC4/Volt_Regulator.c ****                     Volt_Regulator_SAR_INTR_MASK_REG |= Volt_Regulator_INJ_SATURATE_MASK;
 273:Generated_Source\PSoC4/Volt_Regulator.c ****                 }
 274:Generated_Source\PSoC4/Volt_Regulator.c **** 
 275:Generated_Source\PSoC4/Volt_Regulator.c ****                 if((Volt_Regulator_channelsConfig[chNum] & Volt_Regulator_IS_RANGE_CTRL_EN_MASK) !=
 276:Generated_Source\PSoC4/Volt_Regulator.c ****                 {
 277:Generated_Source\PSoC4/Volt_Regulator.c ****                     Volt_Regulator_SAR_INTR_MASK_REG |= Volt_Regulator_INJ_RANGE_MASK;
 278:Generated_Source\PSoC4/Volt_Regulator.c ****                 }
 279:Generated_Source\PSoC4/Volt_Regulator.c ****             }
 280:Generated_Source\PSoC4/Volt_Regulator.c ****         #endif /* Volt_Regulator_INJ_CHANNEL_ENABLED */
 281:Generated_Source\PSoC4/Volt_Regulator.c **** 
 282:Generated_Source\PSoC4/Volt_Regulator.c ****         if((Volt_Regulator_channelsConfig[chNum] & Volt_Regulator_ALT_RESOLUTION_ON) != 0u)
 283:Generated_Source\PSoC4/Volt_Regulator.c ****         {
 284:Generated_Source\PSoC4/Volt_Regulator.c ****                counts = (int32)Volt_Regulator_DEFAULT_MAX_WRK_ALT;
 285:Generated_Source\PSoC4/Volt_Regulator.c ****         }
 286:Generated_Source\PSoC4/Volt_Regulator.c ****         else
 287:Generated_Source\PSoC4/Volt_Regulator.c ****         {
 288:Generated_Source\PSoC4/Volt_Regulator.c ****                counts = (int32)Volt_Regulator_SAR_WRK_MAX_12BIT;
 289:Generated_Source\PSoC4/Volt_Regulator.c ****         }
 290:Generated_Source\PSoC4/Volt_Regulator.c **** 
 291:Generated_Source\PSoC4/Volt_Regulator.c ****         if((Volt_Regulator_channelsConfig[chNum] & Volt_Regulator_DIFFERENTIAL_EN) == 0u)
 292:Generated_Source\PSoC4/Volt_Regulator.c ****         {
 293:Generated_Source\PSoC4/Volt_Regulator.c ****             #if((Volt_Regulator_DEFAULT_SE_RESULT_FORMAT_SEL == Volt_Regulator__FSIGNED) && \
 294:Generated_Source\PSoC4/Volt_Regulator.c ****                 (Volt_Regulator_DEFAULT_NEG_INPUT_SEL == Volt_Regulator__VREF))
 295:Generated_Source\PSoC4/Volt_Regulator.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 296:Generated_Source\PSoC4/Volt_Regulator.c ****                 Volt_Regulator_offset[chNum] = (int16)(counts / -2);
 297:Generated_Source\PSoC4/Volt_Regulator.c ****             #else
 298:Generated_Source\PSoC4/Volt_Regulator.c ****                 Volt_Regulator_offset[chNum] = 0;
 141              		.loc 1 298 0
 142 0092 5900     		lsls	r1, r3, #1
 143 0094 194A     		ldr	r2, .L6+84
 144 0096 8C52     		strh	r4, [r1, r2]
 299:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == Volt_Regulator__FSIGNED */
 300:Generated_Source\PSoC4/Volt_Regulator.c ****         }
 301:Generated_Source\PSoC4/Volt_Regulator.c ****         else    /* Differential channel */
 302:Generated_Source\PSoC4/Volt_Regulator.c ****         {
 303:Generated_Source\PSoC4/Volt_Regulator.c ****             #if(Volt_Regulator_DEFAULT_DIFF_RESULT_FORMAT_SEL == Volt_Regulator__FUNSIGNED)
 304:Generated_Source\PSoC4/Volt_Regulator.c ****                 /* Set offset to the half scale to convert results to signed format */
 305:Generated_Source\PSoC4/Volt_Regulator.c ****                 Volt_Regulator_offset[chNum] = (int16)(counts / 2);
 306:Generated_Source\PSoC4/Volt_Regulator.c ****             #else
 307:Generated_Source\PSoC4/Volt_Regulator.c ****                 Volt_Regulator_offset[chNum] = 0;
 308:Generated_Source\PSoC4/Volt_Regulator.c ****             #endif /* end Volt_Regulator_DEFAULT_DIFF_RESULT_FORMAT_SEL == Volt_Regulator__FUNSIGNE
 309:Generated_Source\PSoC4/Volt_Regulator.c ****         }
 310:Generated_Source\PSoC4/Volt_Regulator.c ****         /* Calculate gain in counts per 10 volts with rounding */
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 9


 311:Generated_Source\PSoC4/Volt_Regulator.c ****         Volt_Regulator_countsPer10Volt[chNum] = (int16)(((counts * Volt_Regulator_10MV_COUNTS) +
 145              		.loc 1 311 0
 146 0098 1949     		ldr	r1, .L6+88
 147 009a 1A4A     		ldr	r2, .L6+92
 148 009c 8150     		str	r1, [r0, r2]
 232:Generated_Source\PSoC4/Volt_Regulator.c ****     {
 149              		.loc 1 232 0
 150 009e 0133     		adds	r3, r3, #1
 151              	.LVL9:
 152              	.L3:
 232:Generated_Source\PSoC4/Volt_Regulator.c ****     {
 153              		.loc 1 232 0 is_stmt 0 discriminator 1
 154 00a0 002B     		cmp	r3, #0
 155 00a2 E9D0     		beq	.L4
 312:Generated_Source\PSoC4/Volt_Regulator.c ****                             Volt_Regulator_DEFAULT_VREF_MV_VALUE) / (Volt_Regulator_DEFAULT_VREF_MV
 313:Generated_Source\PSoC4/Volt_Regulator.c ****     }
 314:Generated_Source\PSoC4/Volt_Regulator.c **** }
 156              		.loc 1 314 0 is_stmt 1
 157              		@ sp needed
 158 00a4 70BD     		pop	{r4, r5, r6, pc}
 159              	.L7:
 160 00a6 C046     		.align	2
 161              	.L6:
 162 00a8 00000000 		.word	Volt_Regulator_ISR
 163 00ac 20003A40 		.word	1077542944
 164 00b0 80033A40 		.word	1077543808
 165 00b4 70021053 		.word	1393558128
 166 00b8 70020053 		.word	1392509552
 167 00bc 00003A40 		.word	1077542912
 168 00c0 84000080 		.word	-2147483516
 169 00c4 04003A40 		.word	1077542916
 170 00c8 0700FF07 		.word	134152199
 171 00cc 18003A40 		.word	1077542936
 172 00d0 1C003A40 		.word	1077542940
 173 00d4 02000200 		.word	131074
 174 00d8 10003A40 		.word	1077542928
 175 00dc 14003A40 		.word	1077542932
 176 00e0 00033A40 		.word	1077543680
 177 00e4 28023A40 		.word	1077543464
 178 00e8 38023A40 		.word	1077543480
 179 00ec 18023A40 		.word	1077543448
 180 00f0 30003A40 		.word	1077542960
 181 00f4 FEFFFFDF 		.word	-536870914
 182 00f8 80003A40 		.word	1077543040
 183 00fc 00000000 		.word	Volt_Regulator_offset
 184 0100 3E180000 		.word	6206
 185 0104 00000000 		.word	Volt_Regulator_countsPer10Volt
 186              		.cfi_endproc
 187              	.LFE3:
 188              		.size	Volt_Regulator_Init, .-Volt_Regulator_Init
 189              		.section	.text.Volt_Regulator_Enable,"ax",%progbits
 190              		.align	2
 191              		.global	Volt_Regulator_Enable
 192              		.code	16
 193              		.thumb_func
 194              		.type	Volt_Regulator_Enable, %function
 195              	Volt_Regulator_Enable:
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 10


 196              	.LFB4:
 315:Generated_Source\PSoC4/Volt_Regulator.c **** 
 316:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
 317:Generated_Source\PSoC4/Volt_Regulator.c **** * Function Name: ADC_SAR_1_Enable
 318:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
 319:Generated_Source\PSoC4/Volt_Regulator.c **** *
 320:Generated_Source\PSoC4/Volt_Regulator.c **** * Summary:
 321:Generated_Source\PSoC4/Volt_Regulator.c **** *  Enables the clock and analog power for SAR ADC.
 322:Generated_Source\PSoC4/Volt_Regulator.c **** *
 323:Generated_Source\PSoC4/Volt_Regulator.c **** * Parameters:
 324:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
 325:Generated_Source\PSoC4/Volt_Regulator.c **** *
 326:Generated_Source\PSoC4/Volt_Regulator.c **** * Return:
 327:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
 328:Generated_Source\PSoC4/Volt_Regulator.c **** *
 329:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
 330:Generated_Source\PSoC4/Volt_Regulator.c **** void Volt_Regulator_Enable(void)
 331:Generated_Source\PSoC4/Volt_Regulator.c **** {
 197              		.loc 1 331 0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 0
 200              		@ frame_needed = 0, uses_anonymous_args = 0
 201 0000 10B5     		push	{r4, lr}
 202              		.cfi_def_cfa_offset 8
 203              		.cfi_offset 4, -8
 204              		.cfi_offset 14, -4
 332:Generated_Source\PSoC4/Volt_Regulator.c ****     if (0u == (Volt_Regulator_SAR_CTRL_REG & Volt_Regulator_ENABLE))
 205              		.loc 1 332 0
 206 0002 094B     		ldr	r3, .L11
 207 0004 1B68     		ldr	r3, [r3]
 208 0006 002B     		cmp	r3, #0
 209 0008 0CDB     		blt	.L8
 210              	.L10:
 333:Generated_Source\PSoC4/Volt_Regulator.c ****     {
 334:Generated_Source\PSoC4/Volt_Regulator.c ****         #if(Volt_Regulator_CY_SAR_IP_VER != Volt_Regulator_CY_SAR_IP_VER0)
 335:Generated_Source\PSoC4/Volt_Regulator.c **** 
 336:Generated_Source\PSoC4/Volt_Regulator.c ****             while (0u != (Volt_Regulator_SAR_STATUS_REG & Volt_Regulator_STATUS_BUSY))
 211              		.loc 1 336 0 discriminator 1
 212 000a 084B     		ldr	r3, .L11+4
 213 000c 1B68     		ldr	r3, [r3]
 214 000e 002B     		cmp	r3, #0
 215 0010 FBDB     		blt	.L10
 337:Generated_Source\PSoC4/Volt_Regulator.c ****             {
 338:Generated_Source\PSoC4/Volt_Regulator.c ****                 /* wait for SAR to go idle to avoid deadlock */
 339:Generated_Source\PSoC4/Volt_Regulator.c ****             }
 340:Generated_Source\PSoC4/Volt_Regulator.c ****         #endif /* (Volt_Regulator_CY_SAR_IP_VER != Volt_Regulator_CY_SAR_IP_VER0) */
 341:Generated_Source\PSoC4/Volt_Regulator.c ****         
 342:Generated_Source\PSoC4/Volt_Regulator.c ****         Volt_Regulator_SAR_CTRL_REG |= Volt_Regulator_ENABLE;
 216              		.loc 1 342 0
 217 0012 054A     		ldr	r2, .L11
 218 0014 1368     		ldr	r3, [r2]
 219 0016 8021     		movs	r1, #128
 220 0018 0906     		lsls	r1, r1, #24
 221 001a 0B43     		orrs	r3, r1
 222 001c 1360     		str	r3, [r2]
 343:Generated_Source\PSoC4/Volt_Regulator.c ****         
 344:Generated_Source\PSoC4/Volt_Regulator.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 11


 345:Generated_Source\PSoC4/Volt_Regulator.c ****         CyDelayUs(Volt_Regulator_10US_DELAY);         
 223              		.loc 1 345 0
 224 001e 0A20     		movs	r0, #10
 225 0020 FFF7FEFF 		bl	CyDelayUs
 226              	.LVL10:
 227              	.L8:
 346:Generated_Source\PSoC4/Volt_Regulator.c ****     }
 347:Generated_Source\PSoC4/Volt_Regulator.c **** }
 228              		.loc 1 347 0
 229              		@ sp needed
 230 0024 10BD     		pop	{r4, pc}
 231              	.L12:
 232 0026 C046     		.align	2
 233              	.L11:
 234 0028 00003A40 		.word	1077542912
 235 002c 08023A40 		.word	1077543432
 236              		.cfi_endproc
 237              	.LFE4:
 238              		.size	Volt_Regulator_Enable, .-Volt_Regulator_Enable
 239              		.section	.text.Volt_Regulator_Start,"ax",%progbits
 240              		.align	2
 241              		.global	Volt_Regulator_Start
 242              		.code	16
 243              		.thumb_func
 244              		.type	Volt_Regulator_Start, %function
 245              	Volt_Regulator_Start:
 246              	.LFB2:
  64:Generated_Source\PSoC4/Volt_Regulator.c ****     /* If not Initialized then initialize all required hardware and software */
 247              		.loc 1 64 0
 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 0
 250              		@ frame_needed = 0, uses_anonymous_args = 0
 251 0000 10B5     		push	{r4, lr}
 252              		.cfi_def_cfa_offset 8
 253              		.cfi_offset 4, -8
 254              		.cfi_offset 14, -4
  66:Generated_Source\PSoC4/Volt_Regulator.c ****     {
 255              		.loc 1 66 0
 256 0002 064B     		ldr	r3, .L15
 257 0004 1B78     		ldrb	r3, [r3]
 258 0006 002B     		cmp	r3, #0
 259 0008 04D1     		bne	.L14
  68:Generated_Source\PSoC4/Volt_Regulator.c ****         Volt_Regulator_initVar = 1u;
 260              		.loc 1 68 0
 261 000a FFF7FEFF 		bl	Volt_Regulator_Init
 262              	.LVL11:
  69:Generated_Source\PSoC4/Volt_Regulator.c ****     }
 263              		.loc 1 69 0
 264 000e 0122     		movs	r2, #1
 265 0010 024B     		ldr	r3, .L15
 266 0012 1A70     		strb	r2, [r3]
 267              	.L14:
  71:Generated_Source\PSoC4/Volt_Regulator.c **** }
 268              		.loc 1 71 0
 269 0014 FFF7FEFF 		bl	Volt_Regulator_Enable
 270              	.LVL12:
  72:Generated_Source\PSoC4/Volt_Regulator.c **** 
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 12


 271              		.loc 1 72 0
 272              		@ sp needed
 273 0018 10BD     		pop	{r4, pc}
 274              	.L16:
 275 001a C046     		.align	2
 276              	.L15:
 277 001c 00000000 		.word	.LANCHOR0
 278              		.cfi_endproc
 279              	.LFE2:
 280              		.size	Volt_Regulator_Start, .-Volt_Regulator_Start
 281              		.section	.text.Volt_Regulator_Stop,"ax",%progbits
 282              		.align	2
 283              		.global	Volt_Regulator_Stop
 284              		.code	16
 285              		.thumb_func
 286              		.type	Volt_Regulator_Stop, %function
 287              	Volt_Regulator_Stop:
 288              	.LFB5:
 348:Generated_Source\PSoC4/Volt_Regulator.c **** 
 349:Generated_Source\PSoC4/Volt_Regulator.c **** 
 350:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
 351:Generated_Source\PSoC4/Volt_Regulator.c **** * Function Name: Volt_Regulator_Stop
 352:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
 353:Generated_Source\PSoC4/Volt_Regulator.c **** *
 354:Generated_Source\PSoC4/Volt_Regulator.c **** * Summary:
 355:Generated_Source\PSoC4/Volt_Regulator.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 356:Generated_Source\PSoC4/Volt_Regulator.c **** *  mode.
 357:Generated_Source\PSoC4/Volt_Regulator.c **** *
 358:Generated_Source\PSoC4/Volt_Regulator.c **** * Parameters:
 359:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
 360:Generated_Source\PSoC4/Volt_Regulator.c **** *
 361:Generated_Source\PSoC4/Volt_Regulator.c **** * Return:
 362:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
 363:Generated_Source\PSoC4/Volt_Regulator.c **** *
 364:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
 365:Generated_Source\PSoC4/Volt_Regulator.c **** void Volt_Regulator_Stop(void)
 366:Generated_Source\PSoC4/Volt_Regulator.c **** {
 289              		.loc 1 366 0
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 0
 292              		@ frame_needed = 0, uses_anonymous_args = 0
 293              		@ link register save eliminated.
 367:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_CTRL_REG &= (uint32)~Volt_Regulator_ENABLE;
 294              		.loc 1 367 0
 295 0000 024A     		ldr	r2, .L18
 296 0002 1368     		ldr	r3, [r2]
 297 0004 5B00     		lsls	r3, r3, #1
 298 0006 5B08     		lsrs	r3, r3, #1
 299 0008 1360     		str	r3, [r2]
 368:Generated_Source\PSoC4/Volt_Regulator.c **** }
 300              		.loc 1 368 0
 301              		@ sp needed
 302 000a 7047     		bx	lr
 303              	.L19:
 304              		.align	2
 305              	.L18:
 306 000c 00003A40 		.word	1077542912
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 13


 307              		.cfi_endproc
 308              	.LFE5:
 309              		.size	Volt_Regulator_Stop, .-Volt_Regulator_Stop
 310              		.section	.text.Volt_Regulator_StartConvert,"ax",%progbits
 311              		.align	2
 312              		.global	Volt_Regulator_StartConvert
 313              		.code	16
 314              		.thumb_func
 315              		.type	Volt_Regulator_StartConvert, %function
 316              	Volt_Regulator_StartConvert:
 317              	.LFB6:
 369:Generated_Source\PSoC4/Volt_Regulator.c **** 
 370:Generated_Source\PSoC4/Volt_Regulator.c **** 
 371:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
 372:Generated_Source\PSoC4/Volt_Regulator.c **** * Function Name: Volt_Regulator_StartConvert
 373:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
 374:Generated_Source\PSoC4/Volt_Regulator.c **** *
 375:Generated_Source\PSoC4/Volt_Regulator.c **** * Summary:
 376:Generated_Source\PSoC4/Volt_Regulator.c **** *  Description:
 377:Generated_Source\PSoC4/Volt_Regulator.c **** *  For free running mode, this API starts the conversion process and it
 378:Generated_Source\PSoC4/Volt_Regulator.c **** *  runs continuously.
 379:Generated_Source\PSoC4/Volt_Regulator.c **** *
 380:Generated_Source\PSoC4/Volt_Regulator.c **** *  In a triggered mode, this routine triggers every conversion by
 381:Generated_Source\PSoC4/Volt_Regulator.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 382:Generated_Source\PSoC4/Volt_Regulator.c **** *  every conversion has to start by this API.
 383:Generated_Source\PSoC4/Volt_Regulator.c **** *
 384:Generated_Source\PSoC4/Volt_Regulator.c **** * Parameters:
 385:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
 386:Generated_Source\PSoC4/Volt_Regulator.c **** *
 387:Generated_Source\PSoC4/Volt_Regulator.c **** * Return:
 388:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
 389:Generated_Source\PSoC4/Volt_Regulator.c **** *
 390:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
 391:Generated_Source\PSoC4/Volt_Regulator.c **** void Volt_Regulator_StartConvert(void)
 392:Generated_Source\PSoC4/Volt_Regulator.c **** {
 318              		.loc 1 392 0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 0
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 322              		@ link register save eliminated.
 393:Generated_Source\PSoC4/Volt_Regulator.c ****     #if(Volt_Regulator_DEFAULT_SAMPLE_MODE_SEL == Volt_Regulator__FREERUNNING)
 394:Generated_Source\PSoC4/Volt_Regulator.c ****         Volt_Regulator_SAR_SAMPLE_CTRL_REG |= Volt_Regulator_CONTINUOUS_EN;
 323              		.loc 1 394 0
 324 0000 034A     		ldr	r2, .L21
 325 0002 1368     		ldr	r3, [r2]
 326 0004 8021     		movs	r1, #128
 327 0006 4902     		lsls	r1, r1, #9
 328 0008 0B43     		orrs	r3, r1
 329 000a 1360     		str	r3, [r2]
 395:Generated_Source\PSoC4/Volt_Regulator.c ****     #else /* Firmware trigger */
 396:Generated_Source\PSoC4/Volt_Regulator.c ****         Volt_Regulator_SAR_START_CTRL_REG = Volt_Regulator_FW_TRIGGER;
 397:Generated_Source\PSoC4/Volt_Regulator.c ****     #endif /* End Volt_Regulator_DEFAULT_SAMPLE_MODE == Volt_Regulator__FREERUNNING */
 398:Generated_Source\PSoC4/Volt_Regulator.c **** 
 399:Generated_Source\PSoC4/Volt_Regulator.c **** }
 330              		.loc 1 399 0
 331              		@ sp needed
 332 000c 7047     		bx	lr
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 14


 333              	.L22:
 334 000e C046     		.align	2
 335              	.L21:
 336 0010 04003A40 		.word	1077542916
 337              		.cfi_endproc
 338              	.LFE6:
 339              		.size	Volt_Regulator_StartConvert, .-Volt_Regulator_StartConvert
 340              		.section	.text.Volt_Regulator_StopConvert,"ax",%progbits
 341              		.align	2
 342              		.global	Volt_Regulator_StopConvert
 343              		.code	16
 344              		.thumb_func
 345              		.type	Volt_Regulator_StopConvert, %function
 346              	Volt_Regulator_StopConvert:
 347              	.LFB7:
 400:Generated_Source\PSoC4/Volt_Regulator.c **** 
 401:Generated_Source\PSoC4/Volt_Regulator.c **** 
 402:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
 403:Generated_Source\PSoC4/Volt_Regulator.c **** * Function Name: Volt_Regulator_StopConvert
 404:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
 405:Generated_Source\PSoC4/Volt_Regulator.c **** *
 406:Generated_Source\PSoC4/Volt_Regulator.c **** * Summary:
 407:Generated_Source\PSoC4/Volt_Regulator.c **** *  Forces the ADC to stop all conversions.
 408:Generated_Source\PSoC4/Volt_Regulator.c **** *
 409:Generated_Source\PSoC4/Volt_Regulator.c **** * Parameters:
 410:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
 411:Generated_Source\PSoC4/Volt_Regulator.c **** *
 412:Generated_Source\PSoC4/Volt_Regulator.c **** * Return:
 413:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
 414:Generated_Source\PSoC4/Volt_Regulator.c **** *
 415:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
 416:Generated_Source\PSoC4/Volt_Regulator.c **** void Volt_Regulator_StopConvert(void)
 417:Generated_Source\PSoC4/Volt_Regulator.c **** {
 348              		.loc 1 417 0
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 0
 351              		@ frame_needed = 0, uses_anonymous_args = 0
 352              		@ link register save eliminated.
 418:Generated_Source\PSoC4/Volt_Regulator.c ****     #if(Volt_Regulator_DEFAULT_SAMPLE_MODE_SEL == Volt_Regulator__FREERUNNING)
 419:Generated_Source\PSoC4/Volt_Regulator.c ****         Volt_Regulator_SAR_SAMPLE_CTRL_REG &= (uint32)(~Volt_Regulator_CONTINUOUS_EN);
 353              		.loc 1 419 0
 354 0000 024A     		ldr	r2, .L24
 355 0002 1168     		ldr	r1, [r2]
 356 0004 024B     		ldr	r3, .L24+4
 357 0006 0B40     		ands	r3, r1
 358 0008 1360     		str	r3, [r2]
 420:Generated_Source\PSoC4/Volt_Regulator.c ****     #endif /* Volt_Regulator_DEFAULT_SAMPLE_MODE == Volt_Regulator__FREERUNNING */
 421:Generated_Source\PSoC4/Volt_Regulator.c **** }
 359              		.loc 1 421 0
 360              		@ sp needed
 361 000a 7047     		bx	lr
 362              	.L25:
 363              		.align	2
 364              	.L24:
 365 000c 04003A40 		.word	1077542916
 366 0010 FFFFFEFF 		.word	-65537
 367              		.cfi_endproc
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 15


 368              	.LFE7:
 369              		.size	Volt_Regulator_StopConvert, .-Volt_Regulator_StopConvert
 370              		.section	.text.Volt_Regulator_IsEndConversion,"ax",%progbits
 371              		.align	2
 372              		.global	Volt_Regulator_IsEndConversion
 373              		.code	16
 374              		.thumb_func
 375              		.type	Volt_Regulator_IsEndConversion, %function
 376              	Volt_Regulator_IsEndConversion:
 377              	.LFB8:
 422:Generated_Source\PSoC4/Volt_Regulator.c **** 
 423:Generated_Source\PSoC4/Volt_Regulator.c **** 
 424:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
 425:Generated_Source\PSoC4/Volt_Regulator.c **** * Function Name: Volt_Regulator_IsEndConversion
 426:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
 427:Generated_Source\PSoC4/Volt_Regulator.c **** *
 428:Generated_Source\PSoC4/Volt_Regulator.c **** * Summary:
 429:Generated_Source\PSoC4/Volt_Regulator.c **** *  Description: Checks for ADC end of conversion for the case one
 430:Generated_Source\PSoC4/Volt_Regulator.c **** *  channel and end of scan for the case of multiple channels. It acts
 431:Generated_Source\PSoC4/Volt_Regulator.c **** *  as a software version of the EOC. This function provides the
 432:Generated_Source\PSoC4/Volt_Regulator.c **** *  programmer with two options. In one mode this function
 433:Generated_Source\PSoC4/Volt_Regulator.c **** *  immediately returns with the conversion status. In the other mode,
 434:Generated_Source\PSoC4/Volt_Regulator.c **** *  the function does not return (blocking) until the conversion has
 435:Generated_Source\PSoC4/Volt_Regulator.c **** *  completed.
 436:Generated_Source\PSoC4/Volt_Regulator.c **** *
 437:Generated_Source\PSoC4/Volt_Regulator.c **** * Parameters:
 438:Generated_Source\PSoC4/Volt_Regulator.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 439:Generated_Source\PSoC4/Volt_Regulator.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 440:Generated_Source\PSoC4/Volt_Regulator.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 441:Generated_Source\PSoC4/Volt_Regulator.c **** *                              for injection channel
 442:Generated_Source\PSoC4/Volt_Regulator.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 443:Generated_Source\PSoC4/Volt_Regulator.c **** *                              channel conversion
 444:Generated_Source\PSoC4/Volt_Regulator.c **** *
 445:Generated_Source\PSoC4/Volt_Regulator.c **** * Return:
 446:Generated_Source\PSoC4/Volt_Regulator.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 447:Generated_Source\PSoC4/Volt_Regulator.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 448:Generated_Source\PSoC4/Volt_Regulator.c **** *
 449:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
 450:Generated_Source\PSoC4/Volt_Regulator.c **** uint32 Volt_Regulator_IsEndConversion(uint32 retMode)
 451:Generated_Source\PSoC4/Volt_Regulator.c **** {
 378              		.loc 1 451 0
 379              		.cfi_startproc
 380              		@ args = 0, pretend = 0, frame = 0
 381              		@ frame_needed = 0, uses_anonymous_args = 0
 382              		@ link register save eliminated.
 383              	.LVL13:
 384 0000 0200     		movs	r2, r0
 385              	.LVL14:
 452:Generated_Source\PSoC4/Volt_Regulator.c ****     uint32 status = 0u;
 453:Generated_Source\PSoC4/Volt_Regulator.c **** 
 454:Generated_Source\PSoC4/Volt_Regulator.c ****     if((retMode & (Volt_Regulator_RETURN_STATUS | Volt_Regulator_WAIT_FOR_RESULT)) != 0u)
 386              		.loc 1 454 0
 387 0002 8307     		lsls	r3, r0, #30
 388 0004 0CD0     		beq	.L30
 389              	.LVL15:
 390              	.L29:
 455:Generated_Source\PSoC4/Volt_Regulator.c ****     {
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 16


 456:Generated_Source\PSoC4/Volt_Regulator.c ****         do
 457:Generated_Source\PSoC4/Volt_Regulator.c ****         {
 458:Generated_Source\PSoC4/Volt_Regulator.c ****             status = Volt_Regulator_SAR_INTR_REG & Volt_Regulator_EOS_MASK;
 391              		.loc 1 458 0 discriminator 2
 392 0006 074B     		ldr	r3, .L31
 393 0008 1B68     		ldr	r3, [r3]
 394 000a 0120     		movs	r0, #1
 395 000c 1840     		ands	r0, r3
 396              	.LVL16:
 459:Generated_Source\PSoC4/Volt_Regulator.c ****         }while((status == 0u) && ((retMode & Volt_Regulator_WAIT_FOR_RESULT) != 0u));
 397              		.loc 1 459 0 discriminator 2
 398 000e 01D1     		bne	.L28
 399              		.loc 1 459 0 is_stmt 0 discriminator 1
 400 0010 9307     		lsls	r3, r2, #30
 401 0012 F8D4     		bmi	.L29
 402              	.L28:
 460:Generated_Source\PSoC4/Volt_Regulator.c **** 
 461:Generated_Source\PSoC4/Volt_Regulator.c ****         if(status != 0u)
 403              		.loc 1 461 0 is_stmt 1
 404 0014 0028     		cmp	r0, #0
 405 0016 04D0     		beq	.L27
 462:Generated_Source\PSoC4/Volt_Regulator.c ****         {
 463:Generated_Source\PSoC4/Volt_Regulator.c ****             /* Clear EOS bit */
 464:Generated_Source\PSoC4/Volt_Regulator.c ****             Volt_Regulator_SAR_INTR_REG = Volt_Regulator_EOS_MASK;
 406              		.loc 1 464 0
 407 0018 0122     		movs	r2, #1
 408              	.LVL17:
 409 001a 024B     		ldr	r3, .L31
 410 001c 1A60     		str	r2, [r3]
 411 001e 00E0     		b	.L27
 412              	.LVL18:
 413              	.L30:
 452:Generated_Source\PSoC4/Volt_Regulator.c **** 
 414              		.loc 1 452 0
 415 0020 0020     		movs	r0, #0
 416              	.LVL19:
 417              	.L27:
 465:Generated_Source\PSoC4/Volt_Regulator.c ****         }
 466:Generated_Source\PSoC4/Volt_Regulator.c ****     }
 467:Generated_Source\PSoC4/Volt_Regulator.c **** 
 468:Generated_Source\PSoC4/Volt_Regulator.c ****     #if(Volt_Regulator_INJ_CHANNEL_ENABLED)
 469:Generated_Source\PSoC4/Volt_Regulator.c ****         if((retMode & (Volt_Regulator_RETURN_STATUS_INJ | Volt_Regulator_WAIT_FOR_RESULT_INJ)) != 0
 470:Generated_Source\PSoC4/Volt_Regulator.c ****         {
 471:Generated_Source\PSoC4/Volt_Regulator.c ****             do
 472:Generated_Source\PSoC4/Volt_Regulator.c ****             {
 473:Generated_Source\PSoC4/Volt_Regulator.c ****                 status |= Volt_Regulator_SAR_INTR_REG & Volt_Regulator_INJ_EOC_MASK;
 474:Generated_Source\PSoC4/Volt_Regulator.c ****             }while(((status & Volt_Regulator_INJ_EOC_MASK) == 0u) &&
 475:Generated_Source\PSoC4/Volt_Regulator.c ****                    ((retMode & Volt_Regulator_WAIT_FOR_RESULT_INJ) != 0u));
 476:Generated_Source\PSoC4/Volt_Regulator.c **** 
 477:Generated_Source\PSoC4/Volt_Regulator.c ****             if((status & Volt_Regulator_INJ_EOC_MASK) != 0u)
 478:Generated_Source\PSoC4/Volt_Regulator.c ****             {
 479:Generated_Source\PSoC4/Volt_Regulator.c ****                 /* Clear Injection EOS bit */
 480:Generated_Source\PSoC4/Volt_Regulator.c ****                 Volt_Regulator_SAR_INTR_REG = Volt_Regulator_INJ_EOC_MASK;
 481:Generated_Source\PSoC4/Volt_Regulator.c ****             }
 482:Generated_Source\PSoC4/Volt_Regulator.c ****         }
 483:Generated_Source\PSoC4/Volt_Regulator.c ****     #endif /* Volt_Regulator_INJ_CHANNEL_ENABLED */
 484:Generated_Source\PSoC4/Volt_Regulator.c **** 
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 17


 485:Generated_Source\PSoC4/Volt_Regulator.c ****     return (status);
 486:Generated_Source\PSoC4/Volt_Regulator.c **** }
 418              		.loc 1 486 0
 419              		@ sp needed
 420 0022 7047     		bx	lr
 421              	.L32:
 422              		.align	2
 423              	.L31:
 424 0024 10023A40 		.word	1077543440
 425              		.cfi_endproc
 426              	.LFE8:
 427              		.size	Volt_Regulator_IsEndConversion, .-Volt_Regulator_IsEndConversion
 428              		.section	.text.Volt_Regulator_GetResult16,"ax",%progbits
 429              		.align	2
 430              		.global	Volt_Regulator_GetResult16
 431              		.code	16
 432              		.thumb_func
 433              		.type	Volt_Regulator_GetResult16, %function
 434              	Volt_Regulator_GetResult16:
 435              	.LFB9:
 487:Generated_Source\PSoC4/Volt_Regulator.c **** 
 488:Generated_Source\PSoC4/Volt_Regulator.c **** 
 489:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
 490:Generated_Source\PSoC4/Volt_Regulator.c **** * Function Name: Volt_Regulator_GetResult16
 491:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
 492:Generated_Source\PSoC4/Volt_Regulator.c **** *
 493:Generated_Source\PSoC4/Volt_Regulator.c **** * Summary:
 494:Generated_Source\PSoC4/Volt_Regulator.c **** *  Gets the data available in the SAR DATA register.
 495:Generated_Source\PSoC4/Volt_Regulator.c **** *
 496:Generated_Source\PSoC4/Volt_Regulator.c **** * Parameters:
 497:Generated_Source\PSoC4/Volt_Regulator.c **** *  chan: The ADC channel in which to return the result. The first channel
 498:Generated_Source\PSoC4/Volt_Regulator.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 499:Generated_Source\PSoC4/Volt_Regulator.c **** *
 500:Generated_Source\PSoC4/Volt_Regulator.c **** * Return:
 501:Generated_Source\PSoC4/Volt_Regulator.c **** *  Returns converted data as a signed 16-bit integer
 502:Generated_Source\PSoC4/Volt_Regulator.c **** *
 503:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
 504:Generated_Source\PSoC4/Volt_Regulator.c **** int16 Volt_Regulator_GetResult16(uint32 chan)
 505:Generated_Source\PSoC4/Volt_Regulator.c **** {
 436              		.loc 1 505 0
 437              		.cfi_startproc
 438              		@ args = 0, pretend = 0, frame = 0
 439              		@ frame_needed = 0, uses_anonymous_args = 0
 440              	.LVL20:
 441 0000 10B5     		push	{r4, lr}
 442              		.cfi_def_cfa_offset 8
 443              		.cfi_offset 4, -8
 444              		.cfi_offset 14, -4
 445 0002 041E     		subs	r4, r0, #0
 506:Generated_Source\PSoC4/Volt_Regulator.c ****     uint32 result;
 507:Generated_Source\PSoC4/Volt_Regulator.c **** 
 508:Generated_Source\PSoC4/Volt_Regulator.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 509:Generated_Source\PSoC4/Volt_Regulator.c ****     CYASSERT(chan < Volt_Regulator_TOTAL_CHANNELS_NUM);
 446              		.loc 1 509 0
 447 0004 02D0     		beq	.L34
 448              		.loc 1 509 0 is_stmt 0 discriminator 1
 449 0006 0020     		movs	r0, #0
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 18


 450              	.LVL21:
 451 0008 FFF7FEFF 		bl	CyHalt
 452              	.LVL22:
 453              	.L34:
 510:Generated_Source\PSoC4/Volt_Regulator.c **** 
 511:Generated_Source\PSoC4/Volt_Regulator.c ****     if(chan < Volt_Regulator_SEQUENCED_CHANNELS_NUM)
 454              		.loc 1 511 0 is_stmt 1
 455 000c 002C     		cmp	r4, #0
 456 000e 07D1     		bne	.L36
 512:Generated_Source\PSoC4/Volt_Regulator.c ****     {
 513:Generated_Source\PSoC4/Volt_Regulator.c ****         result = CY_GET_REG32((reg32 *)(Volt_Regulator_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u)))
 457              		.loc 1 513 0
 458 0010 A400     		lsls	r4, r4, #2
 459              	.LVL23:
 460 0012 054B     		ldr	r3, .L37
 461 0014 9C46     		mov	ip, r3
 462 0016 6444     		add	r4, r4, ip
 463 0018 2068     		ldr	r0, [r4]
 464 001a 0004     		lsls	r0, r0, #16
 465 001c 000C     		lsrs	r0, r0, #16
 466              	.LVL24:
 467 001e 00E0     		b	.L35
 468              	.LVL25:
 469              	.L36:
 514:Generated_Source\PSoC4/Volt_Regulator.c ****                 Volt_Regulator_RESULT_MASK;
 515:Generated_Source\PSoC4/Volt_Regulator.c ****     }
 516:Generated_Source\PSoC4/Volt_Regulator.c ****     else
 517:Generated_Source\PSoC4/Volt_Regulator.c ****     {
 518:Generated_Source\PSoC4/Volt_Regulator.c ****         #if(Volt_Regulator_INJ_CHANNEL_ENABLED)
 519:Generated_Source\PSoC4/Volt_Regulator.c ****             result = Volt_Regulator_SAR_INJ_RESULT_REG & Volt_Regulator_RESULT_MASK;
 520:Generated_Source\PSoC4/Volt_Regulator.c ****         #else
 521:Generated_Source\PSoC4/Volt_Regulator.c ****             result = 0u;
 470              		.loc 1 521 0
 471 0020 0020     		movs	r0, #0
 472              	.LVL26:
 473              	.L35:
 522:Generated_Source\PSoC4/Volt_Regulator.c ****         #endif /* Volt_Regulator_INJ_CHANNEL_ENABLED */
 523:Generated_Source\PSoC4/Volt_Regulator.c ****     }
 524:Generated_Source\PSoC4/Volt_Regulator.c **** 
 525:Generated_Source\PSoC4/Volt_Regulator.c ****     return ( (int16)result );
 474              		.loc 1 525 0
 475 0022 00B2     		sxth	r0, r0
 476              	.LVL27:
 526:Generated_Source\PSoC4/Volt_Regulator.c **** }
 477              		.loc 1 526 0
 478              		@ sp needed
 479 0024 10BD     		pop	{r4, pc}
 480              	.L38:
 481 0026 C046     		.align	2
 482              	.L37:
 483 0028 80013A40 		.word	1077543296
 484              		.cfi_endproc
 485              	.LFE9:
 486              		.size	Volt_Regulator_GetResult16, .-Volt_Regulator_GetResult16
 487              		.section	.text.Volt_Regulator_SetChanMask,"ax",%progbits
 488              		.align	2
 489              		.global	Volt_Regulator_SetChanMask
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 19


 490              		.code	16
 491              		.thumb_func
 492              		.type	Volt_Regulator_SetChanMask, %function
 493              	Volt_Regulator_SetChanMask:
 494              	.LFB10:
 527:Generated_Source\PSoC4/Volt_Regulator.c **** 
 528:Generated_Source\PSoC4/Volt_Regulator.c **** 
 529:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
 530:Generated_Source\PSoC4/Volt_Regulator.c **** * Function Name: Volt_Regulator_SetChanMask
 531:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
 532:Generated_Source\PSoC4/Volt_Regulator.c **** *
 533:Generated_Source\PSoC4/Volt_Regulator.c **** * Summary:
 534:Generated_Source\PSoC4/Volt_Regulator.c **** *  Sets the channel enable mask.
 535:Generated_Source\PSoC4/Volt_Regulator.c **** *
 536:Generated_Source\PSoC4/Volt_Regulator.c **** * Parameters:
 537:Generated_Source\PSoC4/Volt_Regulator.c **** *  mask: Sets which channels that will be
 538:Generated_Source\PSoC4/Volt_Regulator.c **** *  scanned. Setting bits for channels that do not exist will have no
 539:Generated_Source\PSoC4/Volt_Regulator.c **** *  effect. For example, if only 6 channels were enabled, setting a
 540:Generated_Source\PSoC4/Volt_Regulator.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 541:Generated_Source\PSoC4/Volt_Regulator.c **** *  This API will not enable the injection channel.
 542:Generated_Source\PSoC4/Volt_Regulator.c **** *  Examples: If the component is setup to sequence through 8
 543:Generated_Source\PSoC4/Volt_Regulator.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 544:Generated_Source\PSoC4/Volt_Regulator.c **** *
 545:Generated_Source\PSoC4/Volt_Regulator.c **** * Return:
 546:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
 547:Generated_Source\PSoC4/Volt_Regulator.c **** *
 548:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
 549:Generated_Source\PSoC4/Volt_Regulator.c **** void Volt_Regulator_SetChanMask(uint32 mask)
 550:Generated_Source\PSoC4/Volt_Regulator.c **** {
 495              		.loc 1 550 0
 496              		.cfi_startproc
 497              		@ args = 0, pretend = 0, frame = 0
 498              		@ frame_needed = 0, uses_anonymous_args = 0
 499              		@ link register save eliminated.
 500              	.LVL28:
 551:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_CHAN_EN_REG = mask & Volt_Regulator_MAX_CHANNELS_EN_MASK;
 501              		.loc 1 551 0
 502 0000 0123     		movs	r3, #1
 503 0002 1840     		ands	r0, r3
 504              	.LVL29:
 505 0004 014B     		ldr	r3, .L40
 506 0006 1860     		str	r0, [r3]
 552:Generated_Source\PSoC4/Volt_Regulator.c **** }
 507              		.loc 1 552 0
 508              		@ sp needed
 509 0008 7047     		bx	lr
 510              	.L41:
 511 000a C046     		.align	2
 512              	.L40:
 513 000c 20003A40 		.word	1077542944
 514              		.cfi_endproc
 515              	.LFE10:
 516              		.size	Volt_Regulator_SetChanMask, .-Volt_Regulator_SetChanMask
 517              		.section	.text.Volt_Regulator_SetLowLimit,"ax",%progbits
 518              		.align	2
 519              		.global	Volt_Regulator_SetLowLimit
 520              		.code	16
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 20


 521              		.thumb_func
 522              		.type	Volt_Regulator_SetLowLimit, %function
 523              	Volt_Regulator_SetLowLimit:
 524              	.LFB11:
 553:Generated_Source\PSoC4/Volt_Regulator.c **** 
 554:Generated_Source\PSoC4/Volt_Regulator.c **** #if(Volt_Regulator_INJ_CHANNEL_ENABLED)
 555:Generated_Source\PSoC4/Volt_Regulator.c **** 
 556:Generated_Source\PSoC4/Volt_Regulator.c **** 
 557:Generated_Source\PSoC4/Volt_Regulator.c ****     /*******************************************************************************
 558:Generated_Source\PSoC4/Volt_Regulator.c ****     * Function Name: Volt_Regulator_EnableInjection
 559:Generated_Source\PSoC4/Volt_Regulator.c ****     ********************************************************************************
 560:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 561:Generated_Source\PSoC4/Volt_Regulator.c ****     * Summary:
 562:Generated_Source\PSoC4/Volt_Regulator.c ****     *  Enables the injection channel for the next scan only.
 563:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 564:Generated_Source\PSoC4/Volt_Regulator.c ****     * Parameters:
 565:Generated_Source\PSoC4/Volt_Regulator.c ****     *  None.
 566:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 567:Generated_Source\PSoC4/Volt_Regulator.c ****     * Return:
 568:Generated_Source\PSoC4/Volt_Regulator.c ****     *  None.
 569:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 570:Generated_Source\PSoC4/Volt_Regulator.c ****     *******************************************************************************/
 571:Generated_Source\PSoC4/Volt_Regulator.c ****     void Volt_Regulator_EnableInjection(void)
 572:Generated_Source\PSoC4/Volt_Regulator.c ****     {
 573:Generated_Source\PSoC4/Volt_Regulator.c ****         Volt_Regulator_SAR_INJ_CHAN_CONFIG_REG |= Volt_Regulator_INJ_CHAN_EN;
 574:Generated_Source\PSoC4/Volt_Regulator.c ****     }
 575:Generated_Source\PSoC4/Volt_Regulator.c **** 
 576:Generated_Source\PSoC4/Volt_Regulator.c **** #endif /* Volt_Regulator_INJ_CHANNEL_ENABLED */
 577:Generated_Source\PSoC4/Volt_Regulator.c **** 
 578:Generated_Source\PSoC4/Volt_Regulator.c **** 
 579:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
 580:Generated_Source\PSoC4/Volt_Regulator.c **** * Function Name: Volt_Regulator_SetLowLimit
 581:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
 582:Generated_Source\PSoC4/Volt_Regulator.c **** *
 583:Generated_Source\PSoC4/Volt_Regulator.c **** * Summary:
 584:Generated_Source\PSoC4/Volt_Regulator.c **** *  Sets the low limit parameter for a limit condition.
 585:Generated_Source\PSoC4/Volt_Regulator.c **** *
 586:Generated_Source\PSoC4/Volt_Regulator.c **** * Parameters:
 587:Generated_Source\PSoC4/Volt_Regulator.c **** *  lowLimit: The low limit for a limit condition.
 588:Generated_Source\PSoC4/Volt_Regulator.c **** *
 589:Generated_Source\PSoC4/Volt_Regulator.c **** * Return:
 590:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
 591:Generated_Source\PSoC4/Volt_Regulator.c **** *
 592:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
 593:Generated_Source\PSoC4/Volt_Regulator.c **** void Volt_Regulator_SetLowLimit(uint32 lowLimit)
 594:Generated_Source\PSoC4/Volt_Regulator.c **** {
 525              		.loc 1 594 0
 526              		.cfi_startproc
 527              		@ args = 0, pretend = 0, frame = 0
 528              		@ frame_needed = 0, uses_anonymous_args = 0
 529              		@ link register save eliminated.
 530              	.LVL30:
 595:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_RANGE_THRES_REG &= (uint32)(~Volt_Regulator_RANGE_LOW_MASK);
 531              		.loc 1 595 0
 532 0000 054A     		ldr	r2, .L43
 533 0002 1368     		ldr	r3, [r2]
 534 0004 1B0C     		lsrs	r3, r3, #16
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 21


 535 0006 1B04     		lsls	r3, r3, #16
 536 0008 1360     		str	r3, [r2]
 596:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_RANGE_THRES_REG |= lowLimit & Volt_Regulator_RANGE_LOW_MASK;
 537              		.loc 1 596 0
 538 000a 1368     		ldr	r3, [r2]
 539 000c 0004     		lsls	r0, r0, #16
 540              	.LVL31:
 541 000e 000C     		lsrs	r0, r0, #16
 542 0010 1843     		orrs	r0, r3
 543 0012 1060     		str	r0, [r2]
 597:Generated_Source\PSoC4/Volt_Regulator.c **** }
 544              		.loc 1 597 0
 545              		@ sp needed
 546 0014 7047     		bx	lr
 547              	.L44:
 548 0016 C046     		.align	2
 549              	.L43:
 550 0018 18003A40 		.word	1077542936
 551              		.cfi_endproc
 552              	.LFE11:
 553              		.size	Volt_Regulator_SetLowLimit, .-Volt_Regulator_SetLowLimit
 554              		.section	.text.Volt_Regulator_SetHighLimit,"ax",%progbits
 555              		.align	2
 556              		.global	Volt_Regulator_SetHighLimit
 557              		.code	16
 558              		.thumb_func
 559              		.type	Volt_Regulator_SetHighLimit, %function
 560              	Volt_Regulator_SetHighLimit:
 561              	.LFB12:
 598:Generated_Source\PSoC4/Volt_Regulator.c **** 
 599:Generated_Source\PSoC4/Volt_Regulator.c **** 
 600:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
 601:Generated_Source\PSoC4/Volt_Regulator.c **** * Function Name: Volt_Regulator_SetHighLimit
 602:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
 603:Generated_Source\PSoC4/Volt_Regulator.c **** *
 604:Generated_Source\PSoC4/Volt_Regulator.c **** * Summary:
 605:Generated_Source\PSoC4/Volt_Regulator.c **** *  Sets the low limit parameter for a limit condition.
 606:Generated_Source\PSoC4/Volt_Regulator.c **** *
 607:Generated_Source\PSoC4/Volt_Regulator.c **** * Parameters:
 608:Generated_Source\PSoC4/Volt_Regulator.c **** *  highLimit: The high limit for a limit condition.
 609:Generated_Source\PSoC4/Volt_Regulator.c **** *
 610:Generated_Source\PSoC4/Volt_Regulator.c **** * Return:
 611:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
 612:Generated_Source\PSoC4/Volt_Regulator.c **** *
 613:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
 614:Generated_Source\PSoC4/Volt_Regulator.c **** void Volt_Regulator_SetHighLimit(uint32 highLimit)
 615:Generated_Source\PSoC4/Volt_Regulator.c **** {
 562              		.loc 1 615 0
 563              		.cfi_startproc
 564              		@ args = 0, pretend = 0, frame = 0
 565              		@ frame_needed = 0, uses_anonymous_args = 0
 566              		@ link register save eliminated.
 567              	.LVL32:
 616:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_RANGE_THRES_REG &= (uint32)(~Volt_Regulator_RANGE_HIGH_MASK);
 568              		.loc 1 616 0
 569 0000 044A     		ldr	r2, .L46
 570 0002 1368     		ldr	r3, [r2]
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 22


 571 0004 1B04     		lsls	r3, r3, #16
 572 0006 1B0C     		lsrs	r3, r3, #16
 573 0008 1360     		str	r3, [r2]
 617:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_RANGE_THRES_REG |= (uint32)(highLimit << Volt_Regulator_RANGE_HIGH_OFFSET);
 574              		.loc 1 617 0
 575 000a 1368     		ldr	r3, [r2]
 576 000c 0004     		lsls	r0, r0, #16
 577              	.LVL33:
 578 000e 1843     		orrs	r0, r3
 579 0010 1060     		str	r0, [r2]
 618:Generated_Source\PSoC4/Volt_Regulator.c **** }
 580              		.loc 1 618 0
 581              		@ sp needed
 582 0012 7047     		bx	lr
 583              	.L47:
 584              		.align	2
 585              	.L46:
 586 0014 18003A40 		.word	1077542936
 587              		.cfi_endproc
 588              	.LFE12:
 589              		.size	Volt_Regulator_SetHighLimit, .-Volt_Regulator_SetHighLimit
 590              		.section	.text.Volt_Regulator_SetLimitMask,"ax",%progbits
 591              		.align	2
 592              		.global	Volt_Regulator_SetLimitMask
 593              		.code	16
 594              		.thumb_func
 595              		.type	Volt_Regulator_SetLimitMask, %function
 596              	Volt_Regulator_SetLimitMask:
 597              	.LFB13:
 619:Generated_Source\PSoC4/Volt_Regulator.c **** 
 620:Generated_Source\PSoC4/Volt_Regulator.c **** 
 621:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
 622:Generated_Source\PSoC4/Volt_Regulator.c **** * Function Name: Volt_Regulator_SetLimitMask
 623:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
 624:Generated_Source\PSoC4/Volt_Regulator.c **** *
 625:Generated_Source\PSoC4/Volt_Regulator.c **** * Summary:
 626:Generated_Source\PSoC4/Volt_Regulator.c **** *  Sets the channel limit condition mask.
 627:Generated_Source\PSoC4/Volt_Regulator.c **** *
 628:Generated_Source\PSoC4/Volt_Regulator.c **** * Parameters:
 629:Generated_Source\PSoC4/Volt_Regulator.c **** *  mask: Sets which channels that may cause a
 630:Generated_Source\PSoC4/Volt_Regulator.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 631:Generated_Source\PSoC4/Volt_Regulator.c **** *  will have no effect. For example, if only 6 channels were enabled,
 632:Generated_Source\PSoC4/Volt_Regulator.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 633:Generated_Source\PSoC4/Volt_Regulator.c **** *
 634:Generated_Source\PSoC4/Volt_Regulator.c **** * Return:
 635:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
 636:Generated_Source\PSoC4/Volt_Regulator.c **** *
 637:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
 638:Generated_Source\PSoC4/Volt_Regulator.c **** void Volt_Regulator_SetLimitMask(uint32 mask)
 639:Generated_Source\PSoC4/Volt_Regulator.c **** {
 598              		.loc 1 639 0
 599              		.cfi_startproc
 600              		@ args = 0, pretend = 0, frame = 0
 601              		@ frame_needed = 0, uses_anonymous_args = 0
 602              		@ link register save eliminated.
 603              	.LVL34:
 640:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_RANGE_INTR_MASK_REG = mask & Volt_Regulator_MAX_CHANNELS_EN_MASK;
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 23


 604              		.loc 1 640 0
 605 0000 0123     		movs	r3, #1
 606 0002 1840     		ands	r0, r3
 607              	.LVL35:
 608 0004 014B     		ldr	r3, .L49
 609 0006 1860     		str	r0, [r3]
 641:Generated_Source\PSoC4/Volt_Regulator.c **** }
 610              		.loc 1 641 0
 611              		@ sp needed
 612 0008 7047     		bx	lr
 613              	.L50:
 614 000a C046     		.align	2
 615              	.L49:
 616 000c 38023A40 		.word	1077543480
 617              		.cfi_endproc
 618              	.LFE13:
 619              		.size	Volt_Regulator_SetLimitMask, .-Volt_Regulator_SetLimitMask
 620              		.section	.text.Volt_Regulator_SetSatMask,"ax",%progbits
 621              		.align	2
 622              		.global	Volt_Regulator_SetSatMask
 623              		.code	16
 624              		.thumb_func
 625              		.type	Volt_Regulator_SetSatMask, %function
 626              	Volt_Regulator_SetSatMask:
 627              	.LFB14:
 642:Generated_Source\PSoC4/Volt_Regulator.c **** 
 643:Generated_Source\PSoC4/Volt_Regulator.c **** 
 644:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
 645:Generated_Source\PSoC4/Volt_Regulator.c **** * Function Name: Volt_Regulator_SetSatMask
 646:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
 647:Generated_Source\PSoC4/Volt_Regulator.c **** *
 648:Generated_Source\PSoC4/Volt_Regulator.c **** * Summary:
 649:Generated_Source\PSoC4/Volt_Regulator.c **** *  Sets the channel saturation event mask.
 650:Generated_Source\PSoC4/Volt_Regulator.c **** *
 651:Generated_Source\PSoC4/Volt_Regulator.c **** * Parameters:
 652:Generated_Source\PSoC4/Volt_Regulator.c **** *  mask: Sets which channels that may cause a
 653:Generated_Source\PSoC4/Volt_Regulator.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 654:Generated_Source\PSoC4/Volt_Regulator.c **** *  will have no effect. For example, if only 8 channels were enabled,
 655:Generated_Source\PSoC4/Volt_Regulator.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 656:Generated_Source\PSoC4/Volt_Regulator.c **** *
 657:Generated_Source\PSoC4/Volt_Regulator.c **** * Return:
 658:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
 659:Generated_Source\PSoC4/Volt_Regulator.c **** *
 660:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
 661:Generated_Source\PSoC4/Volt_Regulator.c **** void Volt_Regulator_SetSatMask(uint32 mask)
 662:Generated_Source\PSoC4/Volt_Regulator.c **** {
 628              		.loc 1 662 0
 629              		.cfi_startproc
 630              		@ args = 0, pretend = 0, frame = 0
 631              		@ frame_needed = 0, uses_anonymous_args = 0
 632              		@ link register save eliminated.
 633              	.LVL36:
 663:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_SAR_SATURATE_INTR_MASK_REG = mask & Volt_Regulator_MAX_CHANNELS_EN_MASK;
 634              		.loc 1 663 0
 635 0000 0123     		movs	r3, #1
 636 0002 1840     		ands	r0, r3
 637              	.LVL37:
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 24


 638 0004 014B     		ldr	r3, .L52
 639 0006 1860     		str	r0, [r3]
 664:Generated_Source\PSoC4/Volt_Regulator.c **** }
 640              		.loc 1 664 0
 641              		@ sp needed
 642 0008 7047     		bx	lr
 643              	.L53:
 644 000a C046     		.align	2
 645              	.L52:
 646 000c 28023A40 		.word	1077543464
 647              		.cfi_endproc
 648              	.LFE14:
 649              		.size	Volt_Regulator_SetSatMask, .-Volt_Regulator_SetSatMask
 650              		.section	.text.Volt_Regulator_SetOffset,"ax",%progbits
 651              		.align	2
 652              		.global	Volt_Regulator_SetOffset
 653              		.code	16
 654              		.thumb_func
 655              		.type	Volt_Regulator_SetOffset, %function
 656              	Volt_Regulator_SetOffset:
 657              	.LFB15:
 665:Generated_Source\PSoC4/Volt_Regulator.c **** 
 666:Generated_Source\PSoC4/Volt_Regulator.c **** 
 667:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
 668:Generated_Source\PSoC4/Volt_Regulator.c **** * Function Name: Volt_Regulator_SetOffset
 669:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
 670:Generated_Source\PSoC4/Volt_Regulator.c **** *
 671:Generated_Source\PSoC4/Volt_Regulator.c **** * Summary:
 672:Generated_Source\PSoC4/Volt_Regulator.c **** *   Description: Sets the ADC offset which is used by the functions
 673:Generated_Source\PSoC4/Volt_Regulator.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 674:Generated_Source\PSoC4/Volt_Regulator.c **** *   to substract the offset from the given reading
 675:Generated_Source\PSoC4/Volt_Regulator.c **** *   before calculating the voltage conversion.
 676:Generated_Source\PSoC4/Volt_Regulator.c **** *
 677:Generated_Source\PSoC4/Volt_Regulator.c **** * Parameters:
 678:Generated_Source\PSoC4/Volt_Regulator.c **** *  chan: ADC channel number.
 679:Generated_Source\PSoC4/Volt_Regulator.c **** *  offset: This value is a measured value when the
 680:Generated_Source\PSoC4/Volt_Regulator.c **** *          inputs are shorted or connected to the same input voltage.
 681:Generated_Source\PSoC4/Volt_Regulator.c **** *
 682:Generated_Source\PSoC4/Volt_Regulator.c **** * Return:
 683:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
 684:Generated_Source\PSoC4/Volt_Regulator.c **** *
 685:Generated_Source\PSoC4/Volt_Regulator.c **** * Global variables:
 686:Generated_Source\PSoC4/Volt_Regulator.c **** *  Volt_Regulator_Offset:  Modified to set the user provided offset.
 687:Generated_Source\PSoC4/Volt_Regulator.c **** *
 688:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
 689:Generated_Source\PSoC4/Volt_Regulator.c **** void Volt_Regulator_SetOffset(uint32 chan, int16 offset)
 690:Generated_Source\PSoC4/Volt_Regulator.c **** {
 658              		.loc 1 690 0
 659              		.cfi_startproc
 660              		@ args = 0, pretend = 0, frame = 0
 661              		@ frame_needed = 0, uses_anonymous_args = 0
 662              	.LVL38:
 663 0000 70B5     		push	{r4, r5, r6, lr}
 664              		.cfi_def_cfa_offset 16
 665              		.cfi_offset 4, -16
 666              		.cfi_offset 5, -12
 667              		.cfi_offset 6, -8
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 25


 668              		.cfi_offset 14, -4
 669 0002 0400     		movs	r4, r0
 670 0004 0D00     		movs	r5, r1
 691:Generated_Source\PSoC4/Volt_Regulator.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 692:Generated_Source\PSoC4/Volt_Regulator.c ****     CYASSERT(chan < Volt_Regulator_TOTAL_CHANNELS_NUM);
 671              		.loc 1 692 0
 672 0006 0028     		cmp	r0, #0
 673 0008 02D0     		beq	.L55
 674              		.loc 1 692 0 is_stmt 0 discriminator 1
 675 000a 0020     		movs	r0, #0
 676              	.LVL39:
 677 000c FFF7FEFF 		bl	CyHalt
 678              	.LVL40:
 679              	.L55:
 693:Generated_Source\PSoC4/Volt_Regulator.c **** 
 694:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_offset[chan] = offset;
 680              		.loc 1 694 0 is_stmt 1
 681 0010 6400     		lsls	r4, r4, #1
 682              	.LVL41:
 683 0012 014B     		ldr	r3, .L56
 684 0014 E552     		strh	r5, [r4, r3]
 695:Generated_Source\PSoC4/Volt_Regulator.c **** }
 685              		.loc 1 695 0
 686              		@ sp needed
 687 0016 70BD     		pop	{r4, r5, r6, pc}
 688              	.L57:
 689              		.align	2
 690              	.L56:
 691 0018 00000000 		.word	Volt_Regulator_offset
 692              		.cfi_endproc
 693              	.LFE15:
 694              		.size	Volt_Regulator_SetOffset, .-Volt_Regulator_SetOffset
 695              		.section	.text.Volt_Regulator_SetGain,"ax",%progbits
 696              		.align	2
 697              		.global	Volt_Regulator_SetGain
 698              		.code	16
 699              		.thumb_func
 700              		.type	Volt_Regulator_SetGain, %function
 701              	Volt_Regulator_SetGain:
 702              	.LFB16:
 696:Generated_Source\PSoC4/Volt_Regulator.c **** 
 697:Generated_Source\PSoC4/Volt_Regulator.c **** 
 698:Generated_Source\PSoC4/Volt_Regulator.c **** /*******************************************************************************
 699:Generated_Source\PSoC4/Volt_Regulator.c **** * Function Name: Volt_Regulator_SetGain
 700:Generated_Source\PSoC4/Volt_Regulator.c **** ********************************************************************************
 701:Generated_Source\PSoC4/Volt_Regulator.c **** *
 702:Generated_Source\PSoC4/Volt_Regulator.c **** * Summary:
 703:Generated_Source\PSoC4/Volt_Regulator.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 704:Generated_Source\PSoC4/Volt_Regulator.c **** *  conversion functions below. This value is set by default by the
 705:Generated_Source\PSoC4/Volt_Regulator.c **** *  reference and input range settings. It should only be used to further
 706:Generated_Source\PSoC4/Volt_Regulator.c **** *  calibrate the ADC with a known input or if an external reference is
 707:Generated_Source\PSoC4/Volt_Regulator.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 708:Generated_Source\PSoC4/Volt_Regulator.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 709:Generated_Source\PSoC4/Volt_Regulator.c **** *  conversion between ADC counts and voltage.
 710:Generated_Source\PSoC4/Volt_Regulator.c **** *
 711:Generated_Source\PSoC4/Volt_Regulator.c **** * Parameters:
 712:Generated_Source\PSoC4/Volt_Regulator.c **** *  chan: ADC channel number.
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 26


 713:Generated_Source\PSoC4/Volt_Regulator.c **** *  adcGain: ADC gain in counts per 10 volts.
 714:Generated_Source\PSoC4/Volt_Regulator.c **** *
 715:Generated_Source\PSoC4/Volt_Regulator.c **** * Return:
 716:Generated_Source\PSoC4/Volt_Regulator.c **** *  None.
 717:Generated_Source\PSoC4/Volt_Regulator.c **** *
 718:Generated_Source\PSoC4/Volt_Regulator.c **** * Global variables:
 719:Generated_Source\PSoC4/Volt_Regulator.c **** *  Volt_Regulator_CountsPer10Volt:  modified to set the ADC gain in counts
 720:Generated_Source\PSoC4/Volt_Regulator.c **** *   per 10 volt.
 721:Generated_Source\PSoC4/Volt_Regulator.c **** *
 722:Generated_Source\PSoC4/Volt_Regulator.c **** *******************************************************************************/
 723:Generated_Source\PSoC4/Volt_Regulator.c **** void Volt_Regulator_SetGain(uint32 chan, int32 adcGain)
 724:Generated_Source\PSoC4/Volt_Regulator.c **** {
 703              		.loc 1 724 0
 704              		.cfi_startproc
 705              		@ args = 0, pretend = 0, frame = 0
 706              		@ frame_needed = 0, uses_anonymous_args = 0
 707              	.LVL42:
 708 0000 70B5     		push	{r4, r5, r6, lr}
 709              		.cfi_def_cfa_offset 16
 710              		.cfi_offset 4, -16
 711              		.cfi_offset 5, -12
 712              		.cfi_offset 6, -8
 713              		.cfi_offset 14, -4
 714 0002 0400     		movs	r4, r0
 715 0004 0D00     		movs	r5, r1
 725:Generated_Source\PSoC4/Volt_Regulator.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 726:Generated_Source\PSoC4/Volt_Regulator.c ****     CYASSERT(chan < Volt_Regulator_TOTAL_CHANNELS_NUM);
 716              		.loc 1 726 0
 717 0006 0028     		cmp	r0, #0
 718 0008 02D0     		beq	.L59
 719              		.loc 1 726 0 is_stmt 0 discriminator 1
 720 000a 0020     		movs	r0, #0
 721              	.LVL43:
 722 000c FFF7FEFF 		bl	CyHalt
 723              	.LVL44:
 724              	.L59:
 727:Generated_Source\PSoC4/Volt_Regulator.c **** 
 728:Generated_Source\PSoC4/Volt_Regulator.c ****     Volt_Regulator_countsPer10Volt[chan] = adcGain;
 725              		.loc 1 728 0 is_stmt 1
 726 0010 A400     		lsls	r4, r4, #2
 727              	.LVL45:
 728 0012 014B     		ldr	r3, .L60
 729 0014 E550     		str	r5, [r4, r3]
 729:Generated_Source\PSoC4/Volt_Regulator.c **** }
 730              		.loc 1 729 0
 731              		@ sp needed
 732              	.LVL46:
 733 0016 70BD     		pop	{r4, r5, r6, pc}
 734              	.L61:
 735              		.align	2
 736              	.L60:
 737 0018 00000000 		.word	Volt_Regulator_countsPer10Volt
 738              		.cfi_endproc
 739              	.LFE16:
 740              		.size	Volt_Regulator_SetGain, .-Volt_Regulator_SetGain
 741              		.global	__aeabi_idiv
 742              		.section	.text.Volt_Regulator_CountsTo_mVolts,"ax",%progbits
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 27


 743              		.align	2
 744              		.global	Volt_Regulator_CountsTo_mVolts
 745              		.code	16
 746              		.thumb_func
 747              		.type	Volt_Regulator_CountsTo_mVolts, %function
 748              	Volt_Regulator_CountsTo_mVolts:
 749              	.LFB17:
 730:Generated_Source\PSoC4/Volt_Regulator.c **** 
 731:Generated_Source\PSoC4/Volt_Regulator.c **** 
 732:Generated_Source\PSoC4/Volt_Regulator.c **** #if(Volt_Regulator_DEFAULT_JUSTIFICATION_SEL == Volt_Regulator__RIGHT)
 733:Generated_Source\PSoC4/Volt_Regulator.c **** 
 734:Generated_Source\PSoC4/Volt_Regulator.c **** 
 735:Generated_Source\PSoC4/Volt_Regulator.c ****     /*******************************************************************************
 736:Generated_Source\PSoC4/Volt_Regulator.c ****     * Function Name: Volt_Regulator_CountsTo_mVolts
 737:Generated_Source\PSoC4/Volt_Regulator.c ****     ********************************************************************************
 738:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 739:Generated_Source\PSoC4/Volt_Regulator.c ****     * Summary:
 740:Generated_Source\PSoC4/Volt_Regulator.c ****     *  This function converts ADC counts to mVolts
 741:Generated_Source\PSoC4/Volt_Regulator.c ****     *  This function is not available when left data format justification selected.
 742:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 743:Generated_Source\PSoC4/Volt_Regulator.c ****     * Parameters:
 744:Generated_Source\PSoC4/Volt_Regulator.c ****     *  chan: The ADC channel number.
 745:Generated_Source\PSoC4/Volt_Regulator.c ****     *  adcCounts: Result from the ADC conversion
 746:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 747:Generated_Source\PSoC4/Volt_Regulator.c ****     * Return:
 748:Generated_Source\PSoC4/Volt_Regulator.c ****     *  Results in mVolts
 749:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 750:Generated_Source\PSoC4/Volt_Regulator.c ****     * Global variables:
 751:Generated_Source\PSoC4/Volt_Regulator.c ****     *  Volt_Regulator_countsPer10Volt:  used to convert ADC counts to mVolts.
 752:Generated_Source\PSoC4/Volt_Regulator.c ****     *  Volt_Regulator_Offset:  Used as the offset while converting ADC counts
 753:Generated_Source\PSoC4/Volt_Regulator.c ****     *   to mVolts.
 754:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 755:Generated_Source\PSoC4/Volt_Regulator.c ****     *******************************************************************************/
 756:Generated_Source\PSoC4/Volt_Regulator.c ****     int16 Volt_Regulator_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 757:Generated_Source\PSoC4/Volt_Regulator.c ****     {
 750              		.loc 1 757 0
 751              		.cfi_startproc
 752              		@ args = 0, pretend = 0, frame = 0
 753              		@ frame_needed = 0, uses_anonymous_args = 0
 754              	.LVL47:
 755 0000 70B5     		push	{r4, r5, r6, lr}
 756              		.cfi_def_cfa_offset 16
 757              		.cfi_offset 4, -16
 758              		.cfi_offset 5, -12
 759              		.cfi_offset 6, -8
 760              		.cfi_offset 14, -4
 761 0002 0400     		movs	r4, r0
 762 0004 0D00     		movs	r5, r1
 758:Generated_Source\PSoC4/Volt_Regulator.c ****         int16 mVolts;
 759:Generated_Source\PSoC4/Volt_Regulator.c **** 
 760:Generated_Source\PSoC4/Volt_Regulator.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 761:Generated_Source\PSoC4/Volt_Regulator.c ****         CYASSERT(chan < Volt_Regulator_TOTAL_CHANNELS_NUM);
 763              		.loc 1 761 0
 764 0006 0028     		cmp	r0, #0
 765 0008 02D0     		beq	.L63
 766              		.loc 1 761 0 is_stmt 0 discriminator 1
 767 000a 0020     		movs	r0, #0
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 28


 768              	.LVL48:
 769 000c FFF7FEFF 		bl	CyHalt
 770              	.LVL49:
 771              	.L63:
 762:Generated_Source\PSoC4/Volt_Regulator.c **** 
 763:Generated_Source\PSoC4/Volt_Regulator.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 764:Generated_Source\PSoC4/Volt_Regulator.c ****         #if(Volt_Regulator_DEFAULT_AVG_MODE == Volt_Regulator__ACCUMULATE)
 765:Generated_Source\PSoC4/Volt_Regulator.c ****             if((Volt_Regulator_channelsConfig[chan] & Volt_Regulator_AVERAGING_EN) != 0u)
 766:Generated_Source\PSoC4/Volt_Regulator.c ****             {
 767:Generated_Source\PSoC4/Volt_Regulator.c ****                 adcCounts /= Volt_Regulator_DEFAULT_AVG_SAMPLES_DIV;
 768:Generated_Source\PSoC4/Volt_Regulator.c ****             }
 769:Generated_Source\PSoC4/Volt_Regulator.c ****         #endif /* Volt_Regulator_DEFAULT_AVG_MODE == Volt_Regulator__ACCUMULATE */
 770:Generated_Source\PSoC4/Volt_Regulator.c **** 
 771:Generated_Source\PSoC4/Volt_Regulator.c ****         /* Subtract ADC offset */
 772:Generated_Source\PSoC4/Volt_Regulator.c ****         adcCounts -= Volt_Regulator_offset[chan];
 772              		.loc 1 772 0 is_stmt 1
 773 0010 6300     		lsls	r3, r4, #1
 774 0012 0F4A     		ldr	r2, .L66
 775 0014 995A     		ldrh	r1, [r3, r2]
 776 0016 09B2     		sxth	r1, r1
 777 0018 691A     		subs	r1, r5, r1
 778 001a 09B2     		sxth	r1, r1
 779              	.LVL50:
 773:Generated_Source\PSoC4/Volt_Regulator.c **** 
 774:Generated_Source\PSoC4/Volt_Regulator.c ****         mVolts = (int16)((((int32)adcCounts * Volt_Regulator_10MV_COUNTS) + ( (adcCounts > 0) ?
 780              		.loc 1 774 0
 781 001c 0D48     		ldr	r0, .L66+4
 782 001e 4843     		muls	r0, r1
 775:Generated_Source\PSoC4/Volt_Regulator.c ****                  (Volt_Regulator_countsPer10Volt[chan] / 2) : (-(Volt_Regulator_countsPer10Volt[cha
 783              		.loc 1 775 0
 784 0020 0029     		cmp	r1, #0
 785 0022 06DD     		ble	.L64
 786              		.loc 1 775 0 is_stmt 0 discriminator 1
 787 0024 A300     		lsls	r3, r4, #2
 788 0026 0C4A     		ldr	r2, .L66+8
 789 0028 9A58     		ldr	r2, [r3, r2]
 790 002a D30F     		lsrs	r3, r2, #31
 791 002c 9A18     		adds	r2, r3, r2
 792 002e 5310     		asrs	r3, r2, #1
 793 0030 06E0     		b	.L65
 794              	.L64:
 795              		.loc 1 775 0 discriminator 2
 796 0032 A300     		lsls	r3, r4, #2
 797 0034 084A     		ldr	r2, .L66+8
 798 0036 9A58     		ldr	r2, [r3, r2]
 799 0038 D30F     		lsrs	r3, r2, #31
 800 003a 9A18     		adds	r2, r3, r2
 801 003c 5210     		asrs	r2, r2, #1
 802 003e 5342     		rsbs	r3, r2, #0
 803              	.L65:
 774:Generated_Source\PSoC4/Volt_Regulator.c ****                  (Volt_Regulator_countsPer10Volt[chan] / 2) : (-(Volt_Regulator_countsPer10Volt[cha
 804              		.loc 1 774 0 is_stmt 1
 805 0040 1818     		adds	r0, r3, r0
 776:Generated_Source\PSoC4/Volt_Regulator.c ****                  / Volt_Regulator_countsPer10Volt[chan]);
 806              		.loc 1 776 0
 807 0042 A400     		lsls	r4, r4, #2
 808              	.LVL51:
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 29


 809 0044 044B     		ldr	r3, .L66+8
 810 0046 E158     		ldr	r1, [r4, r3]
 811              	.LVL52:
 812 0048 FFF7FEFF 		bl	__aeabi_idiv
 813              	.LVL53:
 774:Generated_Source\PSoC4/Volt_Regulator.c ****                  (Volt_Regulator_countsPer10Volt[chan] / 2) : (-(Volt_Regulator_countsPer10Volt[cha
 814              		.loc 1 774 0
 815 004c 00B2     		sxth	r0, r0
 816              	.LVL54:
 777:Generated_Source\PSoC4/Volt_Regulator.c **** 
 778:Generated_Source\PSoC4/Volt_Regulator.c ****         return( mVolts );
 779:Generated_Source\PSoC4/Volt_Regulator.c ****     }
 817              		.loc 1 779 0
 818              		@ sp needed
 819 004e 70BD     		pop	{r4, r5, r6, pc}
 820              	.L67:
 821              		.align	2
 822              	.L66:
 823 0050 00000000 		.word	Volt_Regulator_offset
 824 0054 10270000 		.word	10000
 825 0058 00000000 		.word	Volt_Regulator_countsPer10Volt
 826              		.cfi_endproc
 827              	.LFE17:
 828              		.size	Volt_Regulator_CountsTo_mVolts, .-Volt_Regulator_CountsTo_mVolts
 829              		.global	__aeabi_lmul
 830              		.global	__aeabi_ldivmod
 831              		.section	.text.Volt_Regulator_CountsTo_uVolts,"ax",%progbits
 832              		.align	2
 833              		.global	Volt_Regulator_CountsTo_uVolts
 834              		.code	16
 835              		.thumb_func
 836              		.type	Volt_Regulator_CountsTo_uVolts, %function
 837              	Volt_Regulator_CountsTo_uVolts:
 838              	.LFB18:
 780:Generated_Source\PSoC4/Volt_Regulator.c **** 
 781:Generated_Source\PSoC4/Volt_Regulator.c **** 
 782:Generated_Source\PSoC4/Volt_Regulator.c ****     /*******************************************************************************
 783:Generated_Source\PSoC4/Volt_Regulator.c ****     * Function Name: Volt_Regulator_CountsTo_uVolts
 784:Generated_Source\PSoC4/Volt_Regulator.c ****     ********************************************************************************
 785:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 786:Generated_Source\PSoC4/Volt_Regulator.c ****     * Summary:
 787:Generated_Source\PSoC4/Volt_Regulator.c ****     *  This function converts ADC counts to micro Volts
 788:Generated_Source\PSoC4/Volt_Regulator.c ****     *  This function is not available when left data format justification selected.
 789:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 790:Generated_Source\PSoC4/Volt_Regulator.c ****     * Parameters:
 791:Generated_Source\PSoC4/Volt_Regulator.c ****     *  chan: The ADC channel number.
 792:Generated_Source\PSoC4/Volt_Regulator.c ****     *  adcCounts: Result from the ADC conversion
 793:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 794:Generated_Source\PSoC4/Volt_Regulator.c ****     * Return:
 795:Generated_Source\PSoC4/Volt_Regulator.c ****     *  Results in uVolts
 796:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 797:Generated_Source\PSoC4/Volt_Regulator.c ****     * Global variables:
 798:Generated_Source\PSoC4/Volt_Regulator.c ****     *  Volt_Regulator_countsPer10Volt:  used to convert ADC counts to uVolts.
 799:Generated_Source\PSoC4/Volt_Regulator.c ****     *  Volt_Regulator_Offset:  Used as the offset while converting ADC counts
 800:Generated_Source\PSoC4/Volt_Regulator.c ****     *   to mVolts.
 801:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 802:Generated_Source\PSoC4/Volt_Regulator.c ****     * Theory:
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 30


 803:Generated_Source\PSoC4/Volt_Regulator.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 804:Generated_Source\PSoC4/Volt_Regulator.c ****     *  number in the conversion to uVolts and at the same time not loose
 805:Generated_Source\PSoC4/Volt_Regulator.c ****     *  resolution.
 806:Generated_Source\PSoC4/Volt_Regulator.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 807:Generated_Source\PSoC4/Volt_Regulator.c ****     *  on 10 million and later divide on gain in counts per 10V.
 808:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 809:Generated_Source\PSoC4/Volt_Regulator.c ****     *******************************************************************************/
 810:Generated_Source\PSoC4/Volt_Regulator.c ****     int32 Volt_Regulator_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 811:Generated_Source\PSoC4/Volt_Regulator.c ****     {
 839              		.loc 1 811 0
 840              		.cfi_startproc
 841              		@ args = 0, pretend = 0, frame = 0
 842              		@ frame_needed = 0, uses_anonymous_args = 0
 843              	.LVL55:
 844 0000 70B5     		push	{r4, r5, r6, lr}
 845              		.cfi_def_cfa_offset 16
 846              		.cfi_offset 4, -16
 847              		.cfi_offset 5, -12
 848              		.cfi_offset 6, -8
 849              		.cfi_offset 14, -4
 850 0002 0500     		movs	r5, r0
 851 0004 0C00     		movs	r4, r1
 812:Generated_Source\PSoC4/Volt_Regulator.c ****         int64 uVolts;
 813:Generated_Source\PSoC4/Volt_Regulator.c **** 
 814:Generated_Source\PSoC4/Volt_Regulator.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 815:Generated_Source\PSoC4/Volt_Regulator.c ****         CYASSERT(chan < Volt_Regulator_TOTAL_CHANNELS_NUM);
 852              		.loc 1 815 0
 853 0006 0028     		cmp	r0, #0
 854 0008 02D0     		beq	.L69
 855              		.loc 1 815 0 is_stmt 0 discriminator 1
 856 000a 0020     		movs	r0, #0
 857              	.LVL56:
 858 000c FFF7FEFF 		bl	CyHalt
 859              	.LVL57:
 860              	.L69:
 816:Generated_Source\PSoC4/Volt_Regulator.c **** 
 817:Generated_Source\PSoC4/Volt_Regulator.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 818:Generated_Source\PSoC4/Volt_Regulator.c ****         #if(Volt_Regulator_DEFAULT_AVG_MODE == Volt_Regulator__ACCUMULATE)
 819:Generated_Source\PSoC4/Volt_Regulator.c ****             if((Volt_Regulator_channelsConfig[chan] & Volt_Regulator_AVERAGING_EN) != 0u)
 820:Generated_Source\PSoC4/Volt_Regulator.c ****             {
 821:Generated_Source\PSoC4/Volt_Regulator.c ****                 adcCounts /= Volt_Regulator_DEFAULT_AVG_SAMPLES_DIV;
 822:Generated_Source\PSoC4/Volt_Regulator.c ****             }
 823:Generated_Source\PSoC4/Volt_Regulator.c ****         #endif /* Volt_Regulator_DEFAULT_AVG_MODE == Volt_Regulator__ACCUMULATE */
 824:Generated_Source\PSoC4/Volt_Regulator.c **** 
 825:Generated_Source\PSoC4/Volt_Regulator.c ****         /* Subtract ADC offset */
 826:Generated_Source\PSoC4/Volt_Regulator.c ****         adcCounts -= Volt_Regulator_offset[chan];
 861              		.loc 1 826 0 is_stmt 1
 862 0010 6A00     		lsls	r2, r5, #1
 863 0012 084B     		ldr	r3, .L70
 864 0014 D05A     		ldrh	r0, [r2, r3]
 865 0016 00B2     		sxth	r0, r0
 866 0018 201A     		subs	r0, r4, r0
 867 001a 00B2     		sxth	r0, r0
 868              	.LVL58:
 827:Generated_Source\PSoC4/Volt_Regulator.c **** 
 828:Generated_Source\PSoC4/Volt_Regulator.c ****         uVolts = ((int64)adcCounts * Volt_Regulator_10UV_COUNTS) / Volt_Regulator_countsPer10Volt[c
 869              		.loc 1 828 0
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 31


 870 001c C117     		asrs	r1, r0, #31
 871 001e 064A     		ldr	r2, .L70+4
 872 0020 0023     		movs	r3, #0
 873 0022 FFF7FEFF 		bl	__aeabi_lmul
 874              	.LVL59:
 875 0026 AD00     		lsls	r5, r5, #2
 876              	.LVL60:
 877 0028 044B     		ldr	r3, .L70+8
 878 002a EA58     		ldr	r2, [r5, r3]
 879 002c D317     		asrs	r3, r2, #31
 880 002e FFF7FEFF 		bl	__aeabi_ldivmod
 881              	.LVL61:
 829:Generated_Source\PSoC4/Volt_Regulator.c **** 
 830:Generated_Source\PSoC4/Volt_Regulator.c ****         return( (int32)uVolts );
 831:Generated_Source\PSoC4/Volt_Regulator.c ****     }
 882              		.loc 1 831 0
 883              		@ sp needed
 884 0032 70BD     		pop	{r4, r5, r6, pc}
 885              	.L71:
 886              		.align	2
 887              	.L70:
 888 0034 00000000 		.word	Volt_Regulator_offset
 889 0038 80969800 		.word	10000000
 890 003c 00000000 		.word	Volt_Regulator_countsPer10Volt
 891              		.cfi_endproc
 892              	.LFE18:
 893              		.size	Volt_Regulator_CountsTo_uVolts, .-Volt_Regulator_CountsTo_uVolts
 894              		.global	__aeabi_i2f
 895              		.global	__aeabi_fmul
 896              		.global	__aeabi_fdiv
 897              		.section	.text.Volt_Regulator_CountsTo_Volts,"ax",%progbits
 898              		.align	2
 899              		.global	Volt_Regulator_CountsTo_Volts
 900              		.code	16
 901              		.thumb_func
 902              		.type	Volt_Regulator_CountsTo_Volts, %function
 903              	Volt_Regulator_CountsTo_Volts:
 904              	.LFB19:
 832:Generated_Source\PSoC4/Volt_Regulator.c **** 
 833:Generated_Source\PSoC4/Volt_Regulator.c **** 
 834:Generated_Source\PSoC4/Volt_Regulator.c ****     /*******************************************************************************
 835:Generated_Source\PSoC4/Volt_Regulator.c ****     * Function Name: Volt_Regulator_CountsTo_Volts
 836:Generated_Source\PSoC4/Volt_Regulator.c ****     ********************************************************************************
 837:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 838:Generated_Source\PSoC4/Volt_Regulator.c ****     * Summary:
 839:Generated_Source\PSoC4/Volt_Regulator.c ****     *  Converts the ADC output to Volts as a floating point number.
 840:Generated_Source\PSoC4/Volt_Regulator.c ****     *  This function is not available when left data format justification selected.
 841:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 842:Generated_Source\PSoC4/Volt_Regulator.c ****     * Parameters:
 843:Generated_Source\PSoC4/Volt_Regulator.c ****     *  chan: The ADC channel number.
 844:Generated_Source\PSoC4/Volt_Regulator.c ****     *  Result from the ADC conversion
 845:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 846:Generated_Source\PSoC4/Volt_Regulator.c ****     * Return:
 847:Generated_Source\PSoC4/Volt_Regulator.c ****     *  Results in Volts
 848:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 849:Generated_Source\PSoC4/Volt_Regulator.c ****     * Global variables:
 850:Generated_Source\PSoC4/Volt_Regulator.c ****     *  Volt_Regulator_countsPer10Volt:  used to convert ADC counts to Volts.
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 32


 851:Generated_Source\PSoC4/Volt_Regulator.c ****     *  Volt_Regulator_Offset:  Used as the offset while converting ADC counts
 852:Generated_Source\PSoC4/Volt_Regulator.c ****     *   to mVolts.
 853:Generated_Source\PSoC4/Volt_Regulator.c ****     *
 854:Generated_Source\PSoC4/Volt_Regulator.c ****     *******************************************************************************/
 855:Generated_Source\PSoC4/Volt_Regulator.c ****     float32 Volt_Regulator_CountsTo_Volts(uint32 chan, int16 adcCounts)
 856:Generated_Source\PSoC4/Volt_Regulator.c ****     {
 905              		.loc 1 856 0
 906              		.cfi_startproc
 907              		@ args = 0, pretend = 0, frame = 0
 908              		@ frame_needed = 0, uses_anonymous_args = 0
 909              	.LVL62:
 910 0000 70B5     		push	{r4, r5, r6, lr}
 911              		.cfi_def_cfa_offset 16
 912              		.cfi_offset 4, -16
 913              		.cfi_offset 5, -12
 914              		.cfi_offset 6, -8
 915              		.cfi_offset 14, -4
 916 0002 0400     		movs	r4, r0
 917 0004 0D00     		movs	r5, r1
 857:Generated_Source\PSoC4/Volt_Regulator.c ****         float32 volts;
 858:Generated_Source\PSoC4/Volt_Regulator.c **** 
 859:Generated_Source\PSoC4/Volt_Regulator.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 860:Generated_Source\PSoC4/Volt_Regulator.c ****         CYASSERT(chan < Volt_Regulator_TOTAL_CHANNELS_NUM);
 918              		.loc 1 860 0
 919 0006 0028     		cmp	r0, #0
 920 0008 02D0     		beq	.L73
 921              		.loc 1 860 0 is_stmt 0 discriminator 1
 922 000a 0020     		movs	r0, #0
 923              	.LVL63:
 924 000c FFF7FEFF 		bl	CyHalt
 925              	.LVL64:
 926              	.L73:
 861:Generated_Source\PSoC4/Volt_Regulator.c **** 
 862:Generated_Source\PSoC4/Volt_Regulator.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 863:Generated_Source\PSoC4/Volt_Regulator.c ****         #if(Volt_Regulator_DEFAULT_AVG_MODE == Volt_Regulator__ACCUMULATE)
 864:Generated_Source\PSoC4/Volt_Regulator.c ****             if((Volt_Regulator_channelsConfig[chan] & Volt_Regulator_AVERAGING_EN) != 0u)
 865:Generated_Source\PSoC4/Volt_Regulator.c ****             {
 866:Generated_Source\PSoC4/Volt_Regulator.c ****                 adcCounts /= Volt_Regulator_DEFAULT_AVG_SAMPLES_DIV;
 867:Generated_Source\PSoC4/Volt_Regulator.c ****             }
 868:Generated_Source\PSoC4/Volt_Regulator.c ****         #endif /* Volt_Regulator_DEFAULT_AVG_MODE == Volt_Regulator__ACCUMULATE */
 869:Generated_Source\PSoC4/Volt_Regulator.c **** 
 870:Generated_Source\PSoC4/Volt_Regulator.c ****         /* Subtract ADC offset */
 871:Generated_Source\PSoC4/Volt_Regulator.c ****         adcCounts -= Volt_Regulator_offset[chan];
 927              		.loc 1 871 0 is_stmt 1
 928 0010 6200     		lsls	r2, r4, #1
 929 0012 0A4B     		ldr	r3, .L74
 930 0014 D05A     		ldrh	r0, [r2, r3]
 931 0016 00B2     		sxth	r0, r0
 932 0018 281A     		subs	r0, r5, r0
 933 001a 00B2     		sxth	r0, r0
 934              	.LVL65:
 872:Generated_Source\PSoC4/Volt_Regulator.c **** 
 873:Generated_Source\PSoC4/Volt_Regulator.c ****         volts = ((float32)adcCounts * Volt_Regulator_10V_COUNTS) / (float32)Volt_Regulator_countsPe
 935              		.loc 1 873 0
 936 001c FFF7FEFF 		bl	__aeabi_i2f
 937              	.LVL66:
 938 0020 0749     		ldr	r1, .L74+4
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 33


 939 0022 FFF7FEFF 		bl	__aeabi_fmul
 940              	.LVL67:
 941 0026 051C     		adds	r5, r0, #0
 942 0028 A400     		lsls	r4, r4, #2
 943              	.LVL68:
 944 002a 064B     		ldr	r3, .L74+8
 945 002c E058     		ldr	r0, [r4, r3]
 946 002e FFF7FEFF 		bl	__aeabi_i2f
 947              	.LVL69:
 948 0032 011C     		adds	r1, r0, #0
 949 0034 281C     		adds	r0, r5, #0
 950 0036 FFF7FEFF 		bl	__aeabi_fdiv
 951              	.LVL70:
 874:Generated_Source\PSoC4/Volt_Regulator.c **** 
 875:Generated_Source\PSoC4/Volt_Regulator.c ****         return( volts );
 876:Generated_Source\PSoC4/Volt_Regulator.c ****     }
 952              		.loc 1 876 0
 953              		@ sp needed
 954 003a 70BD     		pop	{r4, r5, r6, pc}
 955              	.L75:
 956              		.align	2
 957              	.L74:
 958 003c 00000000 		.word	Volt_Regulator_offset
 959 0040 00002041 		.word	1092616192
 960 0044 00000000 		.word	Volt_Regulator_countsPer10Volt
 961              		.cfi_endproc
 962              	.LFE19:
 963              		.size	Volt_Regulator_CountsTo_Volts, .-Volt_Regulator_CountsTo_Volts
 964              		.comm	Volt_Regulator_countsPer10Volt,4,4
 965              		.comm	Volt_Regulator_offset,2,4
 966              		.global	Volt_Regulator_initVar
 967              		.bss
 968              		.set	.LANCHOR0,. + 0
 969              		.type	Volt_Regulator_initVar, %object
 970              		.size	Volt_Regulator_initVar, 1
 971              	Volt_Regulator_initVar:
 972 0000 00       		.space	1
 973              		.text
 974              	.Letext0:
 975              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 976              		.file 3 "Generated_Source\\PSoC4\\CyLib.h"
 977              		.section	.debug_info,"",%progbits
 978              	.Ldebug_info0:
 979 0000 75050000 		.4byte	0x575
 980 0004 0400     		.2byte	0x4
 981 0006 00000000 		.4byte	.Ldebug_abbrev0
 982 000a 04       		.byte	0x4
 983 000b 01       		.uleb128 0x1
 984 000c 2C000000 		.4byte	.LASF63
 985 0010 0C       		.byte	0xc
 986 0011 C8010000 		.4byte	.LASF64
 987 0015 10040000 		.4byte	.LASF65
 988 0019 00000000 		.4byte	.Ldebug_ranges0+0
 989 001d 00000000 		.4byte	0
 990 0021 00000000 		.4byte	.Ldebug_line0
 991 0025 02       		.uleb128 0x2
 992 0026 01       		.byte	0x1
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 34


 993 0027 06       		.byte	0x6
 994 0028 0B010000 		.4byte	.LASF0
 995 002c 02       		.uleb128 0x2
 996 002d 01       		.byte	0x1
 997 002e 08       		.byte	0x8
 998 002f C4030000 		.4byte	.LASF1
 999 0033 02       		.uleb128 0x2
 1000 0034 02       		.byte	0x2
 1001 0035 05       		.byte	0x5
 1002 0036 D2030000 		.4byte	.LASF2
 1003 003a 02       		.uleb128 0x2
 1004 003b 02       		.byte	0x2
 1005 003c 07       		.byte	0x7
 1006 003d 6A020000 		.4byte	.LASF3
 1007 0041 02       		.uleb128 0x2
 1008 0042 04       		.byte	0x4
 1009 0043 05       		.byte	0x5
 1010 0044 39010000 		.4byte	.LASF4
 1011 0048 02       		.uleb128 0x2
 1012 0049 04       		.byte	0x4
 1013 004a 07       		.byte	0x7
 1014 004b 15020000 		.4byte	.LASF5
 1015 004f 02       		.uleb128 0x2
 1016 0050 08       		.byte	0x8
 1017 0051 05       		.byte	0x5
 1018 0052 FD000000 		.4byte	.LASF6
 1019 0056 02       		.uleb128 0x2
 1020 0057 08       		.byte	0x8
 1021 0058 07       		.byte	0x7
 1022 0059 D1000000 		.4byte	.LASF7
 1023 005d 03       		.uleb128 0x3
 1024 005e 04       		.byte	0x4
 1025 005f 05       		.byte	0x5
 1026 0060 696E7400 		.ascii	"int\000"
 1027 0064 02       		.uleb128 0x2
 1028 0065 04       		.byte	0x4
 1029 0066 07       		.byte	0x7
 1030 0067 BB010000 		.4byte	.LASF8
 1031 006b 04       		.uleb128 0x4
 1032 006c 42010000 		.4byte	.LASF9
 1033 0070 02       		.byte	0x2
 1034 0071 E401     		.2byte	0x1e4
 1035 0073 2C000000 		.4byte	0x2c
 1036 0077 04       		.uleb128 0x4
 1037 0078 00000000 		.4byte	.LASF10
 1038 007c 02       		.byte	0x2
 1039 007d E501     		.2byte	0x1e5
 1040 007f 3A000000 		.4byte	0x3a
 1041 0083 04       		.uleb128 0x4
 1042 0084 74010000 		.4byte	.LASF11
 1043 0088 02       		.byte	0x2
 1044 0089 E601     		.2byte	0x1e6
 1045 008b 48000000 		.4byte	0x48
 1046 008f 04       		.uleb128 0x4
 1047 0090 9E040000 		.4byte	.LASF12
 1048 0094 02       		.byte	0x2
 1049 0095 E801     		.2byte	0x1e8
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 35


 1050 0097 33000000 		.4byte	0x33
 1051 009b 04       		.uleb128 0x4
 1052 009c 17010000 		.4byte	.LASF13
 1053 00a0 02       		.byte	0x2
 1054 00a1 E901     		.2byte	0x1e9
 1055 00a3 41000000 		.4byte	0x41
 1056 00a7 04       		.uleb128 0x4
 1057 00a8 E7020000 		.4byte	.LASF14
 1058 00ac 02       		.byte	0x2
 1059 00ad EA01     		.2byte	0x1ea
 1060 00af B3000000 		.4byte	0xb3
 1061 00b3 02       		.uleb128 0x2
 1062 00b4 04       		.byte	0x4
 1063 00b5 04       		.byte	0x4
 1064 00b6 70030000 		.4byte	.LASF15
 1065 00ba 02       		.uleb128 0x2
 1066 00bb 08       		.byte	0x8
 1067 00bc 04       		.byte	0x4
 1068 00bd 6D010000 		.4byte	.LASF16
 1069 00c1 04       		.uleb128 0x4
 1070 00c2 59030000 		.4byte	.LASF17
 1071 00c6 02       		.byte	0x2
 1072 00c7 EF01     		.2byte	0x1ef
 1073 00c9 4F000000 		.4byte	0x4f
 1074 00cd 02       		.uleb128 0x2
 1075 00ce 01       		.byte	0x1
 1076 00cf 08       		.byte	0x8
 1077 00d0 66040000 		.4byte	.LASF18
 1078 00d4 04       		.uleb128 0x4
 1079 00d5 E1020000 		.4byte	.LASF19
 1080 00d9 02       		.byte	0x2
 1081 00da 9002     		.2byte	0x290
 1082 00dc E0000000 		.4byte	0xe0
 1083 00e0 05       		.uleb128 0x5
 1084 00e1 83000000 		.4byte	0x83
 1085 00e5 02       		.uleb128 0x2
 1086 00e6 08       		.byte	0x8
 1087 00e7 04       		.byte	0x4
 1088 00e8 17030000 		.4byte	.LASF20
 1089 00ec 02       		.uleb128 0x2
 1090 00ed 04       		.byte	0x4
 1091 00ee 07       		.byte	0x7
 1092 00ef EF020000 		.4byte	.LASF21
 1093 00f3 06       		.uleb128 0x6
 1094 00f4 F5030000 		.4byte	.LASF25
 1095 00f8 01       		.byte	0x1
 1096 00f9 5E       		.byte	0x5e
 1097 00fa 00000000 		.4byte	.LFB3
 1098 00fe 08010000 		.4byte	.LFE3-.LFB3
 1099 0102 01       		.uleb128 0x1
 1100 0103 9C       		.byte	0x9c
 1101 0104 5D010000 		.4byte	0x15d
 1102 0108 07       		.uleb128 0x7
 1103 0109 5B040000 		.4byte	.LASF22
 1104 010d 01       		.byte	0x1
 1105 010e 60       		.byte	0x60
 1106 010f 83000000 		.4byte	0x83
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 36


 1107 0113 00000000 		.4byte	.LLST0
 1108 0117 07       		.uleb128 0x7
 1109 0118 2D020000 		.4byte	.LASF23
 1110 011c 01       		.byte	0x1
 1111 011d 61       		.byte	0x61
 1112 011e 83000000 		.4byte	0x83
 1113 0122 1F000000 		.4byte	.LLST1
 1114 0126 07       		.uleb128 0x7
 1115 0127 25000000 		.4byte	.LASF24
 1116 012b 01       		.byte	0x1
 1117 012c 62       		.byte	0x62
 1118 012d 9B000000 		.4byte	0x9b
 1119 0131 5B000000 		.4byte	.LLST2
 1120 0135 08       		.uleb128 0x8
 1121 0136 0A000000 		.4byte	.LVL0
 1122 013a 4C050000 		.4byte	0x54c
 1123 013e 4D010000 		.4byte	0x14d
 1124 0142 09       		.uleb128 0x9
 1125 0143 01       		.uleb128 0x1
 1126 0144 50       		.byte	0x50
 1127 0145 01       		.uleb128 0x1
 1128 0146 3F       		.byte	0x3f
 1129 0147 09       		.uleb128 0x9
 1130 0148 01       		.uleb128 0x1
 1131 0149 51       		.byte	0x51
 1132 014a 01       		.uleb128 0x1
 1133 014b 33       		.byte	0x33
 1134 014c 00       		.byte	0
 1135 014d 0A       		.uleb128 0xa
 1136 014e 12000000 		.4byte	.LVL1
 1137 0152 57050000 		.4byte	0x557
 1138 0156 09       		.uleb128 0x9
 1139 0157 01       		.uleb128 0x1
 1140 0158 50       		.byte	0x50
 1141 0159 01       		.uleb128 0x1
 1142 015a 3F       		.byte	0x3f
 1143 015b 00       		.byte	0
 1144 015c 00       		.byte	0
 1145 015d 0B       		.uleb128 0xb
 1146 015e 01030000 		.4byte	.LASF26
 1147 0162 01       		.byte	0x1
 1148 0163 4A01     		.2byte	0x14a
 1149 0165 00000000 		.4byte	.LFB4
 1150 0169 30000000 		.4byte	.LFE4-.LFB4
 1151 016d 01       		.uleb128 0x1
 1152 016e 9C       		.byte	0x9c
 1153 016f 83010000 		.4byte	0x183
 1154 0173 0A       		.uleb128 0xa
 1155 0174 24000000 		.4byte	.LVL10
 1156 0178 62050000 		.4byte	0x562
 1157 017c 09       		.uleb128 0x9
 1158 017d 01       		.uleb128 0x1
 1159 017e 50       		.byte	0x50
 1160 017f 01       		.uleb128 0x1
 1161 0180 3A       		.byte	0x3a
 1162 0181 00       		.byte	0
 1163 0182 00       		.byte	0
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 37


 1164 0183 06       		.uleb128 0x6
 1165 0184 E8000000 		.4byte	.LASF27
 1166 0188 01       		.byte	0x1
 1167 0189 3F       		.byte	0x3f
 1168 018a 00000000 		.4byte	.LFB2
 1169 018e 20000000 		.4byte	.LFE2-.LFB2
 1170 0192 01       		.uleb128 0x1
 1171 0193 9C       		.byte	0x9c
 1172 0194 AB010000 		.4byte	0x1ab
 1173 0198 0C       		.uleb128 0xc
 1174 0199 0E000000 		.4byte	.LVL11
 1175 019d F3000000 		.4byte	0xf3
 1176 01a1 0C       		.uleb128 0xc
 1177 01a2 18000000 		.4byte	.LVL12
 1178 01a6 5D010000 		.4byte	0x15d
 1179 01aa 00       		.byte	0
 1180 01ab 0D       		.uleb128 0xd
 1181 01ac 9F010000 		.4byte	.LASF28
 1182 01b0 01       		.byte	0x1
 1183 01b1 6D01     		.2byte	0x16d
 1184 01b3 00000000 		.4byte	.LFB5
 1185 01b7 10000000 		.4byte	.LFE5-.LFB5
 1186 01bb 01       		.uleb128 0x1
 1187 01bc 9C       		.byte	0x9c
 1188 01bd 0D       		.uleb128 0xd
 1189 01be 3D030000 		.4byte	.LASF29
 1190 01c2 01       		.byte	0x1
 1191 01c3 8701     		.2byte	0x187
 1192 01c5 00000000 		.4byte	.LFB6
 1193 01c9 14000000 		.4byte	.LFE6-.LFB6
 1194 01cd 01       		.uleb128 0x1
 1195 01ce 9C       		.byte	0x9c
 1196 01cf 0D       		.uleb128 0xd
 1197 01d0 48010000 		.4byte	.LASF30
 1198 01d4 01       		.byte	0x1
 1199 01d5 A001     		.2byte	0x1a0
 1200 01d7 00000000 		.4byte	.LFB7
 1201 01db 14000000 		.4byte	.LFE7-.LFB7
 1202 01df 01       		.uleb128 0x1
 1203 01e0 9C       		.byte	0x9c
 1204 01e1 0E       		.uleb128 0xe
 1205 01e2 9E030000 		.4byte	.LASF32
 1206 01e6 01       		.byte	0x1
 1207 01e7 C201     		.2byte	0x1c2
 1208 01e9 83000000 		.4byte	0x83
 1209 01ed 00000000 		.4byte	.LFB8
 1210 01f1 28000000 		.4byte	.LFE8-.LFB8
 1211 01f5 01       		.uleb128 0x1
 1212 01f6 9C       		.byte	0x9c
 1213 01f7 1C020000 		.4byte	0x21c
 1214 01fb 0F       		.uleb128 0xf
 1215 01fc B3010000 		.4byte	.LASF34
 1216 0200 01       		.byte	0x1
 1217 0201 C201     		.2byte	0x1c2
 1218 0203 83000000 		.4byte	0x83
 1219 0207 71000000 		.4byte	.LLST3
 1220 020b 10       		.uleb128 0x10
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 38


 1221 020c 97040000 		.4byte	.LASF31
 1222 0210 01       		.byte	0x1
 1223 0211 C401     		.2byte	0x1c4
 1224 0213 83000000 		.4byte	0x83
 1225 0217 B6000000 		.4byte	.LLST4
 1226 021b 00       		.byte	0
 1227 021c 0E       		.uleb128 0xe
 1228 021d 6B040000 		.4byte	.LASF33
 1229 0221 01       		.byte	0x1
 1230 0222 F801     		.2byte	0x1f8
 1231 0224 8F000000 		.4byte	0x8f
 1232 0228 00000000 		.4byte	.LFB9
 1233 022c 2C000000 		.4byte	.LFE9-.LFB9
 1234 0230 01       		.uleb128 0x1
 1235 0231 9C       		.byte	0x9c
 1236 0232 66020000 		.4byte	0x266
 1237 0236 0F       		.uleb128 0xf
 1238 0237 61040000 		.4byte	.LASF35
 1239 023b 01       		.byte	0x1
 1240 023c F801     		.2byte	0x1f8
 1241 023e 83000000 		.4byte	0x83
 1242 0242 EC000000 		.4byte	.LLST5
 1243 0246 10       		.uleb128 0x10
 1244 0247 C3040000 		.4byte	.LASF36
 1245 024b 01       		.byte	0x1
 1246 024c FA01     		.2byte	0x1fa
 1247 024e 83000000 		.4byte	0x83
 1248 0252 31010000 		.4byte	.LLST6
 1249 0256 0A       		.uleb128 0xa
 1250 0257 0C000000 		.4byte	.LVL22
 1251 025b 6D050000 		.4byte	0x56d
 1252 025f 09       		.uleb128 0x9
 1253 0260 01       		.uleb128 0x1
 1254 0261 50       		.byte	0x50
 1255 0262 01       		.uleb128 0x1
 1256 0263 30       		.byte	0x30
 1257 0264 00       		.byte	0
 1258 0265 00       		.byte	0
 1259 0266 0B       		.uleb128 0xb
 1260 0267 7D020000 		.4byte	.LASF37
 1261 026b 01       		.byte	0x1
 1262 026c 2502     		.2byte	0x225
 1263 026e 00000000 		.4byte	.LFB10
 1264 0272 10000000 		.4byte	.LFE10-.LFB10
 1265 0276 01       		.uleb128 0x1
 1266 0277 9C       		.byte	0x9c
 1267 0278 8D020000 		.4byte	0x28d
 1268 027c 0F       		.uleb128 0xf
 1269 027d 7B010000 		.4byte	.LASF38
 1270 0281 01       		.byte	0x1
 1271 0282 2502     		.2byte	0x225
 1272 0284 83000000 		.4byte	0x83
 1273 0288 4F010000 		.4byte	.LLST7
 1274 028c 00       		.byte	0
 1275 028d 0B       		.uleb128 0xb
 1276 028e C6020000 		.4byte	.LASF39
 1277 0292 01       		.byte	0x1
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 39


 1278 0293 5102     		.2byte	0x251
 1279 0295 00000000 		.4byte	.LFB11
 1280 0299 1C000000 		.4byte	.LFE11-.LFB11
 1281 029d 01       		.uleb128 0x1
 1282 029e 9C       		.byte	0x9c
 1283 029f B4020000 		.4byte	0x2b4
 1284 02a3 0F       		.uleb128 0xf
 1285 02a4 F8020000 		.4byte	.LASF40
 1286 02a8 01       		.byte	0x1
 1287 02a9 5102     		.2byte	0x251
 1288 02ab 83000000 		.4byte	0x83
 1289 02af 70010000 		.4byte	.LLST8
 1290 02b3 00       		.byte	0
 1291 02b4 0B       		.uleb128 0xb
 1292 02b5 4E020000 		.4byte	.LASF41
 1293 02b9 01       		.byte	0x1
 1294 02ba 6602     		.2byte	0x266
 1295 02bc 00000000 		.4byte	.LFB12
 1296 02c0 18000000 		.4byte	.LFE12-.LFB12
 1297 02c4 01       		.uleb128 0x1
 1298 02c5 9C       		.byte	0x9c
 1299 02c6 DB020000 		.4byte	0x2db
 1300 02ca 0F       		.uleb128 0xf
 1301 02cb 94030000 		.4byte	.LASF42
 1302 02cf 01       		.byte	0x1
 1303 02d0 6602     		.2byte	0x266
 1304 02d2 83000000 		.4byte	0x83
 1305 02d6 91010000 		.4byte	.LLST9
 1306 02da 00       		.byte	0
 1307 02db 0B       		.uleb128 0xb
 1308 02dc 1D010000 		.4byte	.LASF43
 1309 02e0 01       		.byte	0x1
 1310 02e1 7E02     		.2byte	0x27e
 1311 02e3 00000000 		.4byte	.LFB13
 1312 02e7 10000000 		.4byte	.LFE13-.LFB13
 1313 02eb 01       		.uleb128 0x1
 1314 02ec 9C       		.byte	0x9c
 1315 02ed 02030000 		.4byte	0x302
 1316 02f1 0F       		.uleb128 0xf
 1317 02f2 7B010000 		.4byte	.LASF38
 1318 02f6 01       		.byte	0x1
 1319 02f7 7E02     		.2byte	0x27e
 1320 02f9 83000000 		.4byte	0x83
 1321 02fd B2010000 		.4byte	.LLST10
 1322 0301 00       		.byte	0
 1323 0302 0B       		.uleb128 0xb
 1324 0303 23030000 		.4byte	.LASF44
 1325 0307 01       		.byte	0x1
 1326 0308 9502     		.2byte	0x295
 1327 030a 00000000 		.4byte	.LFB14
 1328 030e 10000000 		.4byte	.LFE14-.LFB14
 1329 0312 01       		.uleb128 0x1
 1330 0313 9C       		.byte	0x9c
 1331 0314 29030000 		.4byte	0x329
 1332 0318 0F       		.uleb128 0xf
 1333 0319 7B010000 		.4byte	.LASF38
 1334 031d 01       		.byte	0x1
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 40


 1335 031e 9502     		.2byte	0x295
 1336 0320 83000000 		.4byte	0x83
 1337 0324 D3010000 		.4byte	.LLST11
 1338 0328 00       		.byte	0
 1339 0329 0B       		.uleb128 0xb
 1340 032a DC030000 		.4byte	.LASF45
 1341 032e 01       		.byte	0x1
 1342 032f B102     		.2byte	0x2b1
 1343 0331 00000000 		.4byte	.LFB15
 1344 0335 1C000000 		.4byte	.LFE15-.LFB15
 1345 0339 01       		.uleb128 0x1
 1346 033a 9C       		.byte	0x9c
 1347 033b 6F030000 		.4byte	0x36f
 1348 033f 0F       		.uleb128 0xf
 1349 0340 61040000 		.4byte	.LASF35
 1350 0344 01       		.byte	0x1
 1351 0345 B102     		.2byte	0x2b1
 1352 0347 83000000 		.4byte	0x83
 1353 034b F4010000 		.4byte	.LLST12
 1354 034f 0F       		.uleb128 0xf
 1355 0350 86040000 		.4byte	.LASF46
 1356 0354 01       		.byte	0x1
 1357 0355 B102     		.2byte	0x2b1
 1358 0357 8F000000 		.4byte	0x8f
 1359 035b 20020000 		.4byte	.LLST13
 1360 035f 0A       		.uleb128 0xa
 1361 0360 10000000 		.4byte	.LVL40
 1362 0364 6D050000 		.4byte	0x56d
 1363 0368 09       		.uleb128 0x9
 1364 0369 01       		.uleb128 0x1
 1365 036a 50       		.byte	0x50
 1366 036b 01       		.uleb128 0x1
 1367 036c 30       		.byte	0x30
 1368 036d 00       		.byte	0
 1369 036e 00       		.byte	0
 1370 036f 0B       		.uleb128 0xb
 1371 0370 37020000 		.4byte	.LASF47
 1372 0374 01       		.byte	0x1
 1373 0375 D302     		.2byte	0x2d3
 1374 0377 00000000 		.4byte	.LFB16
 1375 037b 1C000000 		.4byte	.LFE16-.LFB16
 1376 037f 01       		.uleb128 0x1
 1377 0380 9C       		.byte	0x9c
 1378 0381 B5030000 		.4byte	0x3b5
 1379 0385 0F       		.uleb128 0xf
 1380 0386 61040000 		.4byte	.LASF35
 1381 038a 01       		.byte	0x1
 1382 038b D302     		.2byte	0x2d3
 1383 038d 83000000 		.4byte	0x83
 1384 0391 41020000 		.4byte	.LLST14
 1385 0395 0F       		.uleb128 0xf
 1386 0396 1D000000 		.4byte	.LASF48
 1387 039a 01       		.byte	0x1
 1388 039b D302     		.2byte	0x2d3
 1389 039d 9B000000 		.4byte	0x9b
 1390 03a1 6D020000 		.4byte	.LLST15
 1391 03a5 0A       		.uleb128 0xa
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 41


 1392 03a6 10000000 		.4byte	.LVL44
 1393 03aa 6D050000 		.4byte	0x56d
 1394 03ae 09       		.uleb128 0x9
 1395 03af 01       		.uleb128 0x1
 1396 03b0 50       		.byte	0x50
 1397 03b1 01       		.uleb128 0x1
 1398 03b2 30       		.byte	0x30
 1399 03b3 00       		.byte	0
 1400 03b4 00       		.byte	0
 1401 03b5 11       		.uleb128 0x11
 1402 03b6 98020000 		.4byte	.LASF49
 1403 03ba 01       		.byte	0x1
 1404 03bb F402     		.2byte	0x2f4
 1405 03bd 8F000000 		.4byte	0x8f
 1406 03c1 00000000 		.4byte	.LFB17
 1407 03c5 5C000000 		.4byte	.LFE17-.LFB17
 1408 03c9 01       		.uleb128 0x1
 1409 03ca 9C       		.byte	0x9c
 1410 03cb 0D040000 		.4byte	0x40d
 1411 03cf 0F       		.uleb128 0xf
 1412 03d0 61040000 		.4byte	.LASF35
 1413 03d4 01       		.byte	0x1
 1414 03d5 F402     		.2byte	0x2f4
 1415 03d7 83000000 		.4byte	0x83
 1416 03db 9D020000 		.4byte	.LLST16
 1417 03df 0F       		.uleb128 0xf
 1418 03e0 8D040000 		.4byte	.LASF50
 1419 03e4 01       		.byte	0x1
 1420 03e5 F402     		.2byte	0x2f4
 1421 03e7 8F000000 		.4byte	0x8f
 1422 03eb C9020000 		.4byte	.LLST17
 1423 03ef 12       		.uleb128 0x12
 1424 03f0 09040000 		.4byte	.LASF51
 1425 03f4 01       		.byte	0x1
 1426 03f5 F602     		.2byte	0x2f6
 1427 03f7 8F000000 		.4byte	0x8f
 1428 03fb 01       		.uleb128 0x1
 1429 03fc 50       		.byte	0x50
 1430 03fd 0A       		.uleb128 0xa
 1431 03fe 10000000 		.4byte	.LVL49
 1432 0402 6D050000 		.4byte	0x56d
 1433 0406 09       		.uleb128 0x9
 1434 0407 01       		.uleb128 0x1
 1435 0408 50       		.byte	0x50
 1436 0409 01       		.uleb128 0x1
 1437 040a 30       		.byte	0x30
 1438 040b 00       		.byte	0
 1439 040c 00       		.byte	0
 1440 040d 11       		.uleb128 0x11
 1441 040e 80010000 		.4byte	.LASF52
 1442 0412 01       		.byte	0x1
 1443 0413 2A03     		.2byte	0x32a
 1444 0415 9B000000 		.4byte	0x9b
 1445 0419 00000000 		.4byte	.LFB18
 1446 041d 40000000 		.4byte	.LFE18-.LFB18
 1447 0421 01       		.uleb128 0x1
 1448 0422 9C       		.byte	0x9c
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 42


 1449 0423 63040000 		.4byte	0x463
 1450 0427 0F       		.uleb128 0xf
 1451 0428 61040000 		.4byte	.LASF35
 1452 042c 01       		.byte	0x1
 1453 042d 2A03     		.2byte	0x32a
 1454 042f 83000000 		.4byte	0x83
 1455 0433 F5020000 		.4byte	.LLST18
 1456 0437 0F       		.uleb128 0xf
 1457 0438 8D040000 		.4byte	.LASF50
 1458 043c 01       		.byte	0x1
 1459 043d 2A03     		.2byte	0x32a
 1460 043f 8F000000 		.4byte	0x8f
 1461 0443 21030000 		.4byte	.LLST19
 1462 0447 13       		.uleb128 0x13
 1463 0448 F0010000 		.4byte	.LASF66
 1464 044c 01       		.byte	0x1
 1465 044d 2C03     		.2byte	0x32c
 1466 044f C1000000 		.4byte	0xc1
 1467 0453 0A       		.uleb128 0xa
 1468 0454 10000000 		.4byte	.LVL57
 1469 0458 6D050000 		.4byte	0x56d
 1470 045c 09       		.uleb128 0x9
 1471 045d 01       		.uleb128 0x1
 1472 045e 50       		.byte	0x50
 1473 045f 01       		.uleb128 0x1
 1474 0460 30       		.byte	0x30
 1475 0461 00       		.byte	0
 1476 0462 00       		.byte	0
 1477 0463 11       		.uleb128 0x11
 1478 0464 76030000 		.4byte	.LASF53
 1479 0468 01       		.byte	0x1
 1480 0469 5703     		.2byte	0x357
 1481 046b A7000000 		.4byte	0xa7
 1482 046f 00000000 		.4byte	.LFB19
 1483 0473 48000000 		.4byte	.LFE19-.LFB19
 1484 0477 01       		.uleb128 0x1
 1485 0478 9C       		.byte	0x9c
 1486 0479 BB040000 		.4byte	0x4bb
 1487 047d 0F       		.uleb128 0xf
 1488 047e 61040000 		.4byte	.LASF35
 1489 0482 01       		.byte	0x1
 1490 0483 5703     		.2byte	0x357
 1491 0485 83000000 		.4byte	0x83
 1492 0489 4D030000 		.4byte	.LLST20
 1493 048d 0F       		.uleb128 0xf
 1494 048e 8D040000 		.4byte	.LASF50
 1495 0492 01       		.byte	0x1
 1496 0493 5703     		.2byte	0x357
 1497 0495 8F000000 		.4byte	0x8f
 1498 0499 79030000 		.4byte	.LLST21
 1499 049d 12       		.uleb128 0x12
 1500 049e 27020000 		.4byte	.LASF54
 1501 04a2 01       		.byte	0x1
 1502 04a3 5903     		.2byte	0x359
 1503 04a5 A7000000 		.4byte	0xa7
 1504 04a9 01       		.uleb128 0x1
 1505 04aa 50       		.byte	0x50
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 43


 1506 04ab 0A       		.uleb128 0xa
 1507 04ac 10000000 		.4byte	.LVL64
 1508 04b0 6D050000 		.4byte	0x56d
 1509 04b4 09       		.uleb128 0x9
 1510 04b5 01       		.uleb128 0x1
 1511 04b6 50       		.byte	0x50
 1512 04b7 01       		.uleb128 0x1
 1513 04b8 30       		.byte	0x30
 1514 04b9 00       		.byte	0
 1515 04ba 00       		.byte	0
 1516 04bb 14       		.uleb128 0x14
 1517 04bc CB040000 		.4byte	0x4cb
 1518 04c0 CB040000 		.4byte	0x4cb
 1519 04c4 15       		.uleb128 0x15
 1520 04c5 EC000000 		.4byte	0xec
 1521 04c9 00       		.byte	0
 1522 04ca 00       		.byte	0
 1523 04cb 16       		.uleb128 0x16
 1524 04cc 83000000 		.4byte	0x83
 1525 04d0 17       		.uleb128 0x17
 1526 04d1 F7010000 		.4byte	.LASF55
 1527 04d5 01       		.byte	0x1
 1528 04d6 21       		.byte	0x21
 1529 04d7 E0040000 		.4byte	0x4e0
 1530 04db 04       		.byte	0x4
 1531 04dc 02       		.byte	0x2
 1532 04dd 00       		.byte	0
 1533 04de 00       		.byte	0
 1534 04df 00       		.byte	0
 1535 04e0 16       		.uleb128 0x16
 1536 04e1 BB040000 		.4byte	0x4bb
 1537 04e5 18       		.uleb128 0x18
 1538 04e6 BA000000 		.4byte	.LASF56
 1539 04ea 01       		.byte	0x1
 1540 04eb 18       		.byte	0x18
 1541 04ec 6B000000 		.4byte	0x6b
 1542 04f0 05       		.uleb128 0x5
 1543 04f1 03       		.byte	0x3
 1544 04f2 00000000 		.4byte	Volt_Regulator_initVar
 1545 04f6 14       		.uleb128 0x14
 1546 04f7 06050000 		.4byte	0x506
 1547 04fb 06050000 		.4byte	0x506
 1548 04ff 15       		.uleb128 0x15
 1549 0500 EC000000 		.4byte	0xec
 1550 0504 00       		.byte	0
 1551 0505 00       		.byte	0
 1552 0506 05       		.uleb128 0x5
 1553 0507 8F000000 		.4byte	0x8f
 1554 050b 18       		.uleb128 0x18
 1555 050c 07000000 		.4byte	.LASF57
 1556 0510 01       		.byte	0x1
 1557 0511 19       		.byte	0x19
 1558 0512 1C050000 		.4byte	0x51c
 1559 0516 05       		.uleb128 0x5
 1560 0517 03       		.byte	0x3
 1561 0518 00000000 		.4byte	Volt_Regulator_offset
 1562 051c 05       		.uleb128 0x5
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 44


 1563 051d F6040000 		.4byte	0x4f6
 1564 0521 14       		.uleb128 0x14
 1565 0522 31050000 		.4byte	0x531
 1566 0526 31050000 		.4byte	0x531
 1567 052a 15       		.uleb128 0x15
 1568 052b EC000000 		.4byte	0xec
 1569 052f 00       		.byte	0
 1570 0530 00       		.byte	0
 1571 0531 05       		.uleb128 0x5
 1572 0532 9B000000 		.4byte	0x9b
 1573 0536 18       		.uleb128 0x18
 1574 0537 A4040000 		.4byte	.LASF58
 1575 053b 01       		.byte	0x1
 1576 053c 1A       		.byte	0x1a
 1577 053d 47050000 		.4byte	0x547
 1578 0541 05       		.uleb128 0x5
 1579 0542 03       		.byte	0x3
 1580 0543 00000000 		.4byte	Volt_Regulator_countsPer10Volt
 1581 0547 05       		.uleb128 0x5
 1582 0548 21050000 		.4byte	0x521
 1583 054c 19       		.uleb128 0x19
 1584 054d 5F030000 		.4byte	.LASF59
 1585 0551 5F030000 		.4byte	.LASF59
 1586 0555 03       		.byte	0x3
 1587 0556 C0       		.byte	0xc0
 1588 0557 19       		.uleb128 0x19
 1589 0558 B7020000 		.4byte	.LASF60
 1590 055c B7020000 		.4byte	.LASF60
 1591 0560 03       		.byte	0x3
 1592 0561 BD       		.byte	0xbd
 1593 0562 19       		.uleb128 0x19
 1594 0563 63010000 		.4byte	.LASF61
 1595 0567 63010000 		.4byte	.LASF61
 1596 056b 03       		.byte	0x3
 1597 056c DA       		.byte	0xda
 1598 056d 19       		.uleb128 0x19
 1599 056e BD030000 		.4byte	.LASF62
 1600 0572 BD030000 		.4byte	.LASF62
 1601 0576 03       		.byte	0x3
 1602 0577 E7       		.byte	0xe7
 1603 0578 00       		.byte	0
 1604              		.section	.debug_abbrev,"",%progbits
 1605              	.Ldebug_abbrev0:
 1606 0000 01       		.uleb128 0x1
 1607 0001 11       		.uleb128 0x11
 1608 0002 01       		.byte	0x1
 1609 0003 25       		.uleb128 0x25
 1610 0004 0E       		.uleb128 0xe
 1611 0005 13       		.uleb128 0x13
 1612 0006 0B       		.uleb128 0xb
 1613 0007 03       		.uleb128 0x3
 1614 0008 0E       		.uleb128 0xe
 1615 0009 1B       		.uleb128 0x1b
 1616 000a 0E       		.uleb128 0xe
 1617 000b 55       		.uleb128 0x55
 1618 000c 17       		.uleb128 0x17
 1619 000d 11       		.uleb128 0x11
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 45


 1620 000e 01       		.uleb128 0x1
 1621 000f 10       		.uleb128 0x10
 1622 0010 17       		.uleb128 0x17
 1623 0011 00       		.byte	0
 1624 0012 00       		.byte	0
 1625 0013 02       		.uleb128 0x2
 1626 0014 24       		.uleb128 0x24
 1627 0015 00       		.byte	0
 1628 0016 0B       		.uleb128 0xb
 1629 0017 0B       		.uleb128 0xb
 1630 0018 3E       		.uleb128 0x3e
 1631 0019 0B       		.uleb128 0xb
 1632 001a 03       		.uleb128 0x3
 1633 001b 0E       		.uleb128 0xe
 1634 001c 00       		.byte	0
 1635 001d 00       		.byte	0
 1636 001e 03       		.uleb128 0x3
 1637 001f 24       		.uleb128 0x24
 1638 0020 00       		.byte	0
 1639 0021 0B       		.uleb128 0xb
 1640 0022 0B       		.uleb128 0xb
 1641 0023 3E       		.uleb128 0x3e
 1642 0024 0B       		.uleb128 0xb
 1643 0025 03       		.uleb128 0x3
 1644 0026 08       		.uleb128 0x8
 1645 0027 00       		.byte	0
 1646 0028 00       		.byte	0
 1647 0029 04       		.uleb128 0x4
 1648 002a 16       		.uleb128 0x16
 1649 002b 00       		.byte	0
 1650 002c 03       		.uleb128 0x3
 1651 002d 0E       		.uleb128 0xe
 1652 002e 3A       		.uleb128 0x3a
 1653 002f 0B       		.uleb128 0xb
 1654 0030 3B       		.uleb128 0x3b
 1655 0031 05       		.uleb128 0x5
 1656 0032 49       		.uleb128 0x49
 1657 0033 13       		.uleb128 0x13
 1658 0034 00       		.byte	0
 1659 0035 00       		.byte	0
 1660 0036 05       		.uleb128 0x5
 1661 0037 35       		.uleb128 0x35
 1662 0038 00       		.byte	0
 1663 0039 49       		.uleb128 0x49
 1664 003a 13       		.uleb128 0x13
 1665 003b 00       		.byte	0
 1666 003c 00       		.byte	0
 1667 003d 06       		.uleb128 0x6
 1668 003e 2E       		.uleb128 0x2e
 1669 003f 01       		.byte	0x1
 1670 0040 3F       		.uleb128 0x3f
 1671 0041 19       		.uleb128 0x19
 1672 0042 03       		.uleb128 0x3
 1673 0043 0E       		.uleb128 0xe
 1674 0044 3A       		.uleb128 0x3a
 1675 0045 0B       		.uleb128 0xb
 1676 0046 3B       		.uleb128 0x3b
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 46


 1677 0047 0B       		.uleb128 0xb
 1678 0048 27       		.uleb128 0x27
 1679 0049 19       		.uleb128 0x19
 1680 004a 11       		.uleb128 0x11
 1681 004b 01       		.uleb128 0x1
 1682 004c 12       		.uleb128 0x12
 1683 004d 06       		.uleb128 0x6
 1684 004e 40       		.uleb128 0x40
 1685 004f 18       		.uleb128 0x18
 1686 0050 9742     		.uleb128 0x2117
 1687 0052 19       		.uleb128 0x19
 1688 0053 01       		.uleb128 0x1
 1689 0054 13       		.uleb128 0x13
 1690 0055 00       		.byte	0
 1691 0056 00       		.byte	0
 1692 0057 07       		.uleb128 0x7
 1693 0058 34       		.uleb128 0x34
 1694 0059 00       		.byte	0
 1695 005a 03       		.uleb128 0x3
 1696 005b 0E       		.uleb128 0xe
 1697 005c 3A       		.uleb128 0x3a
 1698 005d 0B       		.uleb128 0xb
 1699 005e 3B       		.uleb128 0x3b
 1700 005f 0B       		.uleb128 0xb
 1701 0060 49       		.uleb128 0x49
 1702 0061 13       		.uleb128 0x13
 1703 0062 02       		.uleb128 0x2
 1704 0063 17       		.uleb128 0x17
 1705 0064 00       		.byte	0
 1706 0065 00       		.byte	0
 1707 0066 08       		.uleb128 0x8
 1708 0067 898201   		.uleb128 0x4109
 1709 006a 01       		.byte	0x1
 1710 006b 11       		.uleb128 0x11
 1711 006c 01       		.uleb128 0x1
 1712 006d 31       		.uleb128 0x31
 1713 006e 13       		.uleb128 0x13
 1714 006f 01       		.uleb128 0x1
 1715 0070 13       		.uleb128 0x13
 1716 0071 00       		.byte	0
 1717 0072 00       		.byte	0
 1718 0073 09       		.uleb128 0x9
 1719 0074 8A8201   		.uleb128 0x410a
 1720 0077 00       		.byte	0
 1721 0078 02       		.uleb128 0x2
 1722 0079 18       		.uleb128 0x18
 1723 007a 9142     		.uleb128 0x2111
 1724 007c 18       		.uleb128 0x18
 1725 007d 00       		.byte	0
 1726 007e 00       		.byte	0
 1727 007f 0A       		.uleb128 0xa
 1728 0080 898201   		.uleb128 0x4109
 1729 0083 01       		.byte	0x1
 1730 0084 11       		.uleb128 0x11
 1731 0085 01       		.uleb128 0x1
 1732 0086 31       		.uleb128 0x31
 1733 0087 13       		.uleb128 0x13
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 47


 1734 0088 00       		.byte	0
 1735 0089 00       		.byte	0
 1736 008a 0B       		.uleb128 0xb
 1737 008b 2E       		.uleb128 0x2e
 1738 008c 01       		.byte	0x1
 1739 008d 3F       		.uleb128 0x3f
 1740 008e 19       		.uleb128 0x19
 1741 008f 03       		.uleb128 0x3
 1742 0090 0E       		.uleb128 0xe
 1743 0091 3A       		.uleb128 0x3a
 1744 0092 0B       		.uleb128 0xb
 1745 0093 3B       		.uleb128 0x3b
 1746 0094 05       		.uleb128 0x5
 1747 0095 27       		.uleb128 0x27
 1748 0096 19       		.uleb128 0x19
 1749 0097 11       		.uleb128 0x11
 1750 0098 01       		.uleb128 0x1
 1751 0099 12       		.uleb128 0x12
 1752 009a 06       		.uleb128 0x6
 1753 009b 40       		.uleb128 0x40
 1754 009c 18       		.uleb128 0x18
 1755 009d 9742     		.uleb128 0x2117
 1756 009f 19       		.uleb128 0x19
 1757 00a0 01       		.uleb128 0x1
 1758 00a1 13       		.uleb128 0x13
 1759 00a2 00       		.byte	0
 1760 00a3 00       		.byte	0
 1761 00a4 0C       		.uleb128 0xc
 1762 00a5 898201   		.uleb128 0x4109
 1763 00a8 00       		.byte	0
 1764 00a9 11       		.uleb128 0x11
 1765 00aa 01       		.uleb128 0x1
 1766 00ab 31       		.uleb128 0x31
 1767 00ac 13       		.uleb128 0x13
 1768 00ad 00       		.byte	0
 1769 00ae 00       		.byte	0
 1770 00af 0D       		.uleb128 0xd
 1771 00b0 2E       		.uleb128 0x2e
 1772 00b1 00       		.byte	0
 1773 00b2 3F       		.uleb128 0x3f
 1774 00b3 19       		.uleb128 0x19
 1775 00b4 03       		.uleb128 0x3
 1776 00b5 0E       		.uleb128 0xe
 1777 00b6 3A       		.uleb128 0x3a
 1778 00b7 0B       		.uleb128 0xb
 1779 00b8 3B       		.uleb128 0x3b
 1780 00b9 05       		.uleb128 0x5
 1781 00ba 27       		.uleb128 0x27
 1782 00bb 19       		.uleb128 0x19
 1783 00bc 11       		.uleb128 0x11
 1784 00bd 01       		.uleb128 0x1
 1785 00be 12       		.uleb128 0x12
 1786 00bf 06       		.uleb128 0x6
 1787 00c0 40       		.uleb128 0x40
 1788 00c1 18       		.uleb128 0x18
 1789 00c2 9742     		.uleb128 0x2117
 1790 00c4 19       		.uleb128 0x19
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 48


 1791 00c5 00       		.byte	0
 1792 00c6 00       		.byte	0
 1793 00c7 0E       		.uleb128 0xe
 1794 00c8 2E       		.uleb128 0x2e
 1795 00c9 01       		.byte	0x1
 1796 00ca 3F       		.uleb128 0x3f
 1797 00cb 19       		.uleb128 0x19
 1798 00cc 03       		.uleb128 0x3
 1799 00cd 0E       		.uleb128 0xe
 1800 00ce 3A       		.uleb128 0x3a
 1801 00cf 0B       		.uleb128 0xb
 1802 00d0 3B       		.uleb128 0x3b
 1803 00d1 05       		.uleb128 0x5
 1804 00d2 27       		.uleb128 0x27
 1805 00d3 19       		.uleb128 0x19
 1806 00d4 49       		.uleb128 0x49
 1807 00d5 13       		.uleb128 0x13
 1808 00d6 11       		.uleb128 0x11
 1809 00d7 01       		.uleb128 0x1
 1810 00d8 12       		.uleb128 0x12
 1811 00d9 06       		.uleb128 0x6
 1812 00da 40       		.uleb128 0x40
 1813 00db 18       		.uleb128 0x18
 1814 00dc 9742     		.uleb128 0x2117
 1815 00de 19       		.uleb128 0x19
 1816 00df 01       		.uleb128 0x1
 1817 00e0 13       		.uleb128 0x13
 1818 00e1 00       		.byte	0
 1819 00e2 00       		.byte	0
 1820 00e3 0F       		.uleb128 0xf
 1821 00e4 05       		.uleb128 0x5
 1822 00e5 00       		.byte	0
 1823 00e6 03       		.uleb128 0x3
 1824 00e7 0E       		.uleb128 0xe
 1825 00e8 3A       		.uleb128 0x3a
 1826 00e9 0B       		.uleb128 0xb
 1827 00ea 3B       		.uleb128 0x3b
 1828 00eb 05       		.uleb128 0x5
 1829 00ec 49       		.uleb128 0x49
 1830 00ed 13       		.uleb128 0x13
 1831 00ee 02       		.uleb128 0x2
 1832 00ef 17       		.uleb128 0x17
 1833 00f0 00       		.byte	0
 1834 00f1 00       		.byte	0
 1835 00f2 10       		.uleb128 0x10
 1836 00f3 34       		.uleb128 0x34
 1837 00f4 00       		.byte	0
 1838 00f5 03       		.uleb128 0x3
 1839 00f6 0E       		.uleb128 0xe
 1840 00f7 3A       		.uleb128 0x3a
 1841 00f8 0B       		.uleb128 0xb
 1842 00f9 3B       		.uleb128 0x3b
 1843 00fa 05       		.uleb128 0x5
 1844 00fb 49       		.uleb128 0x49
 1845 00fc 13       		.uleb128 0x13
 1846 00fd 02       		.uleb128 0x2
 1847 00fe 17       		.uleb128 0x17
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 49


 1848 00ff 00       		.byte	0
 1849 0100 00       		.byte	0
 1850 0101 11       		.uleb128 0x11
 1851 0102 2E       		.uleb128 0x2e
 1852 0103 01       		.byte	0x1
 1853 0104 3F       		.uleb128 0x3f
 1854 0105 19       		.uleb128 0x19
 1855 0106 03       		.uleb128 0x3
 1856 0107 0E       		.uleb128 0xe
 1857 0108 3A       		.uleb128 0x3a
 1858 0109 0B       		.uleb128 0xb
 1859 010a 3B       		.uleb128 0x3b
 1860 010b 05       		.uleb128 0x5
 1861 010c 27       		.uleb128 0x27
 1862 010d 19       		.uleb128 0x19
 1863 010e 49       		.uleb128 0x49
 1864 010f 13       		.uleb128 0x13
 1865 0110 11       		.uleb128 0x11
 1866 0111 01       		.uleb128 0x1
 1867 0112 12       		.uleb128 0x12
 1868 0113 06       		.uleb128 0x6
 1869 0114 40       		.uleb128 0x40
 1870 0115 18       		.uleb128 0x18
 1871 0116 9642     		.uleb128 0x2116
 1872 0118 19       		.uleb128 0x19
 1873 0119 01       		.uleb128 0x1
 1874 011a 13       		.uleb128 0x13
 1875 011b 00       		.byte	0
 1876 011c 00       		.byte	0
 1877 011d 12       		.uleb128 0x12
 1878 011e 34       		.uleb128 0x34
 1879 011f 00       		.byte	0
 1880 0120 03       		.uleb128 0x3
 1881 0121 0E       		.uleb128 0xe
 1882 0122 3A       		.uleb128 0x3a
 1883 0123 0B       		.uleb128 0xb
 1884 0124 3B       		.uleb128 0x3b
 1885 0125 05       		.uleb128 0x5
 1886 0126 49       		.uleb128 0x49
 1887 0127 13       		.uleb128 0x13
 1888 0128 02       		.uleb128 0x2
 1889 0129 18       		.uleb128 0x18
 1890 012a 00       		.byte	0
 1891 012b 00       		.byte	0
 1892 012c 13       		.uleb128 0x13
 1893 012d 34       		.uleb128 0x34
 1894 012e 00       		.byte	0
 1895 012f 03       		.uleb128 0x3
 1896 0130 0E       		.uleb128 0xe
 1897 0131 3A       		.uleb128 0x3a
 1898 0132 0B       		.uleb128 0xb
 1899 0133 3B       		.uleb128 0x3b
 1900 0134 05       		.uleb128 0x5
 1901 0135 49       		.uleb128 0x49
 1902 0136 13       		.uleb128 0x13
 1903 0137 00       		.byte	0
 1904 0138 00       		.byte	0
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 50


 1905 0139 14       		.uleb128 0x14
 1906 013a 01       		.uleb128 0x1
 1907 013b 01       		.byte	0x1
 1908 013c 49       		.uleb128 0x49
 1909 013d 13       		.uleb128 0x13
 1910 013e 01       		.uleb128 0x1
 1911 013f 13       		.uleb128 0x13
 1912 0140 00       		.byte	0
 1913 0141 00       		.byte	0
 1914 0142 15       		.uleb128 0x15
 1915 0143 21       		.uleb128 0x21
 1916 0144 00       		.byte	0
 1917 0145 49       		.uleb128 0x49
 1918 0146 13       		.uleb128 0x13
 1919 0147 2F       		.uleb128 0x2f
 1920 0148 0B       		.uleb128 0xb
 1921 0149 00       		.byte	0
 1922 014a 00       		.byte	0
 1923 014b 16       		.uleb128 0x16
 1924 014c 26       		.uleb128 0x26
 1925 014d 00       		.byte	0
 1926 014e 49       		.uleb128 0x49
 1927 014f 13       		.uleb128 0x13
 1928 0150 00       		.byte	0
 1929 0151 00       		.byte	0
 1930 0152 17       		.uleb128 0x17
 1931 0153 34       		.uleb128 0x34
 1932 0154 00       		.byte	0
 1933 0155 03       		.uleb128 0x3
 1934 0156 0E       		.uleb128 0xe
 1935 0157 3A       		.uleb128 0x3a
 1936 0158 0B       		.uleb128 0xb
 1937 0159 3B       		.uleb128 0x3b
 1938 015a 0B       		.uleb128 0xb
 1939 015b 49       		.uleb128 0x49
 1940 015c 13       		.uleb128 0x13
 1941 015d 1C       		.uleb128 0x1c
 1942 015e 0A       		.uleb128 0xa
 1943 015f 00       		.byte	0
 1944 0160 00       		.byte	0
 1945 0161 18       		.uleb128 0x18
 1946 0162 34       		.uleb128 0x34
 1947 0163 00       		.byte	0
 1948 0164 03       		.uleb128 0x3
 1949 0165 0E       		.uleb128 0xe
 1950 0166 3A       		.uleb128 0x3a
 1951 0167 0B       		.uleb128 0xb
 1952 0168 3B       		.uleb128 0x3b
 1953 0169 0B       		.uleb128 0xb
 1954 016a 49       		.uleb128 0x49
 1955 016b 13       		.uleb128 0x13
 1956 016c 3F       		.uleb128 0x3f
 1957 016d 19       		.uleb128 0x19
 1958 016e 02       		.uleb128 0x2
 1959 016f 18       		.uleb128 0x18
 1960 0170 00       		.byte	0
 1961 0171 00       		.byte	0
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 51


 1962 0172 19       		.uleb128 0x19
 1963 0173 2E       		.uleb128 0x2e
 1964 0174 00       		.byte	0
 1965 0175 3F       		.uleb128 0x3f
 1966 0176 19       		.uleb128 0x19
 1967 0177 3C       		.uleb128 0x3c
 1968 0178 19       		.uleb128 0x19
 1969 0179 6E       		.uleb128 0x6e
 1970 017a 0E       		.uleb128 0xe
 1971 017b 03       		.uleb128 0x3
 1972 017c 0E       		.uleb128 0xe
 1973 017d 3A       		.uleb128 0x3a
 1974 017e 0B       		.uleb128 0xb
 1975 017f 3B       		.uleb128 0x3b
 1976 0180 0B       		.uleb128 0xb
 1977 0181 00       		.byte	0
 1978 0182 00       		.byte	0
 1979 0183 00       		.byte	0
 1980              		.section	.debug_loc,"",%progbits
 1981              	.Ldebug_loc0:
 1982              	.LLST0:
 1983 0000 74000000 		.4byte	.LVL5
 1984 0004 78000000 		.4byte	.LVL7
 1985 0008 0200     		.2byte	0x2
 1986 000a 30       		.byte	0x30
 1987 000b 9F       		.byte	0x9f
 1988 000c 78000000 		.4byte	.LVL7
 1989 0010 08010000 		.4byte	.LFE3
 1990 0014 0100     		.2byte	0x1
 1991 0016 53       		.byte	0x53
 1992 0017 00000000 		.4byte	0
 1993 001b 00000000 		.4byte	0
 1994              	.LLST1:
 1995 001f 68000000 		.4byte	.LVL2
 1996 0023 6E000000 		.4byte	.LVL3
 1997 0027 0700     		.2byte	0x7
 1998 0029 71       		.byte	0x71
 1999 002a 00       		.sleb128 0
 2000 002b 40       		.byte	0x40
 2001 002c 49       		.byte	0x49
 2002 002d 24       		.byte	0x24
 2003 002e 21       		.byte	0x21
 2004 002f 9F       		.byte	0x9f
 2005 0030 72000000 		.4byte	.LVL4
 2006 0034 76000000 		.4byte	.LVL6
 2007 0038 0100     		.2byte	0x1
 2008 003a 53       		.byte	0x53
 2009 003b 76000000 		.4byte	.LVL6
 2010 003f 78000000 		.4byte	.LVL7
 2011 0043 0200     		.2byte	0x2
 2012 0045 72       		.byte	0x72
 2013 0046 00       		.sleb128 0
 2014 0047 78000000 		.4byte	.LVL7
 2015 004b A0000000 		.4byte	.LVL9
 2016 004f 0200     		.2byte	0x2
 2017 0051 30       		.byte	0x30
 2018 0052 9F       		.byte	0x9f
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 52


 2019 0053 00000000 		.4byte	0
 2020 0057 00000000 		.4byte	0
 2021              	.LLST2:
 2022 005b 92000000 		.4byte	.LVL8
 2023 005f A0000000 		.4byte	.LVL9
 2024 0063 0400     		.2byte	0x4
 2025 0065 0A       		.byte	0xa
 2026 0066 0010     		.2byte	0x1000
 2027 0068 9F       		.byte	0x9f
 2028 0069 00000000 		.4byte	0
 2029 006d 00000000 		.4byte	0
 2030              	.LLST3:
 2031 0071 00000000 		.4byte	.LVL13
 2032 0075 06000000 		.4byte	.LVL15
 2033 0079 0100     		.2byte	0x1
 2034 007b 50       		.byte	0x50
 2035 007c 06000000 		.4byte	.LVL15
 2036 0080 1A000000 		.4byte	.LVL17
 2037 0084 0100     		.2byte	0x1
 2038 0086 52       		.byte	0x52
 2039 0087 1A000000 		.4byte	.LVL17
 2040 008b 20000000 		.4byte	.LVL18
 2041 008f 0400     		.2byte	0x4
 2042 0091 F3       		.byte	0xf3
 2043 0092 01       		.uleb128 0x1
 2044 0093 50       		.byte	0x50
 2045 0094 9F       		.byte	0x9f
 2046 0095 20000000 		.4byte	.LVL18
 2047 0099 22000000 		.4byte	.LVL19
 2048 009d 0100     		.2byte	0x1
 2049 009f 50       		.byte	0x50
 2050 00a0 22000000 		.4byte	.LVL19
 2051 00a4 28000000 		.4byte	.LFE8
 2052 00a8 0400     		.2byte	0x4
 2053 00aa F3       		.byte	0xf3
 2054 00ab 01       		.uleb128 0x1
 2055 00ac 50       		.byte	0x50
 2056 00ad 9F       		.byte	0x9f
 2057 00ae 00000000 		.4byte	0
 2058 00b2 00000000 		.4byte	0
 2059              	.LLST4:
 2060 00b6 02000000 		.4byte	.LVL14
 2061 00ba 06000000 		.4byte	.LVL15
 2062 00be 0200     		.2byte	0x2
 2063 00c0 30       		.byte	0x30
 2064 00c1 9F       		.byte	0x9f
 2065 00c2 0E000000 		.4byte	.LVL16
 2066 00c6 20000000 		.4byte	.LVL18
 2067 00ca 0100     		.2byte	0x1
 2068 00cc 50       		.byte	0x50
 2069 00cd 20000000 		.4byte	.LVL18
 2070 00d1 22000000 		.4byte	.LVL19
 2071 00d5 0200     		.2byte	0x2
 2072 00d7 30       		.byte	0x30
 2073 00d8 9F       		.byte	0x9f
 2074 00d9 22000000 		.4byte	.LVL19
 2075 00dd 28000000 		.4byte	.LFE8
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 53


 2076 00e1 0100     		.2byte	0x1
 2077 00e3 50       		.byte	0x50
 2078 00e4 00000000 		.4byte	0
 2079 00e8 00000000 		.4byte	0
 2080              	.LLST5:
 2081 00ec 00000000 		.4byte	.LVL20
 2082 00f0 08000000 		.4byte	.LVL21
 2083 00f4 0100     		.2byte	0x1
 2084 00f6 50       		.byte	0x50
 2085 00f7 08000000 		.4byte	.LVL21
 2086 00fb 12000000 		.4byte	.LVL23
 2087 00ff 0100     		.2byte	0x1
 2088 0101 54       		.byte	0x54
 2089 0102 12000000 		.4byte	.LVL23
 2090 0106 20000000 		.4byte	.LVL25
 2091 010a 0400     		.2byte	0x4
 2092 010c F3       		.byte	0xf3
 2093 010d 01       		.uleb128 0x1
 2094 010e 50       		.byte	0x50
 2095 010f 9F       		.byte	0x9f
 2096 0110 20000000 		.4byte	.LVL25
 2097 0114 22000000 		.4byte	.LVL26
 2098 0118 0100     		.2byte	0x1
 2099 011a 54       		.byte	0x54
 2100 011b 22000000 		.4byte	.LVL26
 2101 011f 2C000000 		.4byte	.LFE9
 2102 0123 0400     		.2byte	0x4
 2103 0125 F3       		.byte	0xf3
 2104 0126 01       		.uleb128 0x1
 2105 0127 50       		.byte	0x50
 2106 0128 9F       		.byte	0x9f
 2107 0129 00000000 		.4byte	0
 2108 012d 00000000 		.4byte	0
 2109              	.LLST6:
 2110 0131 1E000000 		.4byte	.LVL24
 2111 0135 20000000 		.4byte	.LVL25
 2112 0139 0100     		.2byte	0x1
 2113 013b 50       		.byte	0x50
 2114 013c 22000000 		.4byte	.LVL26
 2115 0140 24000000 		.4byte	.LVL27
 2116 0144 0100     		.2byte	0x1
 2117 0146 50       		.byte	0x50
 2118 0147 00000000 		.4byte	0
 2119 014b 00000000 		.4byte	0
 2120              	.LLST7:
 2121 014f 00000000 		.4byte	.LVL28
 2122 0153 04000000 		.4byte	.LVL29
 2123 0157 0100     		.2byte	0x1
 2124 0159 50       		.byte	0x50
 2125 015a 04000000 		.4byte	.LVL29
 2126 015e 10000000 		.4byte	.LFE10
 2127 0162 0400     		.2byte	0x4
 2128 0164 F3       		.byte	0xf3
 2129 0165 01       		.uleb128 0x1
 2130 0166 50       		.byte	0x50
 2131 0167 9F       		.byte	0x9f
 2132 0168 00000000 		.4byte	0
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 54


 2133 016c 00000000 		.4byte	0
 2134              	.LLST8:
 2135 0170 00000000 		.4byte	.LVL30
 2136 0174 0E000000 		.4byte	.LVL31
 2137 0178 0100     		.2byte	0x1
 2138 017a 50       		.byte	0x50
 2139 017b 0E000000 		.4byte	.LVL31
 2140 017f 1C000000 		.4byte	.LFE11
 2141 0183 0400     		.2byte	0x4
 2142 0185 F3       		.byte	0xf3
 2143 0186 01       		.uleb128 0x1
 2144 0187 50       		.byte	0x50
 2145 0188 9F       		.byte	0x9f
 2146 0189 00000000 		.4byte	0
 2147 018d 00000000 		.4byte	0
 2148              	.LLST9:
 2149 0191 00000000 		.4byte	.LVL32
 2150 0195 0E000000 		.4byte	.LVL33
 2151 0199 0100     		.2byte	0x1
 2152 019b 50       		.byte	0x50
 2153 019c 0E000000 		.4byte	.LVL33
 2154 01a0 18000000 		.4byte	.LFE12
 2155 01a4 0400     		.2byte	0x4
 2156 01a6 F3       		.byte	0xf3
 2157 01a7 01       		.uleb128 0x1
 2158 01a8 50       		.byte	0x50
 2159 01a9 9F       		.byte	0x9f
 2160 01aa 00000000 		.4byte	0
 2161 01ae 00000000 		.4byte	0
 2162              	.LLST10:
 2163 01b2 00000000 		.4byte	.LVL34
 2164 01b6 04000000 		.4byte	.LVL35
 2165 01ba 0100     		.2byte	0x1
 2166 01bc 50       		.byte	0x50
 2167 01bd 04000000 		.4byte	.LVL35
 2168 01c1 10000000 		.4byte	.LFE13
 2169 01c5 0400     		.2byte	0x4
 2170 01c7 F3       		.byte	0xf3
 2171 01c8 01       		.uleb128 0x1
 2172 01c9 50       		.byte	0x50
 2173 01ca 9F       		.byte	0x9f
 2174 01cb 00000000 		.4byte	0
 2175 01cf 00000000 		.4byte	0
 2176              	.LLST11:
 2177 01d3 00000000 		.4byte	.LVL36
 2178 01d7 04000000 		.4byte	.LVL37
 2179 01db 0100     		.2byte	0x1
 2180 01dd 50       		.byte	0x50
 2181 01de 04000000 		.4byte	.LVL37
 2182 01e2 10000000 		.4byte	.LFE14
 2183 01e6 0400     		.2byte	0x4
 2184 01e8 F3       		.byte	0xf3
 2185 01e9 01       		.uleb128 0x1
 2186 01ea 50       		.byte	0x50
 2187 01eb 9F       		.byte	0x9f
 2188 01ec 00000000 		.4byte	0
 2189 01f0 00000000 		.4byte	0
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 55


 2190              	.LLST12:
 2191 01f4 00000000 		.4byte	.LVL38
 2192 01f8 0C000000 		.4byte	.LVL39
 2193 01fc 0100     		.2byte	0x1
 2194 01fe 50       		.byte	0x50
 2195 01ff 0C000000 		.4byte	.LVL39
 2196 0203 12000000 		.4byte	.LVL41
 2197 0207 0100     		.2byte	0x1
 2198 0209 54       		.byte	0x54
 2199 020a 12000000 		.4byte	.LVL41
 2200 020e 1C000000 		.4byte	.LFE15
 2201 0212 0400     		.2byte	0x4
 2202 0214 F3       		.byte	0xf3
 2203 0215 01       		.uleb128 0x1
 2204 0216 50       		.byte	0x50
 2205 0217 9F       		.byte	0x9f
 2206 0218 00000000 		.4byte	0
 2207 021c 00000000 		.4byte	0
 2208              	.LLST13:
 2209 0220 00000000 		.4byte	.LVL38
 2210 0224 0F000000 		.4byte	.LVL40-1
 2211 0228 0100     		.2byte	0x1
 2212 022a 51       		.byte	0x51
 2213 022b 0F000000 		.4byte	.LVL40-1
 2214 022f 1C000000 		.4byte	.LFE15
 2215 0233 0400     		.2byte	0x4
 2216 0235 F3       		.byte	0xf3
 2217 0236 01       		.uleb128 0x1
 2218 0237 51       		.byte	0x51
 2219 0238 9F       		.byte	0x9f
 2220 0239 00000000 		.4byte	0
 2221 023d 00000000 		.4byte	0
 2222              	.LLST14:
 2223 0241 00000000 		.4byte	.LVL42
 2224 0245 0C000000 		.4byte	.LVL43
 2225 0249 0100     		.2byte	0x1
 2226 024b 50       		.byte	0x50
 2227 024c 0C000000 		.4byte	.LVL43
 2228 0250 12000000 		.4byte	.LVL45
 2229 0254 0100     		.2byte	0x1
 2230 0256 54       		.byte	0x54
 2231 0257 12000000 		.4byte	.LVL45
 2232 025b 1C000000 		.4byte	.LFE16
 2233 025f 0400     		.2byte	0x4
 2234 0261 F3       		.byte	0xf3
 2235 0262 01       		.uleb128 0x1
 2236 0263 50       		.byte	0x50
 2237 0264 9F       		.byte	0x9f
 2238 0265 00000000 		.4byte	0
 2239 0269 00000000 		.4byte	0
 2240              	.LLST15:
 2241 026d 00000000 		.4byte	.LVL42
 2242 0271 0F000000 		.4byte	.LVL44-1
 2243 0275 0100     		.2byte	0x1
 2244 0277 51       		.byte	0x51
 2245 0278 0F000000 		.4byte	.LVL44-1
 2246 027c 16000000 		.4byte	.LVL46
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 56


 2247 0280 0100     		.2byte	0x1
 2248 0282 55       		.byte	0x55
 2249 0283 16000000 		.4byte	.LVL46
 2250 0287 1C000000 		.4byte	.LFE16
 2251 028b 0800     		.2byte	0x8
 2252 028d F3       		.byte	0xf3
 2253 028e 01       		.uleb128 0x1
 2254 028f 50       		.byte	0x50
 2255 0290 32       		.byte	0x32
 2256 0291 24       		.byte	0x24
 2257 0292 73       		.byte	0x73
 2258 0293 00       		.sleb128 0
 2259 0294 22       		.byte	0x22
 2260 0295 00000000 		.4byte	0
 2261 0299 00000000 		.4byte	0
 2262              	.LLST16:
 2263 029d 00000000 		.4byte	.LVL47
 2264 02a1 0C000000 		.4byte	.LVL48
 2265 02a5 0100     		.2byte	0x1
 2266 02a7 50       		.byte	0x50
 2267 02a8 0C000000 		.4byte	.LVL48
 2268 02ac 44000000 		.4byte	.LVL51
 2269 02b0 0100     		.2byte	0x1
 2270 02b2 54       		.byte	0x54
 2271 02b3 44000000 		.4byte	.LVL51
 2272 02b7 5C000000 		.4byte	.LFE17
 2273 02bb 0400     		.2byte	0x4
 2274 02bd F3       		.byte	0xf3
 2275 02be 01       		.uleb128 0x1
 2276 02bf 50       		.byte	0x50
 2277 02c0 9F       		.byte	0x9f
 2278 02c1 00000000 		.4byte	0
 2279 02c5 00000000 		.4byte	0
 2280              	.LLST17:
 2281 02c9 00000000 		.4byte	.LVL47
 2282 02cd 0F000000 		.4byte	.LVL49-1
 2283 02d1 0100     		.2byte	0x1
 2284 02d3 51       		.byte	0x51
 2285 02d4 0F000000 		.4byte	.LVL49-1
 2286 02d8 1C000000 		.4byte	.LVL50
 2287 02dc 0400     		.2byte	0x4
 2288 02de F3       		.byte	0xf3
 2289 02df 01       		.uleb128 0x1
 2290 02e0 51       		.byte	0x51
 2291 02e1 9F       		.byte	0x9f
 2292 02e2 1C000000 		.4byte	.LVL50
 2293 02e6 48000000 		.4byte	.LVL52
 2294 02ea 0100     		.2byte	0x1
 2295 02ec 51       		.byte	0x51
 2296 02ed 00000000 		.4byte	0
 2297 02f1 00000000 		.4byte	0
 2298              	.LLST18:
 2299 02f5 00000000 		.4byte	.LVL55
 2300 02f9 0C000000 		.4byte	.LVL56
 2301 02fd 0100     		.2byte	0x1
 2302 02ff 50       		.byte	0x50
 2303 0300 0C000000 		.4byte	.LVL56
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 57


 2304 0304 28000000 		.4byte	.LVL60
 2305 0308 0100     		.2byte	0x1
 2306 030a 55       		.byte	0x55
 2307 030b 28000000 		.4byte	.LVL60
 2308 030f 40000000 		.4byte	.LFE18
 2309 0313 0400     		.2byte	0x4
 2310 0315 F3       		.byte	0xf3
 2311 0316 01       		.uleb128 0x1
 2312 0317 50       		.byte	0x50
 2313 0318 9F       		.byte	0x9f
 2314 0319 00000000 		.4byte	0
 2315 031d 00000000 		.4byte	0
 2316              	.LLST19:
 2317 0321 00000000 		.4byte	.LVL55
 2318 0325 0F000000 		.4byte	.LVL57-1
 2319 0329 0100     		.2byte	0x1
 2320 032b 51       		.byte	0x51
 2321 032c 0F000000 		.4byte	.LVL57-1
 2322 0330 1C000000 		.4byte	.LVL58
 2323 0334 0400     		.2byte	0x4
 2324 0336 F3       		.byte	0xf3
 2325 0337 01       		.uleb128 0x1
 2326 0338 51       		.byte	0x51
 2327 0339 9F       		.byte	0x9f
 2328 033a 1C000000 		.4byte	.LVL58
 2329 033e 25000000 		.4byte	.LVL59-1
 2330 0342 0100     		.2byte	0x1
 2331 0344 50       		.byte	0x50
 2332 0345 00000000 		.4byte	0
 2333 0349 00000000 		.4byte	0
 2334              	.LLST20:
 2335 034d 00000000 		.4byte	.LVL62
 2336 0351 0C000000 		.4byte	.LVL63
 2337 0355 0100     		.2byte	0x1
 2338 0357 50       		.byte	0x50
 2339 0358 0C000000 		.4byte	.LVL63
 2340 035c 2A000000 		.4byte	.LVL68
 2341 0360 0100     		.2byte	0x1
 2342 0362 54       		.byte	0x54
 2343 0363 2A000000 		.4byte	.LVL68
 2344 0367 48000000 		.4byte	.LFE19
 2345 036b 0400     		.2byte	0x4
 2346 036d F3       		.byte	0xf3
 2347 036e 01       		.uleb128 0x1
 2348 036f 50       		.byte	0x50
 2349 0370 9F       		.byte	0x9f
 2350 0371 00000000 		.4byte	0
 2351 0375 00000000 		.4byte	0
 2352              	.LLST21:
 2353 0379 00000000 		.4byte	.LVL62
 2354 037d 0F000000 		.4byte	.LVL64-1
 2355 0381 0100     		.2byte	0x1
 2356 0383 51       		.byte	0x51
 2357 0384 0F000000 		.4byte	.LVL64-1
 2358 0388 1C000000 		.4byte	.LVL65
 2359 038c 0400     		.2byte	0x4
 2360 038e F3       		.byte	0xf3
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 58


 2361 038f 01       		.uleb128 0x1
 2362 0390 51       		.byte	0x51
 2363 0391 9F       		.byte	0x9f
 2364 0392 1C000000 		.4byte	.LVL65
 2365 0396 1F000000 		.4byte	.LVL66-1
 2366 039a 0100     		.2byte	0x1
 2367 039c 50       		.byte	0x50
 2368 039d 00000000 		.4byte	0
 2369 03a1 00000000 		.4byte	0
 2370              		.section	.debug_aranges,"",%progbits
 2371 0000 A4000000 		.4byte	0xa4
 2372 0004 0200     		.2byte	0x2
 2373 0006 00000000 		.4byte	.Ldebug_info0
 2374 000a 04       		.byte	0x4
 2375 000b 00       		.byte	0
 2376 000c 0000     		.2byte	0
 2377 000e 0000     		.2byte	0
 2378 0010 00000000 		.4byte	.LFB3
 2379 0014 08010000 		.4byte	.LFE3-.LFB3
 2380 0018 00000000 		.4byte	.LFB4
 2381 001c 30000000 		.4byte	.LFE4-.LFB4
 2382 0020 00000000 		.4byte	.LFB2
 2383 0024 20000000 		.4byte	.LFE2-.LFB2
 2384 0028 00000000 		.4byte	.LFB5
 2385 002c 10000000 		.4byte	.LFE5-.LFB5
 2386 0030 00000000 		.4byte	.LFB6
 2387 0034 14000000 		.4byte	.LFE6-.LFB6
 2388 0038 00000000 		.4byte	.LFB7
 2389 003c 14000000 		.4byte	.LFE7-.LFB7
 2390 0040 00000000 		.4byte	.LFB8
 2391 0044 28000000 		.4byte	.LFE8-.LFB8
 2392 0048 00000000 		.4byte	.LFB9
 2393 004c 2C000000 		.4byte	.LFE9-.LFB9
 2394 0050 00000000 		.4byte	.LFB10
 2395 0054 10000000 		.4byte	.LFE10-.LFB10
 2396 0058 00000000 		.4byte	.LFB11
 2397 005c 1C000000 		.4byte	.LFE11-.LFB11
 2398 0060 00000000 		.4byte	.LFB12
 2399 0064 18000000 		.4byte	.LFE12-.LFB12
 2400 0068 00000000 		.4byte	.LFB13
 2401 006c 10000000 		.4byte	.LFE13-.LFB13
 2402 0070 00000000 		.4byte	.LFB14
 2403 0074 10000000 		.4byte	.LFE14-.LFB14
 2404 0078 00000000 		.4byte	.LFB15
 2405 007c 1C000000 		.4byte	.LFE15-.LFB15
 2406 0080 00000000 		.4byte	.LFB16
 2407 0084 1C000000 		.4byte	.LFE16-.LFB16
 2408 0088 00000000 		.4byte	.LFB17
 2409 008c 5C000000 		.4byte	.LFE17-.LFB17
 2410 0090 00000000 		.4byte	.LFB18
 2411 0094 40000000 		.4byte	.LFE18-.LFB18
 2412 0098 00000000 		.4byte	.LFB19
 2413 009c 48000000 		.4byte	.LFE19-.LFB19
 2414 00a0 00000000 		.4byte	0
 2415 00a4 00000000 		.4byte	0
 2416              		.section	.debug_ranges,"",%progbits
 2417              	.Ldebug_ranges0:
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 59


 2418 0000 00000000 		.4byte	.LFB3
 2419 0004 08010000 		.4byte	.LFE3
 2420 0008 00000000 		.4byte	.LFB4
 2421 000c 30000000 		.4byte	.LFE4
 2422 0010 00000000 		.4byte	.LFB2
 2423 0014 20000000 		.4byte	.LFE2
 2424 0018 00000000 		.4byte	.LFB5
 2425 001c 10000000 		.4byte	.LFE5
 2426 0020 00000000 		.4byte	.LFB6
 2427 0024 14000000 		.4byte	.LFE6
 2428 0028 00000000 		.4byte	.LFB7
 2429 002c 14000000 		.4byte	.LFE7
 2430 0030 00000000 		.4byte	.LFB8
 2431 0034 28000000 		.4byte	.LFE8
 2432 0038 00000000 		.4byte	.LFB9
 2433 003c 2C000000 		.4byte	.LFE9
 2434 0040 00000000 		.4byte	.LFB10
 2435 0044 10000000 		.4byte	.LFE10
 2436 0048 00000000 		.4byte	.LFB11
 2437 004c 1C000000 		.4byte	.LFE11
 2438 0050 00000000 		.4byte	.LFB12
 2439 0054 18000000 		.4byte	.LFE12
 2440 0058 00000000 		.4byte	.LFB13
 2441 005c 10000000 		.4byte	.LFE13
 2442 0060 00000000 		.4byte	.LFB14
 2443 0064 10000000 		.4byte	.LFE14
 2444 0068 00000000 		.4byte	.LFB15
 2445 006c 1C000000 		.4byte	.LFE15
 2446 0070 00000000 		.4byte	.LFB16
 2447 0074 1C000000 		.4byte	.LFE16
 2448 0078 00000000 		.4byte	.LFB17
 2449 007c 5C000000 		.4byte	.LFE17
 2450 0080 00000000 		.4byte	.LFB18
 2451 0084 40000000 		.4byte	.LFE18
 2452 0088 00000000 		.4byte	.LFB19
 2453 008c 48000000 		.4byte	.LFE19
 2454 0090 00000000 		.4byte	0
 2455 0094 00000000 		.4byte	0
 2456              		.section	.debug_line,"",%progbits
 2457              	.Ldebug_line0:
 2458 0000 7A020000 		.section	.debug_str,"MS",%progbits,1
 2458      02005600 
 2458      00000201 
 2458      FB0E0D00 
 2458      01010101 
 2459              	.LASF10:
 2460 0000 75696E74 		.ascii	"uint16\000"
 2460      313600
 2461              	.LASF57:
 2462 0007 566F6C74 		.ascii	"Volt_Regulator_offset\000"
 2462      5F526567 
 2462      756C6174 
 2462      6F725F6F 
 2462      66667365 
 2463              	.LASF48:
 2464 001d 61646347 		.ascii	"adcGain\000"
 2464      61696E00 
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 60


 2465              	.LASF24:
 2466 0025 636F756E 		.ascii	"counts\000"
 2466      747300
 2467              	.LASF63:
 2468 002c 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2468      43313120 
 2468      352E342E 
 2468      31203230 
 2468      31363036 
 2469 005f 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 2469      20726576 
 2469      6973696F 
 2469      6E203233 
 2469      37373135 
 2470 0092 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 2470      66756E63 
 2470      74696F6E 
 2470      2D736563 
 2470      74696F6E 
 2471              	.LASF56:
 2472 00ba 566F6C74 		.ascii	"Volt_Regulator_initVar\000"
 2472      5F526567 
 2472      756C6174 
 2472      6F725F69 
 2472      6E697456 
 2473              	.LASF7:
 2474 00d1 6C6F6E67 		.ascii	"long long unsigned int\000"
 2474      206C6F6E 
 2474      6720756E 
 2474      7369676E 
 2474      65642069 
 2475              	.LASF27:
 2476 00e8 566F6C74 		.ascii	"Volt_Regulator_Start\000"
 2476      5F526567 
 2476      756C6174 
 2476      6F725F53 
 2476      74617274 
 2477              	.LASF6:
 2478 00fd 6C6F6E67 		.ascii	"long long int\000"
 2478      206C6F6E 
 2478      6720696E 
 2478      7400
 2479              	.LASF0:
 2480 010b 7369676E 		.ascii	"signed char\000"
 2480      65642063 
 2480      68617200 
 2481              	.LASF13:
 2482 0117 696E7433 		.ascii	"int32\000"
 2482      3200
 2483              	.LASF43:
 2484 011d 566F6C74 		.ascii	"Volt_Regulator_SetLimitMask\000"
 2484      5F526567 
 2484      756C6174 
 2484      6F725F53 
 2484      65744C69 
 2485              	.LASF4:
 2486 0139 6C6F6E67 		.ascii	"long int\000"
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 61


 2486      20696E74 
 2486      00
 2487              	.LASF9:
 2488 0142 75696E74 		.ascii	"uint8\000"
 2488      3800
 2489              	.LASF30:
 2490 0148 566F6C74 		.ascii	"Volt_Regulator_StopConvert\000"
 2490      5F526567 
 2490      756C6174 
 2490      6F725F53 
 2490      746F7043 
 2491              	.LASF61:
 2492 0163 43794465 		.ascii	"CyDelayUs\000"
 2492      6C617955 
 2492      7300
 2493              	.LASF16:
 2494 016d 646F7562 		.ascii	"double\000"
 2494      6C6500
 2495              	.LASF11:
 2496 0174 75696E74 		.ascii	"uint32\000"
 2496      333200
 2497              	.LASF38:
 2498 017b 6D61736B 		.ascii	"mask\000"
 2498      00
 2499              	.LASF52:
 2500 0180 566F6C74 		.ascii	"Volt_Regulator_CountsTo_uVolts\000"
 2500      5F526567 
 2500      756C6174 
 2500      6F725F43 
 2500      6F756E74 
 2501              	.LASF28:
 2502 019f 566F6C74 		.ascii	"Volt_Regulator_Stop\000"
 2502      5F526567 
 2502      756C6174 
 2502      6F725F53 
 2502      746F7000 
 2503              	.LASF34:
 2504 01b3 7265744D 		.ascii	"retMode\000"
 2504      6F646500 
 2505              	.LASF8:
 2506 01bb 756E7369 		.ascii	"unsigned int\000"
 2506      676E6564 
 2506      20696E74 
 2506      00
 2507              	.LASF64:
 2508 01c8 47656E65 		.ascii	"Generated_Source\\PSoC4\\Volt_Regulator.c\000"
 2508      72617465 
 2508      645F536F 
 2508      75726365 
 2508      5C50536F 
 2509              	.LASF66:
 2510 01f0 75566F6C 		.ascii	"uVolts\000"
 2510      747300
 2511              	.LASF55:
 2512 01f7 566F6C74 		.ascii	"Volt_Regulator_channelsConfig\000"
 2512      5F526567 
 2512      756C6174 
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 62


 2512      6F725F63 
 2512      68616E6E 
 2513              	.LASF5:
 2514 0215 6C6F6E67 		.ascii	"long unsigned int\000"
 2514      20756E73 
 2514      69676E65 
 2514      6420696E 
 2514      7400
 2515              	.LASF54:
 2516 0227 766F6C74 		.ascii	"volts\000"
 2516      7300
 2517              	.LASF23:
 2518 022d 746D7052 		.ascii	"tmpRegVal\000"
 2518      65675661 
 2518      6C00
 2519              	.LASF47:
 2520 0237 566F6C74 		.ascii	"Volt_Regulator_SetGain\000"
 2520      5F526567 
 2520      756C6174 
 2520      6F725F53 
 2520      65744761 
 2521              	.LASF41:
 2522 024e 566F6C74 		.ascii	"Volt_Regulator_SetHighLimit\000"
 2522      5F526567 
 2522      756C6174 
 2522      6F725F53 
 2522      65744869 
 2523              	.LASF3:
 2524 026a 73686F72 		.ascii	"short unsigned int\000"
 2524      7420756E 
 2524      7369676E 
 2524      65642069 
 2524      6E7400
 2525              	.LASF37:
 2526 027d 566F6C74 		.ascii	"Volt_Regulator_SetChanMask\000"
 2526      5F526567 
 2526      756C6174 
 2526      6F725F53 
 2526      65744368 
 2527              	.LASF49:
 2528 0298 566F6C74 		.ascii	"Volt_Regulator_CountsTo_mVolts\000"
 2528      5F526567 
 2528      756C6174 
 2528      6F725F43 
 2528      6F756E74 
 2529              	.LASF60:
 2530 02b7 4379496E 		.ascii	"CyIntSetVector\000"
 2530      74536574 
 2530      56656374 
 2530      6F7200
 2531              	.LASF39:
 2532 02c6 566F6C74 		.ascii	"Volt_Regulator_SetLowLimit\000"
 2532      5F526567 
 2532      756C6174 
 2532      6F725F53 
 2532      65744C6F 
 2533              	.LASF19:
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 63


 2534 02e1 72656733 		.ascii	"reg32\000"
 2534      3200
 2535              	.LASF14:
 2536 02e7 666C6F61 		.ascii	"float32\000"
 2536      74333200 
 2537              	.LASF21:
 2538 02ef 73697A65 		.ascii	"sizetype\000"
 2538      74797065 
 2538      00
 2539              	.LASF40:
 2540 02f8 6C6F774C 		.ascii	"lowLimit\000"
 2540      696D6974 
 2540      00
 2541              	.LASF26:
 2542 0301 566F6C74 		.ascii	"Volt_Regulator_Enable\000"
 2542      5F526567 
 2542      756C6174 
 2542      6F725F45 
 2542      6E61626C 
 2543              	.LASF20:
 2544 0317 6C6F6E67 		.ascii	"long double\000"
 2544      20646F75 
 2544      626C6500 
 2545              	.LASF44:
 2546 0323 566F6C74 		.ascii	"Volt_Regulator_SetSatMask\000"
 2546      5F526567 
 2546      756C6174 
 2546      6F725F53 
 2546      65745361 
 2547              	.LASF29:
 2548 033d 566F6C74 		.ascii	"Volt_Regulator_StartConvert\000"
 2548      5F526567 
 2548      756C6174 
 2548      6F725F53 
 2548      74617274 
 2549              	.LASF17:
 2550 0359 696E7436 		.ascii	"int64\000"
 2550      3400
 2551              	.LASF59:
 2552 035f 4379496E 		.ascii	"CyIntSetPriority\000"
 2552      74536574 
 2552      5072696F 
 2552      72697479 
 2552      00
 2553              	.LASF15:
 2554 0370 666C6F61 		.ascii	"float\000"
 2554      7400
 2555              	.LASF53:
 2556 0376 566F6C74 		.ascii	"Volt_Regulator_CountsTo_Volts\000"
 2556      5F526567 
 2556      756C6174 
 2556      6F725F43 
 2556      6F756E74 
 2557              	.LASF42:
 2558 0394 68696768 		.ascii	"highLimit\000"
 2558      4C696D69 
 2558      7400
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 64


 2559              	.LASF32:
 2560 039e 566F6C74 		.ascii	"Volt_Regulator_IsEndConversion\000"
 2560      5F526567 
 2560      756C6174 
 2560      6F725F49 
 2560      73456E64 
 2561              	.LASF62:
 2562 03bd 43794861 		.ascii	"CyHalt\000"
 2562      6C7400
 2563              	.LASF1:
 2564 03c4 756E7369 		.ascii	"unsigned char\000"
 2564      676E6564 
 2564      20636861 
 2564      7200
 2565              	.LASF2:
 2566 03d2 73686F72 		.ascii	"short int\000"
 2566      7420696E 
 2566      7400
 2567              	.LASF45:
 2568 03dc 566F6C74 		.ascii	"Volt_Regulator_SetOffset\000"
 2568      5F526567 
 2568      756C6174 
 2568      6F725F53 
 2568      65744F66 
 2569              	.LASF25:
 2570 03f5 566F6C74 		.ascii	"Volt_Regulator_Init\000"
 2570      5F526567 
 2570      756C6174 
 2570      6F725F49 
 2570      6E697400 
 2571              	.LASF51:
 2572 0409 6D566F6C 		.ascii	"mVolts\000"
 2572      747300
 2573              	.LASF65:
 2574 0410 433A5C55 		.ascii	"C:\\Users\\sergio\\Documents\\PSoC Creator\\SD_Devi"
 2574      73657273 
 2574      5C736572 
 2574      67696F5C 
 2574      446F6375 
 2575 043e 63655F45 		.ascii	"ce_EmbeddedCode\\SDBLEE.cydsn\000"
 2575      6D626564 
 2575      64656443 
 2575      6F64655C 
 2575      5344424C 
 2576              	.LASF22:
 2577 045b 63684E75 		.ascii	"chNum\000"
 2577      6D00
 2578              	.LASF35:
 2579 0461 6368616E 		.ascii	"chan\000"
 2579      00
 2580              	.LASF18:
 2581 0466 63686172 		.ascii	"char\000"
 2581      00
 2582              	.LASF33:
 2583 046b 566F6C74 		.ascii	"Volt_Regulator_GetResult16\000"
 2583      5F526567 
 2583      756C6174 
ARM GAS  C:\Users\sergio\AppData\Local\Temp\cckIYZNb.s 			page 65


 2583      6F725F47 
 2583      65745265 
 2584              	.LASF46:
 2585 0486 6F666673 		.ascii	"offset\000"
 2585      657400
 2586              	.LASF50:
 2587 048d 61646343 		.ascii	"adcCounts\000"
 2587      6F756E74 
 2587      7300
 2588              	.LASF31:
 2589 0497 73746174 		.ascii	"status\000"
 2589      757300
 2590              	.LASF12:
 2591 049e 696E7431 		.ascii	"int16\000"
 2591      3600
 2592              	.LASF58:
 2593 04a4 566F6C74 		.ascii	"Volt_Regulator_countsPer10Volt\000"
 2593      5F526567 
 2593      756C6174 
 2593      6F725F63 
 2593      6F756E74 
 2594              	.LASF36:
 2595 04c3 72657375 		.ascii	"result\000"
 2595      6C7400
 2596              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
